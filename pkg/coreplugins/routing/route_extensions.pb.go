// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: route_extensions.proto

/*
Package routing is a generated protocol buffer package.

It is generated from these files:
	route_extensions.proto

It has these top-level messages:
	RouteExtensions
	HeaderValue
	CorsPolicy
*/
package routing

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RouteExtensions should be placed in the route.extensions field
// RouteExtensions extend the behavior of a regular route in gloo (within a virtual service)
type RouteExtensions struct {
	// These headers will be added to the request before it is sent to the upstream
	AddRequestHeaders []*HeaderValue `protobuf:"bytes,1,rep,name=add_request_headers,json=addRequestHeaders" json:"add_request_headers,omitempty"`
	// These headers will be added to the response before it is returned to the downstream
	AddResponseHeaders []*HeaderValue `protobuf:"bytes,2,rep,name=add_response_headers,json=addResponseHeaders" json:"add_response_headers,omitempty"`
	// These headers will be removed from the request before it is sent to the upstream
	RemoveResponseHeaders []string `protobuf:"bytes,3,rep,name=remove_response_headers,json=removeResponseHeaders" json:"remove_response_headers,omitempty"`
	// The maximum number of retries to attempt for requests that get a 5xx response
	MaxRetries uint32 `protobuf:"varint,4,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// If set, time out requests on this route. If not set, this will default to the connection timeout on the upstream
	Timeout *time.Duration `protobuf:"bytes,5,opt,name=timeout,stdduration" json:"timeout,omitempty"`
	// Rewrite the host header of the request to this value, if set
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,proto3" json:"host_rewrite,omitempty"`
	// Configure Cross-Origin Resource Sharing requests
	Cors *CorsPolicy `protobuf:"bytes,7,opt,name=cors" json:"cors,omitempty"`
}

func (m *RouteExtensions) Reset()                    { *m = RouteExtensions{} }
func (m *RouteExtensions) String() string            { return proto.CompactTextString(m) }
func (*RouteExtensions) ProtoMessage()               {}
func (*RouteExtensions) Descriptor() ([]byte, []int) { return fileDescriptorRouteExtensions, []int{0} }

func (m *RouteExtensions) GetAddRequestHeaders() []*HeaderValue {
	if m != nil {
		return m.AddRequestHeaders
	}
	return nil
}

func (m *RouteExtensions) GetAddResponseHeaders() []*HeaderValue {
	if m != nil {
		return m.AddResponseHeaders
	}
	return nil
}

func (m *RouteExtensions) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *RouteExtensions) GetMaxRetries() uint32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *RouteExtensions) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RouteExtensions) GetHostRewrite() string {
	if m != nil {
		return m.HostRewrite
	}
	return ""
}

func (m *RouteExtensions) GetCors() *CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

// Header name/value pair
type HeaderValue struct {
	// Header name
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Header value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Should this value be appended?
	Append bool `protobuf:"varint,3,opt,name=append,proto3" json:"append,omitempty"`
}

func (m *HeaderValue) Reset()                    { *m = HeaderValue{} }
func (m *HeaderValue) String() string            { return proto.CompactTextString(m) }
func (*HeaderValue) ProtoMessage()               {}
func (*HeaderValue) Descriptor() ([]byte, []int) { return fileDescriptorRouteExtensions, []int{1} }

func (m *HeaderValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HeaderValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *HeaderValue) GetAppend() bool {
	if m != nil {
		return m.Append
	}
	return false
}

// Configuration for Cross-Origin Resource Sharing requests
type CorsPolicy struct {
	// Specifies the origins that will be allowed to do CORS requests.
	//
	// An origin is allowed if either allow_origin matches.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin" json:"allow_origin,omitempty"`
	// Specifies the content for the *access-control-allow-methods* header.
	AllowMethods string `protobuf:"bytes,2,opt,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// Specifies the content for the *access-control-allow-headers* header.
	AllowHeaders string `protobuf:"bytes,3,opt,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// Specifies the content for the *access-control-expose-headers* header.
	ExposeHeaders string `protobuf:"bytes,4,opt,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies the content for the *access-control-max-age* header.
	MaxAge *time.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,stdduration" json:"max_age,omitempty"`
	// Specifies whether the resource allows credentials.
	AllowCredentials bool `protobuf:"varint,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
}

func (m *CorsPolicy) Reset()                    { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string            { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()               {}
func (*CorsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorRouteExtensions, []int{2} }

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() string {
	if m != nil {
		return m.AllowMethods
	}
	return ""
}

func (m *CorsPolicy) GetAllowHeaders() string {
	if m != nil {
		return m.AllowHeaders
	}
	return ""
}

func (m *CorsPolicy) GetExposeHeaders() string {
	if m != nil {
		return m.ExposeHeaders
	}
	return ""
}

func (m *CorsPolicy) GetMaxAge() *time.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() bool {
	if m != nil {
		return m.AllowCredentials
	}
	return false
}

func init() {
	proto.RegisterType((*RouteExtensions)(nil), "gloo.api.core.v1.RouteExtensions")
	proto.RegisterType((*HeaderValue)(nil), "gloo.api.core.v1.HeaderValue")
	proto.RegisterType((*CorsPolicy)(nil), "gloo.api.core.v1.CorsPolicy")
}
func (this *RouteExtensions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteExtensions)
	if !ok {
		that2, ok := that.(RouteExtensions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AddRequestHeaders) != len(that1.AddRequestHeaders) {
		return false
	}
	for i := range this.AddRequestHeaders {
		if !this.AddRequestHeaders[i].Equal(that1.AddRequestHeaders[i]) {
			return false
		}
	}
	if len(this.AddResponseHeaders) != len(that1.AddResponseHeaders) {
		return false
	}
	for i := range this.AddResponseHeaders {
		if !this.AddResponseHeaders[i].Equal(that1.AddResponseHeaders[i]) {
			return false
		}
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	return true
}
func (this *HeaderValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderValue)
	if !ok {
		that2, ok := that.(HeaderValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Append != that1.Append {
		return false
	}
	return true
}
func (this *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigin) != len(that1.AllowOrigin) {
		return false
	}
	for i := range this.AllowOrigin {
		if this.AllowOrigin[i] != that1.AllowOrigin[i] {
			return false
		}
	}
	if this.AllowMethods != that1.AllowMethods {
		return false
	}
	if this.AllowHeaders != that1.AllowHeaders {
		return false
	}
	if this.ExposeHeaders != that1.ExposeHeaders {
		return false
	}
	if this.MaxAge != nil && that1.MaxAge != nil {
		if *this.MaxAge != *that1.MaxAge {
			return false
		}
	} else if this.MaxAge != nil {
		return false
	} else if that1.MaxAge != nil {
		return false
	}
	if this.AllowCredentials != that1.AllowCredentials {
		return false
	}
	return true
}

func init() { proto.RegisterFile("route_extensions.proto", fileDescriptorRouteExtensions) }

var fileDescriptorRouteExtensions = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xd1, 0x6e, 0xd3, 0x3e,
	0x14, 0xc6, 0x95, 0xa5, 0x6b, 0x57, 0xe7, 0xdf, 0x3f, 0x9d, 0x29, 0x23, 0x4c, 0xb0, 0x85, 0x22,
	0xa4, 0x48, 0x88, 0x04, 0x86, 0x40, 0x70, 0xc9, 0x06, 0x12, 0x37, 0xd5, 0x90, 0x2f, 0xb8, 0xe0,
	0x26, 0x72, 0x9b, 0x83, 0x6b, 0x2d, 0xc9, 0x09, 0xb6, 0xd3, 0x75, 0x4f, 0xc0, 0x2b, 0x20, 0x9e,
	0x80, 0xb7, 0x42, 0xe2, 0x49, 0x50, 0xec, 0x76, 0x9d, 0xb6, 0x9b, 0xdd, 0xd9, 0xbf, 0xf3, 0x9d,
	0xef, 0x38, 0xe7, 0x53, 0xc8, 0x9e, 0xc2, 0xc6, 0x40, 0x06, 0x4b, 0x03, 0x95, 0x96, 0x58, 0xe9,
	0xa4, 0x56, 0x68, 0x90, 0x0e, 0x45, 0x81, 0x98, 0xf0, 0x5a, 0x26, 0x33, 0x54, 0x90, 0x2c, 0x5e,
	0xee, 0x1f, 0x08, 0x44, 0x51, 0x40, 0x6a, 0xeb, 0xd3, 0xe6, 0x5b, 0x9a, 0x37, 0x8a, 0x1b, 0x89,
	0x95, 0xeb, 0xd8, 0x1f, 0x09, 0x14, 0x68, 0x8f, 0x69, 0x7b, 0x72, 0x74, 0xfc, 0xcb, 0x27, 0x77,
	0x58, 0x3b, 0xe2, 0xe3, 0xe5, 0x04, 0x3a, 0x21, 0x77, 0x79, 0x9e, 0x67, 0x0a, 0xbe, 0x37, 0xa0,
	0x4d, 0x36, 0x07, 0x9e, 0x83, 0xd2, 0xa1, 0x17, 0xf9, 0x71, 0x70, 0xf4, 0x28, 0xb9, 0x3e, 0x39,
	0xf9, 0x64, 0x05, 0x5f, 0x78, 0xd1, 0x00, 0xdb, 0xe5, 0x79, 0xce, 0x5c, 0xa3, 0xc3, 0x9a, 0x9e,
	0x92, 0x91, 0xb3, 0xd3, 0x35, 0x56, 0x1a, 0x2e, 0xfd, 0xb6, 0x6e, 0xe3, 0x47, 0xad, 0x9f, 0xeb,
	0x5c, 0x1b, 0xbe, 0x21, 0xf7, 0x15, 0x94, 0xb8, 0x80, 0x9b, 0x9e, 0x7e, 0xe4, 0xc7, 0x7d, 0x76,
	0xcf, 0x95, 0xaf, 0xf7, 0x1d, 0x92, 0xa0, 0xe4, 0xcb, 0x4c, 0x81, 0x51, 0x12, 0x74, 0xd8, 0x89,
	0xbc, 0x78, 0xc0, 0x48, 0xc9, 0x97, 0xcc, 0x11, 0xfa, 0x8e, 0xf4, 0x8c, 0x2c, 0x01, 0x1b, 0x13,
	0x6e, 0x47, 0x5e, 0x1c, 0x1c, 0x3d, 0x48, 0xdc, 0x52, 0x93, 0xf5, 0x52, 0x93, 0x0f, 0xab, 0xa5,
	0x1e, 0x77, 0x7e, 0xfe, 0x39, 0xf4, 0xd8, 0x5a, 0x4f, 0x1f, 0x93, 0xff, 0xe6, 0xa8, 0x4d, 0xa6,
	0xe0, 0x5c, 0x49, 0x03, 0x61, 0x37, 0xf2, 0xe2, 0x3e, 0x0b, 0x5a, 0xc6, 0x1c, 0xa2, 0x2f, 0x48,
	0x67, 0x86, 0x4a, 0x87, 0x3d, 0x6b, 0xfd, 0xf0, 0xe6, 0x77, 0x9f, 0xa0, 0xd2, 0x9f, 0xb1, 0x90,
	0xb3, 0x0b, 0x66, 0x95, 0xe3, 0x09, 0x09, 0xae, 0xec, 0x82, 0x0e, 0x89, 0x7f, 0x06, 0x17, 0xa1,
	0x67, 0xad, 0xdb, 0x23, 0x1d, 0x91, 0xed, 0x45, 0x5b, 0x0a, 0xb7, 0x2c, 0x73, 0x17, 0xba, 0x47,
	0xba, 0xbc, 0xae, 0xa1, 0xca, 0x43, 0x3f, 0xf2, 0xe2, 0x1d, 0xb6, 0xba, 0x8d, 0x7f, 0x6c, 0x11,
	0xb2, 0x99, 0xd1, 0x3e, 0x99, 0x17, 0x05, 0x9e, 0x67, 0xa8, 0xa4, 0x90, 0x95, 0xcd, 0xb7, 0xcf,
	0x02, 0xcb, 0x4e, 0x2d, 0xa2, 0x4f, 0xc8, 0xc0, 0x49, 0x4a, 0x30, 0x73, 0xcc, 0xf5, 0x6a, 0x8e,
	0xeb, 0x9b, 0x38, 0xb6, 0x11, 0x6d, 0x42, 0xd8, 0x88, 0xd6, 0xbb, 0x7f, 0x4a, 0xfe, 0x87, 0x65,
	0x8d, 0x57, 0xa2, 0xea, 0x58, 0xd5, 0xc0, 0xd1, 0xb5, 0xec, 0x2d, 0xe9, 0xb5, 0x11, 0x71, 0x01,
	0xb7, 0x4d, 0xa0, 0x5b, 0xf2, 0xe5, 0x7b, 0x01, 0xf4, 0x19, 0xd9, 0x75, 0xaf, 0x98, 0x29, 0xc8,
	0xa1, 0x32, 0x92, 0x17, 0xda, 0xa6, 0xb0, 0xc3, 0x86, 0xb6, 0x70, 0xb2, 0xe1, 0xc7, 0xaf, 0x7f,
	0xff, 0x3d, 0xf0, 0xbe, 0xa6, 0x42, 0x9a, 0x79, 0x33, 0x4d, 0x66, 0x58, 0xa6, 0x1a, 0x0b, 0x7c,
	0x2e, 0x31, 0x6d, 0x43, 0x49, 0xeb, 0x33, 0x91, 0xb6, 0xa1, 0xd4, 0x45, 0x23, 0x64, 0xa5, 0xd3,
	0xf6, 0x1f, 0x94, 0x95, 0x98, 0x76, 0xed, 0x23, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd8,
	0x23, 0x51, 0xd4, 0x95, 0x03, 0x00, 0x00,
}

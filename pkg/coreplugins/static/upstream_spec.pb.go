// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: upstream_spec.proto

/*
Package static is a generated protocol buffer package.

It is generated from these files:
	upstream_spec.proto

It has these top-level messages:
	UpstreamSpec
	Host
*/
package static

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Configuration for Static Upstreams
type UpstreamSpec struct {
	// A list of addresses and ports
	// at least one must be specified
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// Enable ipv6 addresses to be used for routing
	EnableIpv6 bool `protobuf:"varint,2,opt,name=enable_ipv6,json=enableIpv6,proto3" json:"enable_ipv6,omitempty"`
	// Attempt to use outbound TLS
	Tls *google_protobuf.BoolValue `protobuf:"bytes,3,opt,name=tls" json:"tls,omitempty"`
}

func (m *UpstreamSpec) Reset()                    { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()               {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorUpstreamSpec, []int{0} }

func (m *UpstreamSpec) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *UpstreamSpec) GetEnableIpv6() bool {
	if m != nil {
		return m.EnableIpv6
	}
	return false
}

func (m *UpstreamSpec) GetTls() *google_protobuf.BoolValue {
	if m != nil {
		return m.Tls
	}
	return nil
}

// Represents a single instance of an upstream
type Host struct {
	// Address (hostname or IP)
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Port the instance is listening on
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptorUpstreamSpec, []int{1} }

func (m *Host) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Host) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.api.core.v1.UpstreamSpec")
	proto.RegisterType((*Host)(nil), "gloo.api.core.v1.Host")
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hosts) != len(that1.Hosts) {
		return false
	}
	for i := range this.Hosts {
		if !this.Hosts[i].Equal(that1.Hosts[i]) {
			return false
		}
	}
	if this.EnableIpv6 != that1.EnableIpv6 {
		return false
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	return true
}
func (this *Host) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Host)
	if !ok {
		that2, ok := that.(Host)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}

func init() { proto.RegisterFile("upstream_spec.proto", fileDescriptorUpstreamSpec) }

var fileDescriptorUpstreamSpec = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0x31, 0x4e, 0x03, 0x31,
	0x10, 0x45, 0x65, 0x12, 0x10, 0x38, 0x20, 0x21, 0x83, 0xd0, 0x2a, 0x45, 0x58, 0xa5, 0xda, 0x22,
	0x8c, 0x45, 0x40, 0x39, 0x40, 0x2a, 0x68, 0x17, 0x41, 0x41, 0x13, 0x79, 0x37, 0xc6, 0xb1, 0x70,
	0x32, 0x23, 0xdb, 0x1b, 0x0e, 0xc1, 0x45, 0x38, 0x17, 0x27, 0x41, 0xf6, 0x42, 0x43, 0xf7, 0xf4,
	0x3d, 0xfe, 0xff, 0xf1, 0x8b, 0x8e, 0x42, 0xf4, 0x5a, 0x6d, 0x57, 0x81, 0x74, 0x0b, 0xe4, 0x31,
	0xa2, 0x38, 0x37, 0x0e, 0x11, 0x14, 0x59, 0x68, 0xd1, 0x6b, 0xd8, 0xdf, 0x8e, 0x27, 0x06, 0xd1,
	0x38, 0x2d, 0xf3, 0x7b, 0xd3, 0xbd, 0xc9, 0x0f, 0xaf, 0x88, 0xb4, 0x0f, 0xfd, 0x8f, 0xf1, 0xa5,
	0x41, 0x83, 0x19, 0x65, 0xa2, 0x3e, 0x9d, 0x7e, 0x32, 0x7e, 0xfa, 0xfc, 0xdb, 0xff, 0x44, 0xba,
	0x15, 0x33, 0x7e, 0xb8, 0xc1, 0x10, 0x43, 0xc1, 0xca, 0x41, 0x35, 0x9a, 0x5f, 0xc1, 0xff, 0x21,
	0x78, 0xc0, 0x10, 0xeb, 0xfe, 0x48, 0x5c, 0xf3, 0x91, 0xde, 0xa9, 0xc6, 0xe9, 0x95, 0xa5, 0xfd,
	0xa2, 0x38, 0x28, 0x59, 0x75, 0x5c, 0xf3, 0x3e, 0x7a, 0xa4, 0xfd, 0x42, 0xcc, 0xf8, 0x20, 0xba,
	0x50, 0x0c, 0x4a, 0x56, 0x8d, 0xe6, 0x63, 0xe8, 0x1d, 0xe1, 0xcf, 0x11, 0x96, 0x88, 0xee, 0x45,
	0xb9, 0x4e, 0xd7, 0xe9, 0x6c, 0x0a, 0x7c, 0x98, 0xda, 0x85, 0xe0, 0x43, 0xb5, 0x5e, 0xfb, 0x82,
	0x95, 0xac, 0x3a, 0xa9, 0x33, 0xa7, 0x8c, 0xd0, 0xc7, 0xbc, 0x71, 0x56, 0x67, 0x5e, 0xde, 0x7f,
	0x7d, 0x4f, 0xd8, 0x2b, 0x18, 0x1b, 0x37, 0x5d, 0x03, 0x2d, 0x6e, 0x65, 0x40, 0x87, 0x37, 0x16,
	0x65, 0xb2, 0x96, 0xf4, 0x6e, 0x64, 0xb2, 0x26, 0xd7, 0x19, 0xbb, 0x0b, 0x32, 0x44, 0x15, 0x6d,
	0xdb, 0x1c, 0xe5, 0xf9, 0xbb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x21, 0x72, 0x89, 0x59,
	0x01, 0x00, 0x00,
}

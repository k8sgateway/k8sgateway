// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

/*
Package consul is a generated protocol buffer package.

It is generated from these files:
	spec.proto

It has these top-level messages:
	UpstreamSpec
	Connect
*/
package consul

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Upstream Spec for Consul Upstreams
// Consul Upstreams represent a set of one or more instances of a Service that has been registered with Consul
// Consul Upstreams map to multiple service instances by the name and tags found on each instance
// Consul Upstreams are typically generated automatically by Gloo from the Consul Service Catalog
type UpstreamSpec struct {
	// The name of the Service as it is registered in Consul
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The list of service tags Gloo should search for on a service instance before deciding whether or not to
	// include the instance as part of this upstream
	ServiceTags []string `protobuf:"bytes,2,rep,name=service_tags,json=serviceTags" json:"service_tags,omitempty"`
	// Connect specifies configuration for consul services that are "Connect-enabled". See
	// for more information about Consul Connect
	Connect *Connect `protobuf:"bytes,3,opt,name=connect" json:"connect,omitempty"`
}

func (m *UpstreamSpec) Reset()                    { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()               {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{0} }

func (m *UpstreamSpec) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UpstreamSpec) GetServiceTags() []string {
	if m != nil {
		return m.ServiceTags
	}
	return nil
}

func (m *UpstreamSpec) GetConnect() *Connect {
	if m != nil {
		return m.Connect
	}
	return nil
}

// Connect contains the information necessary to connect to proxies that are running as sidecars for
// Consul Connect (in-mesh) services
type Connect struct {
	// A reference to a Gloo secret containing the client TLS parameters for connecting to this service
	TlsSecretRef string `protobuf:"bytes,1,opt,name=tls_secret_ref,json=tlsSecretRef,proto3" json:"tls_secret_ref,omitempty"`
}

func (m *Connect) Reset()                    { *m = Connect{} }
func (m *Connect) String() string            { return proto.CompactTextString(m) }
func (*Connect) ProtoMessage()               {}
func (*Connect) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{1} }

func (m *Connect) GetTlsSecretRef() string {
	if m != nil {
		return m.TlsSecretRef
	}
	return ""
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.api.consul.v1.UpstreamSpec")
	proto.RegisterType((*Connect)(nil), "gloo.api.consul.v1.Connect")
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if len(this.ServiceTags) != len(that1.ServiceTags) {
		return false
	}
	for i := range this.ServiceTags {
		if this.ServiceTags[i] != that1.ServiceTags[i] {
			return false
		}
	}
	if !this.Connect.Equal(that1.Connect) {
		return false
	}
	return true
}
func (this *Connect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Connect)
	if !ok {
		that2, ok := that.(Connect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TlsSecretRef != that1.TlsSecretRef {
		return false
	}
	return true
}

func init() { proto.RegisterFile("spec.proto", fileDescriptorSpec) }

var fileDescriptorSpec = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x89, 0x05, 0x8b, 0xe9, 0xe0, 0x22, 0xb8, 0x18, 0x14, 0x64, 0x2c, 0x2e, 0x8a, 0x60,
	0xe2, 0x0f, 0xbe, 0x80, 0xee, 0x5d, 0x4c, 0x75, 0xe3, 0x66, 0x48, 0xc3, 0x6d, 0x0c, 0x66, 0x72,
	0x43, 0x6e, 0xa6, 0x2f, 0xe1, 0x8b, 0xf8, 0x5c, 0x3e, 0x89, 0x74, 0x66, 0x84, 0x81, 0xee, 0x2e,
	0xdf, 0xfd, 0xe0, 0x9c, 0xc3, 0x39, 0x45, 0x30, 0x32, 0x26, 0xcc, 0x28, 0x84, 0xf5, 0x88, 0x52,
	0x47, 0x27, 0x0d, 0x06, 0xea, 0xbc, 0xdc, 0xdd, 0x9f, 0x9f, 0x59, 0xb4, 0xd8, 0xbf, 0xd5, 0xfe,
	0x1a, 0xcc, 0xe5, 0x37, 0xe3, 0xc5, 0x7b, 0xa4, 0x9c, 0x40, 0xb7, 0xeb, 0x08, 0x46, 0x5c, 0xf1,
	0x82, 0x20, 0xed, 0x9c, 0x81, 0x26, 0xe8, 0x16, 0x4a, 0x56, 0xb1, 0xd5, 0x49, 0xbd, 0x18, 0xd9,
	0xab, 0x6e, 0x61, 0xaa, 0x64, 0x6d, 0xa9, 0x3c, 0xaa, 0x66, 0x13, 0xe5, 0x4d, 0x5b, 0x12, 0x4f,
	0x7c, 0x6e, 0x30, 0x04, 0x30, 0xb9, 0x9c, 0x55, 0x6c, 0xb5, 0x78, 0xb8, 0x90, 0x87, 0x95, 0xe4,
	0xcb, 0xa0, 0xd4, 0xff, 0xee, 0x52, 0xf1, 0xf9, 0xc8, 0xc4, 0x35, 0x3f, 0xcd, 0x9e, 0x1a, 0x02,
	0x93, 0x20, 0x37, 0x09, 0xb6, 0x63, 0x93, 0x22, 0x7b, 0x5a, 0xf7, 0xb0, 0x86, 0xed, 0xf3, 0xdd,
	0xcf, 0xef, 0x25, 0xfb, 0xb8, 0xb1, 0x2e, 0x7f, 0x76, 0x1b, 0x69, 0xb0, 0x55, 0x84, 0x1e, 0x6f,
	0x1d, 0xaa, 0x7d, 0x9c, 0x8a, 0x5f, 0x56, 0x45, 0xdf, 0x59, 0x17, 0x48, 0x0d, 0xb1, 0x9b, 0xe3,
	0x7e, 0xf7, 0xe3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x08, 0x41, 0xbe, 0x2f, 0x01, 0x00,
	0x00,
}

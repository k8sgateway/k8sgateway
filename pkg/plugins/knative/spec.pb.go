// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

/*
Package knative is a generated protocol buffer package.

It is generated from these files:
	spec.proto

It has these top-level messages:
	UpstreamSpec
*/
package knative

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Upstream Spec for Kubernetes Upstreams
// Kubernetes Upstreams represent a set of one or more addressable pods for a Kubernetes Service
// the Gloo Kubernetes Upstream maps to a single service port. Because Kubernetes Services support mulitple ports,
// Gloo requires that a different upstream be created for each port
// Kubernetes Upstreams are typically generated automatically by Gloo from the Kubernetes API
type UpstreamSpec struct {
	// The name of the Kubernetes Service
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The namespace where the Service lives
	ServiceNamespace string `protobuf:"bytes,2,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	// The domain name for the knative service.
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *UpstreamSpec) Reset()                    { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()               {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{0} }

func (m *UpstreamSpec) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UpstreamSpec) GetServiceNamespace() string {
	if m != nil {
		return m.ServiceNamespace
	}
	return ""
}

func (m *UpstreamSpec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.api.kubernetes.v1.UpstreamSpec")
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.ServiceNamespace != that1.ServiceNamespace {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}

func init() { proto.RegisterFile("spec.proto", fileDescriptorSpec) }

var fileDescriptorSpec = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0x41, 0x4a, 0xc6, 0x30,
	0x10, 0x05, 0x60, 0xaa, 0x20, 0x1a, 0xbb, 0xd0, 0x20, 0x52, 0xba, 0x10, 0x75, 0x25, 0x14, 0x13,
	0x8a, 0x37, 0xf0, 0x00, 0x2e, 0x14, 0x37, 0x6e, 0x24, 0x0d, 0x43, 0x1a, 0xda, 0x64, 0x86, 0x4c,
	0xda, 0x85, 0x27, 0xf2, 0x5c, 0x9e, 0x44, 0x1a, 0xe5, 0xa7, 0xbb, 0x99, 0xc7, 0xc7, 0x30, 0x4f,
	0x08, 0x26, 0xb0, 0x8a, 0x12, 0x66, 0x94, 0xd7, 0x6e, 0x46, 0x54, 0x86, 0xbc, 0x9a, 0x96, 0x01,
	0x52, 0x84, 0x0c, 0xac, 0xd6, 0xbe, 0xbd, 0x72, 0xe8, 0xb0, 0x10, 0xbd, 0x4d, 0x7f, 0xfa, 0xfe,
	0x4b, 0xd4, 0xef, 0xc4, 0x39, 0x81, 0x09, 0x6f, 0x04, 0x56, 0xde, 0x89, 0x9a, 0x21, 0xad, 0xde,
	0xc2, 0x67, 0x34, 0x01, 0x9a, 0xea, 0xb6, 0x7a, 0x38, 0x7b, 0x3d, 0xff, 0xcf, 0x5e, 0x4c, 0x00,
	0xd9, 0x89, 0xcb, 0x3d, 0x61, 0x32, 0x16, 0x9a, 0xa3, 0xe2, 0x2e, 0x76, 0xae, 0xe4, 0xb2, 0x15,
	0xa7, 0x23, 0x72, 0x2e, 0xb7, 0x8e, 0x8b, 0x39, 0xec, 0xcf, 0xfd, 0xf7, 0xcf, 0x4d, 0xf5, 0xd1,
	0x39, 0x9f, 0xc7, 0x65, 0x50, 0x16, 0x83, 0x66, 0x9c, 0xf1, 0xd1, 0xa3, 0xde, 0x2a, 0x68, 0x9a,
	0x9c, 0xa6, 0x79, 0x71, 0x3e, 0xb2, 0x9e, 0xa2, 0xc9, 0x7e, 0x85, 0xe1, 0xa4, 0x7c, 0xfd, 0xf4,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x35, 0xd9, 0xe8, 0x91, 0xf1, 0x00, 0x00, 0x00,
}

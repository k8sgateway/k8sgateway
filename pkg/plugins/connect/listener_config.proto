syntax = "proto3";
package gloo.api.connect.v1;

option go_package = "github.com/solo-io/gloo/pkg/plugins/connect";

import "validate/validate.proto";
import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

// Plugin Name = "connect.gloo.solo.io"

// the listenerConfig must be either an InboundListener or an OutboundListener
message ListenerConfig {
    oneof config {
        InboundListenerConfig inbound = 1;
        OutboundListenerConfig outbound = 2;
    }
}

// configuration for the inbound listener
// this listener does authentication and connects
// clients to the local service
message InboundListenerConfig {
    // configuration for tls-based auth filter
    AuthConfig auth_config = 1;

    // the address of the local upstream being proxied
    // the service being proxied must be reachable by Envoy
    string local_service_address = 2;

    // the name of the local consul service being proxied
    string local_service_name = 3;
}

// AuthConfig contains information necessary to
// communicate with the Authentication Server (Consul Agent)
message AuthConfig {
    // The name of the service who owns this proxy
    // Target must be delivered by the filter as part of the authorize request payload
    string target = 1 [(validate.rules).string.min_bytes = 1];

    // the hostname of the authorization REST service
    string authorize_hostname = 2 [(validate.rules).string.min_bytes = 1];
    // the port of the authorization REST service
    uint32 authorize_port = 3 [(validate.rules).string.min_bytes = 1];
    // the request path for the authorization REST service
    // NOTE: currently ignored by the plugin and filter
    string authorize_path = 4 [(validate.rules).string.min_bytes = 1];
    // Connection Timeout tells the filter to set a timeout for unresponsive connections created to this upstream.
    // If not provided by the user, it will set to a default value
    google.protobuf.Duration request_timeout = 5 [(gogoproto.stdduration) = true];
}

// The configuration for the outbound listeners which serve as "tcp routes"
message OutboundListenerConfig {
    // The name of the consul service which is the destination for the listener
    string destination_consul_service = 1;
    // TODO (ilackarms): support destination type in Consul Connect API
    string destination_consul_type = 2;
}

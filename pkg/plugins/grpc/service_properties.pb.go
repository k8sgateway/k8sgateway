// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service_properties.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	service_properties.proto

It has these top-level messages:
	ServiceProperties
*/
package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Service Properties for gRPC Services
// Service Properties must be set to enable JSON-to-gRPC Transcoding for gRPC Services
// via Gloo.
type ServiceProperties struct {
	// the names of the gRPC services defined in the descriptors. The methods on
	// services specified here can be called using JSON/REST via Gloo's function-level routing
	GrpcServiceNames []string `protobuf:"bytes,1,rep,name=grpc_service_names,json=grpcServiceNames" json:"grpc_service_names,omitempty"`
	// The [Gloo File Ref](https://gloo.solo.io/introduction/concepts/#Files) to a File
	// containing the proto descriptors generated for the gRPC service
	// This file will be generated automatically by Gloo Function Discovery if it is enabled
	// and the gRPC service supports Reflection
	DescriptorsFileRef string `protobuf:"bytes,2,opt,name=descriptors_file_ref,json=descriptorsFileRef,proto3" json:"descriptors_file_ref,omitempty"`
}

func (m *ServiceProperties) Reset()         { *m = ServiceProperties{} }
func (m *ServiceProperties) String() string { return proto.CompactTextString(m) }
func (*ServiceProperties) ProtoMessage()    {}
func (*ServiceProperties) Descriptor() ([]byte, []int) {
	return fileDescriptorServiceProperties, []int{0}
}

func (m *ServiceProperties) GetGrpcServiceNames() []string {
	if m != nil {
		return m.GrpcServiceNames
	}
	return nil
}

func (m *ServiceProperties) GetDescriptorsFileRef() string {
	if m != nil {
		return m.DescriptorsFileRef
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceProperties)(nil), "gloo.api.grpc.v1.ServiceProperties")
}
func (this *ServiceProperties) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceProperties)
	if !ok {
		that2, ok := that.(ServiceProperties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GrpcServiceNames) != len(that1.GrpcServiceNames) {
		return false
	}
	for i := range this.GrpcServiceNames {
		if this.GrpcServiceNames[i] != that1.GrpcServiceNames[i] {
			return false
		}
	}
	if this.DescriptorsFileRef != that1.DescriptorsFileRef {
		return false
	}
	return true
}

func init() { proto.RegisterFile("service_properties.proto", fileDescriptorServiceProperties) }

var fileDescriptorServiceProperties = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xb1, 0x4e, 0xc4, 0x30,
	0x0c, 0x86, 0x55, 0x90, 0x90, 0x2e, 0xd3, 0x11, 0xdd, 0x50, 0x31, 0xa0, 0x13, 0x53, 0x07, 0x48,
	0x40, 0xbc, 0x01, 0x03, 0x23, 0x42, 0x65, 0x63, 0x89, 0xee, 0x82, 0x1b, 0x2c, 0x72, 0x67, 0xcb,
	0x4e, 0xfb, 0x4c, 0x3c, 0x17, 0x4f, 0x82, 0xd2, 0x02, 0x62, 0xb3, 0xfc, 0xf9, 0xff, 0xfc, 0x9b,
	0x56, 0x41, 0x26, 0x8c, 0x10, 0x58, 0x88, 0x41, 0x0a, 0x82, 0x3a, 0x16, 0x2a, 0x64, 0xd7, 0x29,
	0x13, 0xb9, 0x1d, 0xa3, 0x4b, 0xc2, 0xd1, 0x4d, 0x77, 0x17, 0x9b, 0x44, 0x89, 0x66, 0xe8, 0xeb,
	0xb4, 0xdc, 0x5d, 0xa9, 0x39, 0x7f, 0x59, 0x1c, 0xcf, 0x7f, 0x0a, 0x7b, 0x6d, 0x6c, 0x4d, 0x85,
	0x5f, 0xfb, 0x71, 0x77, 0x00, 0x6d, 0x9b, 0xed, 0x69, 0xb7, 0xea, 0xd7, 0x95, 0xfc, 0x44, 0x9e,
	0xea, 0xde, 0xde, 0x9a, 0xcd, 0x1b, 0x68, 0x14, 0xe4, 0x42, 0xa2, 0x61, 0xc0, 0x0c, 0x41, 0x60,
	0x68, 0x4f, 0xb6, 0x4d, 0xb7, 0xea, 0xed, 0x3f, 0xf6, 0x88, 0x19, 0x7a, 0x18, 0x1e, 0xdc, 0xe7,
	0xd7, 0x65, 0xf3, 0xda, 0x25, 0x2c, 0xef, 0xe3, 0xde, 0x45, 0x3a, 0x78, 0xa5, 0x4c, 0x37, 0x48,
	0xbe, 0xb6, 0xf6, 0xfc, 0x91, 0x3c, 0xe7, 0x31, 0xe1, 0x51, 0x7d, 0xfd, 0xb6, 0x3f, 0x9b, 0xbb,
	0xde, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x20, 0x4f, 0x66, 0x9b, 0xef, 0x00, 0x00, 0x00,
}

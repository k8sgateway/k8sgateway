// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: report.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ObjectReference_ObjectType int32

const (
	ObjectReference_Upstream       ObjectReference_ObjectType = 0
	ObjectReference_VirtualService ObjectReference_ObjectType = 1
)

var ObjectReference_ObjectType_name = map[int32]string{
	0: "Upstream",
	1: "VirtualService",
}
var ObjectReference_ObjectType_value = map[string]int32{
	"Upstream":       0,
	"VirtualService": 1,
}

func (x ObjectReference_ObjectType) String() string {
	return proto.EnumName(ObjectReference_ObjectType_name, int32(x))
}
func (ObjectReference_ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorReport, []int{1, 0}
}

type Status_State int32

const (
	// Pending status indicates the resource has not yet been validated
	Status_Pending Status_State = 0
	// Accepted indicates the resource has been validated
	Status_Accepted Status_State = 1
	// Rejected indicates an invalid configuration by the user
	// Rejected resources may be propagated to the xDS server depending on their severity
	Status_Rejected Status_State = 2
)

var Status_State_name = map[int32]string{
	0: "Pending",
	1: "Accepted",
	2: "Rejected",
}
var Status_State_value = map[string]int32{
	"Pending":  0,
	"Accepted": 1,
	"Rejected": 2,
}

func (x Status_State) String() string {
	return proto.EnumName(Status_State_name, int32(x))
}
func (Status_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorReport, []int{2, 0} }

// *
// A Report contains config validation information for users.
// Gloo generates reports for every top-level config object (VirtualServices and Upstreams)
// indicating whether the resource was accepted by Gloo or rejected (due to an invalid configuration).
type Report struct {
	// a unique name for the report
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// reference to the object this report pertains to
	ObjectReference *ObjectReference `protobuf:"bytes,2,opt,name=object_reference,json=objectReference" json:"object_reference,omitempty"`
	// Status describes the status of the object
	Status *Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	// Metadata is used primarily for resource versioning the report
	Metadata *Metadata `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptorReport, []int{0} }

func (m *Report) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Report) GetObjectReference() *ObjectReference {
	if m != nil {
		return m.ObjectReference
	}
	return nil
}

func (m *Report) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Report) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ObjectReference struct {
	// type of the object
	// can be Upstream or VirtualService
	ObjectType ObjectReference_ObjectType `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=v1.ObjectReference_ObjectType" json:"object_type,omitempty"`
	// name of the object
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// optional namespace of the object
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ObjectReference) Reset()                    { *m = ObjectReference{} }
func (m *ObjectReference) String() string            { return proto.CompactTextString(m) }
func (*ObjectReference) ProtoMessage()               {}
func (*ObjectReference) Descriptor() ([]byte, []int) { return fileDescriptorReport, []int{1} }

func (m *ObjectReference) GetObjectType() ObjectReference_ObjectType {
	if m != nil {
		return m.ObjectType
	}
	return ObjectReference_Upstream
}

func (m *ObjectReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectReference) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// *
// Status indicates whether a config resource has been (in)validated by gloo
type Status struct {
	// State is the enum indicating the state of the resource
	State Status_State `protobuf:"varint,1,opt,name=state,proto3,enum=v1.Status_State" json:"state,omitempty"`
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorReport, []int{2} }

func (m *Status) GetState() Status_State {
	if m != nil {
		return m.State
	}
	return Status_Pending
}

func (m *Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*Report)(nil), "v1.Report")
	proto.RegisterType((*ObjectReference)(nil), "v1.ObjectReference")
	proto.RegisterType((*Status)(nil), "v1.Status")
	proto.RegisterEnum("v1.ObjectReference_ObjectType", ObjectReference_ObjectType_name, ObjectReference_ObjectType_value)
	proto.RegisterEnum("v1.Status_State", Status_State_name, Status_State_value)
}
func (this *Report) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Report)
	if !ok {
		that2, ok := that.(Report)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ObjectReference.Equal(that1.ObjectReference) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *ObjectReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectReference)
	if !ok {
		that2, ok := that.(ObjectReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectType != that1.ObjectType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}

func init() { proto.RegisterFile("report.proto", fileDescriptorReport) }

var fileDescriptorReport = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xc7, 0xd9, 0x3e, 0xe8, 0x83, 0x81, 0xc0, 0x66, 0xde, 0x8b, 0x69, 0x88, 0x21, 0xa4, 0x07,
	0xc3, 0xa9, 0x0a, 0xde, 0x35, 0x7a, 0x37, 0x9a, 0x45, 0xbd, 0x9a, 0xa5, 0x1d, 0x09, 0x46, 0xba,
	0x9b, 0xed, 0x42, 0x82, 0x9f, 0xc8, 0x78, 0xf6, 0x13, 0xf9, 0x49, 0xcc, 0x6e, 0x0b, 0xa8, 0xf1,
	0x34, 0xf3, 0x9f, 0xff, 0x4c, 0xfb, 0xfb, 0xb7, 0xd0, 0x31, 0xa4, 0x95, 0xb1, 0x89, 0x36, 0xca,
	0x2a, 0x0c, 0xd6, 0xe3, 0xfe, 0xff, 0xb9, 0x9a, 0x2b, 0x2f, 0x8f, 0x5d, 0x57, 0x3a, 0xfd, 0xee,
	0x92, 0xac, 0xcc, 0xa4, 0x95, 0xa5, 0x8e, 0xdf, 0x18, 0x84, 0xc2, 0x9f, 0x22, 0x42, 0x3d, 0x97,
	0x4b, 0x8a, 0xd8, 0x90, 0x8d, 0x5a, 0xc2, 0xf7, 0x78, 0x06, 0x5c, 0xcd, 0x9e, 0x28, 0xb5, 0x0f,
	0x86, 0x1e, 0xc9, 0x50, 0x9e, 0x52, 0x14, 0x0c, 0xd9, 0xa8, 0x3d, 0xf9, 0x97, 0xac, 0xc7, 0xc9,
	0xb5, 0xf7, 0xc4, 0xd6, 0x12, 0x3d, 0xf5, 0x7d, 0x80, 0x31, 0x84, 0x85, 0x95, 0x76, 0x55, 0x44,
	0x7f, 0xfc, 0x15, 0xb8, 0xab, 0xa9, 0x9f, 0x88, 0xca, 0xc1, 0x11, 0x34, 0xb7, 0x50, 0x51, 0xdd,
	0x6f, 0x75, 0xdc, 0xd6, 0x55, 0x35, 0x13, 0x3b, 0x37, 0x7e, 0x67, 0xd0, 0xfb, 0xf1, 0x4a, 0x3c,
	0x87, 0x76, 0x45, 0x68, 0x37, 0xba, 0x84, 0xef, 0x4e, 0x06, 0xbf, 0xc0, 0x55, 0xfa, 0x76, 0xa3,
	0x49, 0x80, 0xda, 0xf5, 0xbb, 0xd8, 0xc1, 0x97, 0xd8, 0x87, 0xd0, 0x72, 0xb5, 0xd0, 0x32, 0x25,
	0x4f, 0xde, 0x12, 0xfb, 0x41, 0x9c, 0x00, 0xec, 0x9f, 0x85, 0x1d, 0x68, 0xde, 0xe9, 0xc2, 0x1a,
	0x92, 0x4b, 0x5e, 0x43, 0x84, 0xee, 0xfd, 0xc2, 0xd8, 0x95, 0x7c, 0x9e, 0x92, 0x59, 0x2f, 0x52,
	0xe2, 0x2c, 0x7e, 0x81, 0xb0, 0x8c, 0x8c, 0x47, 0xd0, 0x70, 0xa1, 0xb7, 0x98, 0x7c, 0xff, 0x35,
	0x7c, 0x21, 0x51, 0xda, 0x78, 0x00, 0xa1, 0x21, 0x59, 0xa8, 0xbc, 0xa2, 0xaa, 0x54, 0x7c, 0x02,
	0x0d, 0xbf, 0x87, 0x6d, 0xf8, 0x7b, 0x43, 0x79, 0xb6, 0xc8, 0xe7, 0xbc, 0xe6, 0x08, 0x2e, 0xd2,
	0x94, 0xb4, 0xa5, 0x8c, 0x33, 0xa7, 0x04, 0x39, 0x3a, 0xca, 0x78, 0x70, 0x59, 0x7f, 0xfd, 0x18,
	0xb0, 0x59, 0xe8, 0x7f, 0xf6, 0xe9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x27, 0x47, 0x72,
	0x26, 0x02, 0x00, 0x00,
}

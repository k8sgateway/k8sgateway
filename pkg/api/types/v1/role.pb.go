// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: role.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/golang/protobuf/ptypes/duration"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// A Role is a container for a set of Virtual Services that will be used to generate a single proxy config
// to be applied to one or more Envoy nodes. The Role is best understood as an in-mesh application's localized view
// of the rest of the mesh.
// Each domain for each Virtual Service contained in a Role cannot appear more than once, or the Role
// will be invalid.
// In the current implementation, Roles are read-only objects created by Gloo for the puprose of reporting.
// In the future, Gloo will support fields in Roles that can be written to for the purpose of applying policy
// to groups of Virtual Services.
type Role struct {
	// Name of the role. Envoy nodes will be assigned a config matching the role they report to Gloo when registering
	// Envoy instances must specify their role in the prefix for their Node ID when they register to Gloo.
	//
	// Currently this is done in the format <Role>~<this portion is ignored>
	// which can be specified with the `--service-node` flag, or in the Envoy instance's bootstrap config.
	//
	// Role Names must be unique and follow the following syntax rules:
	// One or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// a list of virtual services that reference this role
	VirtualServices []string `protobuf:"bytes,2,rep,name=virtual_services,json=virtualServices" json:"virtual_services,omitempty"`
	// Status indicates the validation status of the role resource.
	// Status is read-only by clients, and set by gloo during validation
	Status *Status `protobuf:"bytes,6,opt,name=status" json:"status,omitempty" testdiff:"ignore"`
	// Metadata contains the resource metadata for the role
	Metadata *Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{0} }

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetVirtualServices() []string {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *Role) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Role) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Role)(nil), "v1.Role")
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if this.VirtualServices[i] != that1.VirtualServices[i] {
			return false
		}
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("role.proto", fileDescriptorRole) }

var fileDescriptorRole = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x95, 0x7e, 0x55, 0x3f, 0x6a, 0x2a, 0xfe, 0x58, 0x20, 0x45, 0x15, 0x2a, 0x51, 0xa6,
	0x30, 0x10, 0x2b, 0x30, 0xc1, 0xd8, 0x9d, 0x25, 0xdd, 0x58, 0x90, 0x93, 0x38, 0xc6, 0xc2, 0xc9,
	0x8d, 0xec, 0xeb, 0x48, 0xbc, 0x11, 0xe2, 0xa1, 0x18, 0x78, 0x04, 0x9e, 0x00, 0xd5, 0x31, 0x0c,
	0x6c, 0xe7, 0xfc, 0xce, 0x3d, 0xba, 0xf7, 0x12, 0x62, 0x40, 0x8b, 0x7c, 0x30, 0x80, 0x40, 0x67,
	0x63, 0xb1, 0xbe, 0x90, 0x00, 0x52, 0x0b, 0xe6, 0x49, 0xe5, 0x5a, 0x66, 0xd1, 0xb8, 0x1a, 0xa7,
	0x89, 0xf5, 0xe6, 0x6f, 0xda, 0x38, 0xc3, 0x51, 0x41, 0x1f, 0xf2, 0x33, 0x09, 0x12, 0xbc, 0x64,
	0x7b, 0x15, 0xe8, 0xca, 0x22, 0x47, 0x67, 0x83, 0x3b, 0xea, 0x04, 0xf2, 0x86, 0x23, 0x9f, 0x7c,
	0xfa, 0x1e, 0x91, 0x79, 0x09, 0x5a, 0x50, 0x4a, 0xe6, 0x3d, 0xef, 0x44, 0x1c, 0x25, 0x51, 0xb6,
	0x2c, 0xbd, 0xa6, 0x57, 0xe4, 0x64, 0x54, 0x06, 0x1d, 0xd7, 0x4f, 0x56, 0x98, 0x51, 0xd5, 0xc2,
	0xc6, 0xb3, 0xe4, 0x5f, 0xb6, 0x2c, 0x8f, 0x03, 0xdf, 0x05, 0x4c, 0xef, 0xc8, 0x62, 0xda, 0x13,
	0x2f, 0x92, 0x28, 0x3b, 0xbc, 0x21, 0xf9, 0x58, 0xe4, 0x3b, 0x4f, 0xb6, 0xe7, 0x5f, 0x1f, 0x97,
	0xa7, 0x28, 0x2c, 0x36, 0xaa, 0x6d, 0xef, 0x53, 0x25, 0x7b, 0x30, 0x22, 0x2d, 0x43, 0x81, 0x66,
	0xe4, 0xe0, 0xe7, 0xa8, 0xf8, 0xbf, 0x2f, 0xaf, 0xf6, 0xe5, 0x87, 0xc0, 0xca, 0xdf, 0x74, 0x9b,
	0xbf, 0x7d, 0x6e, 0xa2, 0xc7, 0x4c, 0x2a, 0x7c, 0x76, 0x55, 0x5e, 0x43, 0xc7, 0x2c, 0x68, 0xb8,
	0x56, 0xc0, 0xa4, 0x06, 0x60, 0xc3, 0x8b, 0x64, 0x7c, 0x50, 0x0c, 0x5f, 0x07, 0x61, 0xd9, 0x58,
	0x54, 0x0b, 0xff, 0xe3, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x38, 0x05, 0xf9, 0x67,
	0x01, 0x00, 0x00,
}

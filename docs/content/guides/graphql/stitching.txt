<!--

Hiding doc until it can be revised for latest version. 

---
title: Schema stitching
weight: 50
description: Use Gloo Edge to stitch together schemas for multiple GraphQL services.
---

{{% notice warning %}}
Stitching is a beta feature. Do not use this feature in a production environment.
{{% /notice %}}

When you use GraphQL in Gloo Edge, you can stitch multiple schemas together to expose one unified GraphQL server to your clients.

Consider a cluster that has two different services, `user` and `product`. These services are either native GraphQL servers, or have been converted to GraphQL via automatic schema discovery. Each service has similar information that you might want to provide as part of a unified data model. 

Typically, clients must stitch together the services in the frontend. With Gloo Edge, you can instead stitch the GraphQL schemas for these services together in the backend, and expose a unified GraphQL server to your clients. This frees your clients to consider only what data that they want to fetch, not how to fetch the data.

Follow along with the user and product service example.

## Reviewing each service's configuration

To understand how stitching occurs, consider the data model and example queries for both services, starting with the user service. 

**User service**: The user service provides a partial type definition for the `User` type, and a query for how to get the full name of a user given the username.

{{< tabs >}}
{{< tab name="User type definition" codelang="yaml" >}}
type User {
  username: String!
  fullName: String
}

type Query {
  getUserWithFullName(username: String!): User
}
{{< /tab >}}
{{< tab name="Query" codelang="yaml">}}
query {
  getUserWithFullName(username: "akeith") {
    fullName
  }
}
{{< /tab >}}
{{< tab name="Response" codelang="json">}}
{
  "getUserWithFullName": "Abigail Keith"
}
{{< /tab >}}
{{< /tabs >}}

**Product service**: The product service also provides a partial type definition for the `User` type, and a query for how to get the product name and the seller's username given the product ID.

{{< tabs >}}
{{< tab name="Product type definition" codelang="yaml" >}}
type User {
  username: String!
}


type Product{
  id: ID!
  name: String!
  seller: User!
}

type Query {
  getProductById(id: ID!): Product!
}
{{< /tab >}}
{{< tab name="Query" codelang="yaml">}}
query {
  getProductById(id: 125) {
    name
    seller {
      username
    }
  }
}
{{< /tab >}}
{{< tab name="Response" codelang="json">}}
{
  "getProductById": {
    "name": "Narnia",
    "seller": {
      "username": "akeith"
    }
  }
}
{{< /tab >}}
{{< /tabs >}}

What if a client wants the full name of the seller for a product, instead of the username? Given the product ID, the client cannot get the seller's full name from the product service. However, the full name of any user _is_ provided by the user service. 

## Stitching together the services

When you have different services with data that you want clients to be able to request, you can stitch the services together. Create a configuration file for each service that specifies how to merge the types between the services. 

**User service**: In the `merge_config` section for a `user-service` configuration file, you can specify which fields are unique to the `User` type, and how to get these fields. If a client provides the username for a user and wants the full name, Gloo Edge can use the `getUserWithFullName` query to provide the full name from the user service.

```yaml
name: user-service
namespace: products-app
merge_config:
  User:
    query_field: getUserWithFullName
    key: username
...
```

**Product service**: Similarly, in the `merge_config` section for a `product-service` configuration file, you can specify which fields are unique to the `User` type, and how to get these fields. If a client provides the product ID and wants the product name, Gloo Edge can use the `getProductByID` query to provide the product ID from the product service.
```yaml
name: product-service
namespace: products-app
mergeConfig:
  Product:
    queryName: getProductById
    key: id
...
```

As a result, Gloo Edge generates a **stitched service**. From this one stitched service, a client can provide the product ID, and recieve the product name, the full name of the seller, and the username of the seller.
```yaml
type User {
  username: String!
  fullName: String
}


type Product{
  id: ID!
  name: String!
  seller: User!
}

type Query {
  getProductById(id: ID!): Product!
}
```

## Querying the stitched service

Based on the stitched service, Gloo Edge generates the following schema definition, which incorporates all the types and queries from each of the respective services. 

Clients can query the stitched service. In the background, Gloo Edge uses this schema to create the requests to the stitched service, and then stitches the responses back together into one response to the client.

{{< tabs >}}
{{< tab name="Schema definition" codelang="yaml" >}}
schemaDefinition: |
  type Query {
    getUserWithFullName(username: String!): User
    getProductById(productId: ID!): Product!
  }

  type User {
    username: String!
    fullName: String
  }

  type Product {
    id: ID!
    name: String!
    seller: User!
  }
{{< /tab >}}
{{< tab name="Query" codelang="yaml">}}
query {
  getProductById(id: 125) {
    name
    seller {
      username
      fullName
    }
  }
}
{{< /tab >}}
{{< tab name="Response" codelang="json">}}
{
  "getProductById": {
    "name": "Narnia",
    "seller": {
      "username": "akeith"
      "fullName": "Abigail Keith"
    }
  }
}
{{< /tab >}}
{{< /tabs >}}

-->
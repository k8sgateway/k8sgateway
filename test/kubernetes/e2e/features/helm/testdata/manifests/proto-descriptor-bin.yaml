gatewayProxies:
  gatewayProxy:
    gatewaySettings:
      customHttpGateway:
        options:
        grpcJsonTranscoder:
          protoDescriptorBin: >-
            
      customHttpsGateway:
        options:
          grpcJsonTranscoder:
            protoDescriptorBin: >-
              

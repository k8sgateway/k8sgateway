syntax = "proto3";
package gateway.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gateway/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";

import "github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto";

/*
@solo-kit:resource.short_name=vs
@solo-kit:resource.plural_name=virtual_services
@solo-kit:resource.resource_groups=api.gateway.solo.io
A virtual service describes the set of routes to match for a set of domains.
Domains must be unique across all virtual services within a gateway (i.e. no overlap between sets).
*/
message VirtualService {
    gloo.solo.io.VirtualHost virtual_host = 1;

    // If provided, the Gateway will serve TLS/SSL traffic for this set of routes
    gloo.solo.io.SslConfig ssl_config = 2;

    // Since virtual services are long-lived the purpose of a virtual service may change over time.
    // Users may like to update the name to better reflect the purpose of the virtual service.
    // Since metadata.name is associated with the resource id, it is not possible to change that
    // value without deleting and recreating a resource.
    // If additional fields such as this are needed, consider implementing a separate "auxillary data" object
    string display_name = 3;

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 7 [(gogoproto.nullable) = false];
}
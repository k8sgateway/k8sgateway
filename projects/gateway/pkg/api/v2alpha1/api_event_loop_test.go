// Code generated by solo-kit. DO NOT EDIT.

// +build solokit

package v2alpha1

import (
	"context"
	"sync"
	"time"

	gateway_solo_io "github.com/solo-io/gloo/projects/gateway/pkg/api/v1"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/memory"
)

var _ = Describe("ApiEventLoop", func() {
	var (
		namespace string
		emitter   ApiEmitter
		err       error
	)

	BeforeEach(func() {

		virtualServiceClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}
		virtualServiceClient, err := gateway_solo_io.NewVirtualServiceClient(virtualServiceClientFactory)
		Expect(err).NotTo(HaveOccurred())

		gatewayClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}
		gatewayClient, err := NewGatewayClient(gatewayClientFactory)
		Expect(err).NotTo(HaveOccurred())

		emitter = NewApiEmitter(virtualServiceClient, gatewayClient)
	})
	It("runs sync function on a new snapshot", func() {
		_, err = emitter.VirtualService().Write(gateway_solo_io.NewVirtualService(namespace, "jerry"), clients.WriteOpts{})
		Expect(err).NotTo(HaveOccurred())
		_, err = emitter.Gateway().Write(NewGateway(namespace, "jerry"), clients.WriteOpts{})
		Expect(err).NotTo(HaveOccurred())
		sync := &mockApiSyncer{}
		el := NewApiEventLoop(emitter, sync)
		_, err := el.Run([]string{namespace}, clients.WatchOpts{})
		Expect(err).NotTo(HaveOccurred())
		Eventually(sync.Synced, 5*time.Second).Should(BeTrue())
	})
})

type mockApiSyncer struct {
	synced bool
	mutex  sync.Mutex
}

func (s *mockApiSyncer) Synced() bool {
	s.mutex.Lock()
	defer s.mutex.Unlock()
	return s.synced
}

func (s *mockApiSyncer) Sync(ctx context.Context, snap *ApiSnapshot) error {
	s.mutex.Lock()
	s.synced = true
	s.mutex.Unlock()
	return nil
}

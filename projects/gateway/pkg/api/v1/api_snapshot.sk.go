// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"go.uber.org/zap"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiSnapshot struct {
	VirtualServices    VirtualServiceList
	RouteTables        RouteTableList
	Gateways           GatewayList
	VirtualHostOptions VirtualHostOptionList
	RouteOptions       RouteOptionList
	HttpGateways       MatchableHttpGatewayList
}

func (s ApiSnapshot) Clone() ApiSnapshot {
	return ApiSnapshot{
		VirtualServices:    s.VirtualServices.Clone(),
		RouteTables:        s.RouteTables.Clone(),
		Gateways:           s.Gateways.Clone(),
		VirtualHostOptions: s.VirtualHostOptions.Clone(),
		RouteOptions:       s.RouteOptions.Clone(),
		HttpGateways:       s.HttpGateways.Clone(),
	}
}

func (s ApiSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashVirtualServices(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashRouteTables(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashGateways(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashVirtualHostOptions(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashRouteOptions(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashHttpGateways(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s ApiSnapshot) hashVirtualServices(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.VirtualServices.AsInterfaces()...)
}

func (s ApiSnapshot) hashRouteTables(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.RouteTables.AsInterfaces()...)
}

func (s ApiSnapshot) hashGateways(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Gateways.AsInterfaces()...)
}

func (s ApiSnapshot) hashVirtualHostOptions(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.VirtualHostOptions.AsInterfaces()...)
}

func (s ApiSnapshot) hashRouteOptions(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.RouteOptions.AsInterfaces()...)
}

func (s ApiSnapshot) hashHttpGateways(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.HttpGateways.AsInterfaces()...)
}

func (s ApiSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	VirtualServicesHash, err := s.hashVirtualServices(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("virtualServices", VirtualServicesHash))
	RouteTablesHash, err := s.hashRouteTables(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("routeTables", RouteTablesHash))
	GatewaysHash, err := s.hashGateways(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("gateways", GatewaysHash))
	VirtualHostOptionsHash, err := s.hashVirtualHostOptions(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("virtualHostOptions", VirtualHostOptionsHash))
	RouteOptionsHash, err := s.hashRouteOptions(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("routeOptions", RouteOptionsHash))
	HttpGatewaysHash, err := s.hashHttpGateways(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("httpGateways", HttpGatewaysHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

func (s *ApiSnapshot) GetResourcesList(resource resources.Resource) (resources.ResourceList, error) {
	switch resource.(type) {
	case *VirtualService:
		return s.VirtualServices.AsResources(), nil
	case *RouteTable:
		return s.RouteTables.AsResources(), nil
	case *Gateway:
		return s.Gateways.AsResources(), nil
	case *VirtualHostOption:
		return s.VirtualHostOptions.AsResources(), nil
	case *RouteOption:
		return s.RouteOptions.AsResources(), nil
	case *MatchableHttpGateway:
		return s.HttpGateways.AsResources(), nil
	default:
		return resources.ResourceList{}, eris.New("did not contain the input resource type returning empty list")
	}
}

func (s *ApiSnapshot) RemoveFromResourceList(resource resources.Resource) error {
	refKey := resource.GetMetadata().Ref().Key()
	switch resource.(type) {
	case *VirtualService:

		for i, res := range s.VirtualServices {
			if refKey == res.GetMetadata().Ref().Key() {
				s.VirtualServices = append(s.VirtualServices[:i], s.VirtualServices[i+1:]...)
				break
			}
		}
		return nil
	case *RouteTable:

		for i, res := range s.RouteTables {
			if refKey == res.GetMetadata().Ref().Key() {
				s.RouteTables = append(s.RouteTables[:i], s.RouteTables[i+1:]...)
				break
			}
		}
		return nil
	case *Gateway:

		for i, res := range s.Gateways {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Gateways = append(s.Gateways[:i], s.Gateways[i+1:]...)
				break
			}
		}
		return nil
	case *VirtualHostOption:

		for i, res := range s.VirtualHostOptions {
			if refKey == res.GetMetadata().Ref().Key() {
				s.VirtualHostOptions = append(s.VirtualHostOptions[:i], s.VirtualHostOptions[i+1:]...)
				break
			}
		}
		return nil
	case *RouteOption:

		for i, res := range s.RouteOptions {
			if refKey == res.GetMetadata().Ref().Key() {
				s.RouteOptions = append(s.RouteOptions[:i], s.RouteOptions[i+1:]...)
				break
			}
		}
		return nil
	case *MatchableHttpGateway:

		for i, res := range s.HttpGateways {
			if refKey == res.GetMetadata().Ref().Key() {
				s.HttpGateways = append(s.HttpGateways[:i], s.HttpGateways[i+1:]...)
				break
			}
		}
		return nil
	default:
		return eris.Errorf("did not remove the resource because its type does not exist [%T]", resource)
	}
}

func (s *ApiSnapshot) UpsertToResourceList(resource resources.Resource) error {
	refKey := resource.GetMetadata().Ref().Key()
	switch typed := resource.(type) {
	case *VirtualService:
		updated := false
		for i, res := range s.VirtualServices {
			if refKey == res.GetMetadata().Ref().Key() {
				s.VirtualServices[i] = typed
				updated = true
			}
		}
		if !updated {
			s.VirtualServices = append(s.VirtualServices, typed)
		}
		s.VirtualServices.Sort()
		return nil
	case *RouteTable:
		updated := false
		for i, res := range s.RouteTables {
			if refKey == res.GetMetadata().Ref().Key() {
				s.RouteTables[i] = typed
				updated = true
			}
		}
		if !updated {
			s.RouteTables = append(s.RouteTables, typed)
		}
		s.RouteTables.Sort()
		return nil
	case *Gateway:
		updated := false
		for i, res := range s.Gateways {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Gateways[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Gateways = append(s.Gateways, typed)
		}
		s.Gateways.Sort()
		return nil
	case *VirtualHostOption:
		updated := false
		for i, res := range s.VirtualHostOptions {
			if refKey == res.GetMetadata().Ref().Key() {
				s.VirtualHostOptions[i] = typed
				updated = true
			}
		}
		if !updated {
			s.VirtualHostOptions = append(s.VirtualHostOptions, typed)
		}
		s.VirtualHostOptions.Sort()
		return nil
	case *RouteOption:
		updated := false
		for i, res := range s.RouteOptions {
			if refKey == res.GetMetadata().Ref().Key() {
				s.RouteOptions[i] = typed
				updated = true
			}
		}
		if !updated {
			s.RouteOptions = append(s.RouteOptions, typed)
		}
		s.RouteOptions.Sort()
		return nil
	case *MatchableHttpGateway:
		updated := false
		for i, res := range s.HttpGateways {
			if refKey == res.GetMetadata().Ref().Key() {
				s.HttpGateways[i] = typed
				updated = true
			}
		}
		if !updated {
			s.HttpGateways = append(s.HttpGateways, typed)
		}
		s.HttpGateways.Sort()
		return nil
	default:
		return eris.Errorf("did not add/replace the resource type because it does not exist %T", resource)
	}
}

type ApiSnapshotStringer struct {
	Version            uint64
	VirtualServices    []string
	RouteTables        []string
	Gateways           []string
	VirtualHostOptions []string
	RouteOptions       []string
	HttpGateways       []string
}

func (ss ApiSnapshotStringer) String() string {
	s := fmt.Sprintf("ApiSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  VirtualServices %v\n", len(ss.VirtualServices))
	for _, name := range ss.VirtualServices {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  RouteTables %v\n", len(ss.RouteTables))
	for _, name := range ss.RouteTables {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Gateways %v\n", len(ss.Gateways))
	for _, name := range ss.Gateways {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  VirtualHostOptions %v\n", len(ss.VirtualHostOptions))
	for _, name := range ss.VirtualHostOptions {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  RouteOptions %v\n", len(ss.RouteOptions))
	for _, name := range ss.RouteOptions {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  HttpGateways %v\n", len(ss.HttpGateways))
	for _, name := range ss.HttpGateways {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s ApiSnapshot) Stringer() ApiSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return ApiSnapshotStringer{
		Version:            snapshotHash,
		VirtualServices:    s.VirtualServices.NamespacesDotNames(),
		RouteTables:        s.RouteTables.NamespacesDotNames(),
		Gateways:           s.Gateways.NamespacesDotNames(),
		VirtualHostOptions: s.VirtualHostOptions.NamespacesDotNames(),
		RouteOptions:       s.RouteOptions.NamespacesDotNames(),
		HttpGateways:       s.HttpGateways.NamespacesDotNames(),
	}
}

var ApiGvkToHashableResource = map[schema.GroupVersionKind]func() resources.HashableResource{
	VirtualServiceGVK:       NewVirtualServiceHashableResource,
	RouteTableGVK:           NewRouteTableHashableResource,
	GatewayGVK:              NewGatewayHashableResource,
	VirtualHostOptionGVK:    NewVirtualHostOptionHashableResource,
	RouteOptionGVK:          NewRouteOptionHashableResource,
	MatchableHttpGatewayGVK: NewMatchableHttpGatewayHashableResource,
}

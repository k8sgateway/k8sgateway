syntax = "proto3";
package gateway.gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;

import "github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/autoscaling.proto";
import "github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/bootstrap.proto";
import "github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/container.proto";
import "github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/pod.proto";
import "github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/service.proto";
import "github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/serviceaccount.proto";
import "github.com/solo-io/gloo/projects/gateway2/api/external/kubernetes/api/core/v1/generated.proto";

import "google/protobuf/wrappers.proto";

// A DataPlaneConfig contains configuration that is used to dynamically provision
// Gloo Gateway's data plane (Envoy proxy instance), based on a Kubernetes Gateway or
// GatewayClass.
message DataPlaneConfigSpec {
  ProxyConfig proxy_config = 1;
}

// Configuration for the proxy instance that implements a given Gateway.
message ProxyConfig {
  // The type of environment/platform in which the proxy will be provisioned.
  oneof environment_type {
    KubernetesProxyConfig kube = 1;
  }
  // Initial envoy configuration.
  EnvoyBootstrap bootstrap = 2;
}

// Configuration for the set of Kubernetes resources that will be provisioned
// for a given Gateway.
message KubernetesProxyConfig {
  // The workload type of the proxy
  oneof workload_type {
    ProxyDeployment deployment = 1;
  }

  Service service = 2;
  ServiceAccount service_account = 3;
  Autoscaling autoscaling = 4;
}

message ProxyDeployment {
  // The number of desired pods. Defaults to 1.
  google.protobuf.UInt32Value replicas = 1;

  Pod pod_template = 2;

  EnvoyContainer envoy_container = 3;
}

message EnvoyContainer {
  Image image = 1;

  // Logging configuration.
  EnvoyLogging logging = 2;

  k8s.io.api.core.v1.SecurityContext security_context = 3;

  ResourceRequirements resources = 4;
}

message EnvoyLogging {
  // Envoy log level. Options include "trace", "debug", "info", "warn", "error",
  // "critical" and "off". Defaults to "info".
  string log_level = 1;
}

message DataPlaneConfigStatus {}

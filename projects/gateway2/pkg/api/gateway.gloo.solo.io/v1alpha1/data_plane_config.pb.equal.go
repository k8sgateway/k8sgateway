// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/data_plane_config.proto

package v1alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *DataPlaneConfigSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DataPlaneConfigSpec)
	if !ok {
		that2, ok := that.(DataPlaneConfigSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetProxyConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetProxyConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetProxyConfig(), target.GetProxyConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ProxyConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProxyConfig)
	if !ok {
		that2, ok := that.(ProxyConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.EnvironmentType.(type) {

	case *ProxyConfig_Kube:
		if _, ok := target.EnvironmentType.(*ProxyConfig_Kube); !ok {
			return false
		}

		if h, ok := interface{}(m.GetKube()).(equality.Equalizer); ok {
			if !h.Equal(target.GetKube()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetKube(), target.GetKube()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.EnvironmentType != target.EnvironmentType {
			return false
		}
	}

	return true
}

// Equal function
func (m *KubernetesProxyConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*KubernetesProxyConfig)
	if !ok {
		that2, ok := that.(KubernetesProxyConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetPodTemplate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPodTemplate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPodTemplate(), target.GetPodTemplate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnvoyContainer()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnvoyContainer()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnvoyContainer(), target.GetEnvoyContainer()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetService()).(equality.Equalizer); ok {
		if !h.Equal(target.GetService()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetService(), target.GetService()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAutoscaling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAutoscaling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAutoscaling(), target.GetAutoscaling()) {
			return false
		}
	}

	switch m.WorkloadType.(type) {

	case *KubernetesProxyConfig_Deployment:
		if _, ok := target.WorkloadType.(*KubernetesProxyConfig_Deployment); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDeployment()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDeployment()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDeployment(), target.GetDeployment()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.WorkloadType != target.WorkloadType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ProxyDeployment) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProxyDeployment)
	if !ok {
		that2, ok := that.(ProxyDeployment)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetReplicas()).(equality.Equalizer); ok {
		if !h.Equal(target.GetReplicas()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetReplicas(), target.GetReplicas()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *EnvoyContainer) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EnvoyContainer)
	if !ok {
		that2, ok := that.(EnvoyContainer)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetImage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetImage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetImage(), target.GetImage()) {
			return false
		}
	}

	if strings.Compare(m.GetLogLevel(), target.GetLogLevel()) != 0 {
		return false
	}

	if strings.Compare(m.GetComponentLogLevel(), target.GetComponentLogLevel()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSecurityContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecurityContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecurityContext(), target.GetSecurityContext()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetResources()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResources()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResources(), target.GetResources()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DataPlaneConfigStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DataPlaneConfigStatus)
	if !ok {
		that2, ok := that.(DataPlaneConfigStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetConditions()) != len(target.GetConditions()) {
		return false
	}
	for idx, v := range m.GetConditions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetConditions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetConditions()[idx]) {
				return false
			}
		}

	}

	return true
}

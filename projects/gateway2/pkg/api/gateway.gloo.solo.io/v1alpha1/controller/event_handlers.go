// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	gateway_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the GatewayConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type GatewayConfigEventHandler interface {
	CreateGatewayConfig(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
	UpdateGatewayConfig(old, new *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
	DeleteGatewayConfig(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
	GenericGatewayConfig(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
}

type GatewayConfigEventHandlerFuncs struct {
	OnCreate  func(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
	OnUpdate  func(old, new *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
	OnDelete  func(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
	OnGeneric func(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error
}

func (f *GatewayConfigEventHandlerFuncs) CreateGatewayConfig(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *GatewayConfigEventHandlerFuncs) DeleteGatewayConfig(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *GatewayConfigEventHandlerFuncs) UpdateGatewayConfig(objOld, objNew *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *GatewayConfigEventHandlerFuncs) GenericGatewayConfig(obj *gateway_gloo_solo_io_v1alpha1.GatewayConfig) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type GatewayConfigEventWatcher interface {
	AddEventHandler(ctx context.Context, h GatewayConfigEventHandler, predicates ...predicate.Predicate) error
}

type gatewayConfigEventWatcher struct {
	watcher events.EventWatcher
}

func NewGatewayConfigEventWatcher(name string, mgr manager.Manager) GatewayConfigEventWatcher {
	return &gatewayConfigEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gateway_gloo_solo_io_v1alpha1.GatewayConfig{}),
	}
}

func (c *gatewayConfigEventWatcher) AddEventHandler(ctx context.Context, h GatewayConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericGatewayConfigHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericGatewayConfigHandler implements a generic events.EventHandler
type genericGatewayConfigHandler struct {
	handler GatewayConfigEventHandler
}

func (h genericGatewayConfigHandler) Create(object client.Object) error {
	obj, ok := object.(*gateway_gloo_solo_io_v1alpha1.GatewayConfig)
	if !ok {
		return errors.Errorf("internal error: GatewayConfig handler received event for %T", object)
	}
	return h.handler.CreateGatewayConfig(obj)
}

func (h genericGatewayConfigHandler) Delete(object client.Object) error {
	obj, ok := object.(*gateway_gloo_solo_io_v1alpha1.GatewayConfig)
	if !ok {
		return errors.Errorf("internal error: GatewayConfig handler received event for %T", object)
	}
	return h.handler.DeleteGatewayConfig(obj)
}

func (h genericGatewayConfigHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gateway_gloo_solo_io_v1alpha1.GatewayConfig)
	if !ok {
		return errors.Errorf("internal error: GatewayConfig handler received event for %T", old)
	}
	objNew, ok := new.(*gateway_gloo_solo_io_v1alpha1.GatewayConfig)
	if !ok {
		return errors.Errorf("internal error: GatewayConfig handler received event for %T", new)
	}
	return h.handler.UpdateGatewayConfig(objOld, objNew)
}

func (h genericGatewayConfigHandler) Generic(object client.Object) error {
	obj, ok := object.(*gateway_gloo_solo_io_v1alpha1.GatewayConfig)
	if !ok {
		return errors.Errorf("internal error: GatewayConfig handler received event for %T", object)
	}
	return h.handler.GenericGatewayConfig(obj)
}

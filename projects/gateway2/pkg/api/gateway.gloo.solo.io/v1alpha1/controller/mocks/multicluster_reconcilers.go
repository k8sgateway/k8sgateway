// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterGatewayConfigReconciler is a mock of MulticlusterGatewayConfigReconciler interface.
type MockMulticlusterGatewayConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayConfigReconcilerMockRecorder
}

// MockMulticlusterGatewayConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayConfigReconciler.
type MockMulticlusterGatewayConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayConfigReconciler
}

// NewMockMulticlusterGatewayConfigReconciler creates a new mock instance.
func NewMockMulticlusterGatewayConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayConfigReconciler {
	mock := &MockMulticlusterGatewayConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayConfigReconciler) EXPECT() *MockMulticlusterGatewayConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayConfig mocks base method.
func (m *MockMulticlusterGatewayConfigReconciler) ReconcileGatewayConfig(clusterName string, obj *v1alpha1.GatewayConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGatewayConfig indicates an expected call of ReconcileGatewayConfig.
func (mr *MockMulticlusterGatewayConfigReconcilerMockRecorder) ReconcileGatewayConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayConfig", reflect.TypeOf((*MockMulticlusterGatewayConfigReconciler)(nil).ReconcileGatewayConfig), clusterName, obj)
}

// MockMulticlusterGatewayConfigDeletionReconciler is a mock of MulticlusterGatewayConfigDeletionReconciler interface.
type MockMulticlusterGatewayConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterGatewayConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayConfigDeletionReconciler.
type MockMulticlusterGatewayConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayConfigDeletionReconciler
}

// NewMockMulticlusterGatewayConfigDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGatewayConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayConfigDeletionReconciler {
	mock := &MockMulticlusterGatewayConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayConfigDeletionReconciler) EXPECT() *MockMulticlusterGatewayConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayConfigDeletion mocks base method.
func (m *MockMulticlusterGatewayConfigDeletionReconciler) ReconcileGatewayConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayConfigDeletion indicates an expected call of ReconcileGatewayConfigDeletion.
func (mr *MockMulticlusterGatewayConfigDeletionReconcilerMockRecorder) ReconcileGatewayConfigDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayConfigDeletion", reflect.TypeOf((*MockMulticlusterGatewayConfigDeletionReconciler)(nil).ReconcileGatewayConfigDeletion), clusterName, req)
}

// MockMulticlusterGatewayConfigReconcileLoop is a mock of MulticlusterGatewayConfigReconcileLoop interface.
type MockMulticlusterGatewayConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayConfigReconcileLoopMockRecorder
}

// MockMulticlusterGatewayConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGatewayConfigReconcileLoop.
type MockMulticlusterGatewayConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGatewayConfigReconcileLoop
}

// NewMockMulticlusterGatewayConfigReconcileLoop creates a new mock instance.
func NewMockMulticlusterGatewayConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGatewayConfigReconcileLoop {
	mock := &MockMulticlusterGatewayConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayConfigReconcileLoop) EXPECT() *MockMulticlusterGatewayConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGatewayConfigReconciler mocks base method.
func (m *MockMulticlusterGatewayConfigReconcileLoop) AddMulticlusterGatewayConfigReconciler(ctx context.Context, rec controller.MulticlusterGatewayConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGatewayConfigReconciler", varargs...)
}

// AddMulticlusterGatewayConfigReconciler indicates an expected call of AddMulticlusterGatewayConfigReconciler.
func (mr *MockMulticlusterGatewayConfigReconcileLoopMockRecorder) AddMulticlusterGatewayConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGatewayConfigReconciler", reflect.TypeOf((*MockMulticlusterGatewayConfigReconcileLoop)(nil).AddMulticlusterGatewayConfigReconciler), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockGatewayConfigEventHandler is a mock of GatewayConfigEventHandler interface.
type MockGatewayConfigEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayConfigEventHandlerMockRecorder
}

// MockGatewayConfigEventHandlerMockRecorder is the mock recorder for MockGatewayConfigEventHandler.
type MockGatewayConfigEventHandlerMockRecorder struct {
	mock *MockGatewayConfigEventHandler
}

// NewMockGatewayConfigEventHandler creates a new mock instance.
func NewMockGatewayConfigEventHandler(ctrl *gomock.Controller) *MockGatewayConfigEventHandler {
	mock := &MockGatewayConfigEventHandler{ctrl: ctrl}
	mock.recorder = &MockGatewayConfigEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayConfigEventHandler) EXPECT() *MockGatewayConfigEventHandlerMockRecorder {
	return m.recorder
}

// CreateGatewayConfig mocks base method.
func (m *MockGatewayConfigEventHandler) CreateGatewayConfig(obj *v1alpha1.GatewayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayConfig indicates an expected call of CreateGatewayConfig.
func (mr *MockGatewayConfigEventHandlerMockRecorder) CreateGatewayConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayConfig", reflect.TypeOf((*MockGatewayConfigEventHandler)(nil).CreateGatewayConfig), obj)
}

// DeleteGatewayConfig mocks base method.
func (m *MockGatewayConfigEventHandler) DeleteGatewayConfig(obj *v1alpha1.GatewayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGatewayConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGatewayConfig indicates an expected call of DeleteGatewayConfig.
func (mr *MockGatewayConfigEventHandlerMockRecorder) DeleteGatewayConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayConfig", reflect.TypeOf((*MockGatewayConfigEventHandler)(nil).DeleteGatewayConfig), obj)
}

// GenericGatewayConfig mocks base method.
func (m *MockGatewayConfigEventHandler) GenericGatewayConfig(obj *v1alpha1.GatewayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGatewayConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGatewayConfig indicates an expected call of GenericGatewayConfig.
func (mr *MockGatewayConfigEventHandlerMockRecorder) GenericGatewayConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGatewayConfig", reflect.TypeOf((*MockGatewayConfigEventHandler)(nil).GenericGatewayConfig), obj)
}

// UpdateGatewayConfig mocks base method.
func (m *MockGatewayConfigEventHandler) UpdateGatewayConfig(old, new *v1alpha1.GatewayConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayConfig", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayConfig indicates an expected call of UpdateGatewayConfig.
func (mr *MockGatewayConfigEventHandlerMockRecorder) UpdateGatewayConfig(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayConfig", reflect.TypeOf((*MockGatewayConfigEventHandler)(nil).UpdateGatewayConfig), old, new)
}

// MockGatewayConfigEventWatcher is a mock of GatewayConfigEventWatcher interface.
type MockGatewayConfigEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayConfigEventWatcherMockRecorder
}

// MockGatewayConfigEventWatcherMockRecorder is the mock recorder for MockGatewayConfigEventWatcher.
type MockGatewayConfigEventWatcherMockRecorder struct {
	mock *MockGatewayConfigEventWatcher
}

// NewMockGatewayConfigEventWatcher creates a new mock instance.
func NewMockGatewayConfigEventWatcher(ctrl *gomock.Controller) *MockGatewayConfigEventWatcher {
	mock := &MockGatewayConfigEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGatewayConfigEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayConfigEventWatcher) EXPECT() *MockGatewayConfigEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGatewayConfigEventWatcher) AddEventHandler(ctx context.Context, h controller.GatewayConfigEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGatewayConfigEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGatewayConfigEventWatcher)(nil).AddEventHandler), varargs...)
}

// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gateway2/api/v1alpha1/pod.proto

package v1alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *Pod) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Pod)
	if !ok {
		that2, ok := that.(Pod)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetAnnotations()) != len(target.GetAnnotations()) {
		return false
	}
	for k, v := range m.GetAnnotations() {

		if strings.Compare(v, target.GetAnnotations()[k]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetSecurityContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecurityContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecurityContext(), target.GetSecurityContext()) {
			return false
		}
	}

	if len(m.GetImagePullSecrets()) != len(target.GetImagePullSecrets()) {
		return false
	}
	for idx, v := range m.GetImagePullSecrets() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetImagePullSecrets()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetImagePullSecrets()[idx]) {
				return false
			}
		}

	}

	if len(m.GetNodeSelector()) != len(target.GetNodeSelector()) {
		return false
	}
	for k, v := range m.GetNodeSelector() {

		if strings.Compare(v, target.GetNodeSelector()[k]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetAffinity()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAffinity()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAffinity(), target.GetAffinity()) {
			return false
		}
	}

	if len(m.GetTolerations()) != len(target.GetTolerations()) {
		return false
	}
	for idx, v := range m.GetTolerations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTolerations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTolerations()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Container) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Container)
	if !ok {
		that2, ok := that.(Container)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetImage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetImage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetImage(), target.GetImage()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSecurityContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecurityContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecurityContext(), target.GetSecurityContext()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetResources()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResources()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResources(), target.GetResources()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Image) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Image)
	if !ok {
		that2, ok := that.(Image)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRegistry(), target.GetRegistry()) != 0 {
		return false
	}

	if strings.Compare(m.GetRepository(), target.GetRepository()) != 0 {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	if strings.Compare(m.GetPullPolicy(), target.GetPullPolicy()) != 0 {
		return false
	}

	return true
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo/projects/gateway2/pkg/api/gateway.gloo.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// GatewayConfigs mocks base method.
func (m *MockClientset) GatewayConfigs() v1alpha1.GatewayConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayConfigs")
	ret0, _ := ret[0].(v1alpha1.GatewayConfigClient)
	return ret0
}

// GatewayConfigs indicates an expected call of GatewayConfigs.
func (mr *MockClientsetMockRecorder) GatewayConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayConfigs", reflect.TypeOf((*MockClientset)(nil).GatewayConfigs))
}

// MockGatewayConfigReader is a mock of GatewayConfigReader interface.
type MockGatewayConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayConfigReaderMockRecorder
}

// MockGatewayConfigReaderMockRecorder is the mock recorder for MockGatewayConfigReader.
type MockGatewayConfigReaderMockRecorder struct {
	mock *MockGatewayConfigReader
}

// NewMockGatewayConfigReader creates a new mock instance.
func NewMockGatewayConfigReader(ctrl *gomock.Controller) *MockGatewayConfigReader {
	mock := &MockGatewayConfigReader{ctrl: ctrl}
	mock.recorder = &MockGatewayConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayConfigReader) EXPECT() *MockGatewayConfigReaderMockRecorder {
	return m.recorder
}

// GetGatewayConfig mocks base method.
func (m *MockGatewayConfigReader) GetGatewayConfig(ctx context.Context, key client.ObjectKey) (*v1alpha1.GatewayConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewayConfig", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.GatewayConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayConfig indicates an expected call of GetGatewayConfig.
func (mr *MockGatewayConfigReaderMockRecorder) GetGatewayConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayConfig", reflect.TypeOf((*MockGatewayConfigReader)(nil).GetGatewayConfig), ctx, key)
}

// ListGatewayConfig mocks base method.
func (m *MockGatewayConfigReader) ListGatewayConfig(ctx context.Context, opts ...client.ListOption) (*v1alpha1.GatewayConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewayConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GatewayConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayConfig indicates an expected call of ListGatewayConfig.
func (mr *MockGatewayConfigReaderMockRecorder) ListGatewayConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayConfig", reflect.TypeOf((*MockGatewayConfigReader)(nil).ListGatewayConfig), varargs...)
}

// MockGatewayConfigWriter is a mock of GatewayConfigWriter interface.
type MockGatewayConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayConfigWriterMockRecorder
}

// MockGatewayConfigWriterMockRecorder is the mock recorder for MockGatewayConfigWriter.
type MockGatewayConfigWriterMockRecorder struct {
	mock *MockGatewayConfigWriter
}

// NewMockGatewayConfigWriter creates a new mock instance.
func NewMockGatewayConfigWriter(ctrl *gomock.Controller) *MockGatewayConfigWriter {
	mock := &MockGatewayConfigWriter{ctrl: ctrl}
	mock.recorder = &MockGatewayConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayConfigWriter) EXPECT() *MockGatewayConfigWriterMockRecorder {
	return m.recorder
}

// CreateGatewayConfig mocks base method.
func (m *MockGatewayConfigWriter) CreateGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayConfig indicates an expected call of CreateGatewayConfig.
func (mr *MockGatewayConfigWriterMockRecorder) CreateGatewayConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayConfig", reflect.TypeOf((*MockGatewayConfigWriter)(nil).CreateGatewayConfig), varargs...)
}

// DeleteAllOfGatewayConfig mocks base method.
func (m *MockGatewayConfigWriter) DeleteAllOfGatewayConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGatewayConfig indicates an expected call of DeleteAllOfGatewayConfig.
func (mr *MockGatewayConfigWriterMockRecorder) DeleteAllOfGatewayConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGatewayConfig", reflect.TypeOf((*MockGatewayConfigWriter)(nil).DeleteAllOfGatewayConfig), varargs...)
}

// DeleteGatewayConfig mocks base method.
func (m *MockGatewayConfigWriter) DeleteGatewayConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGatewayConfig indicates an expected call of DeleteGatewayConfig.
func (mr *MockGatewayConfigWriterMockRecorder) DeleteGatewayConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayConfig", reflect.TypeOf((*MockGatewayConfigWriter)(nil).DeleteGatewayConfig), varargs...)
}

// PatchGatewayConfig mocks base method.
func (m *MockGatewayConfigWriter) PatchGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayConfig indicates an expected call of PatchGatewayConfig.
func (mr *MockGatewayConfigWriterMockRecorder) PatchGatewayConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayConfig", reflect.TypeOf((*MockGatewayConfigWriter)(nil).PatchGatewayConfig), varargs...)
}

// UpdateGatewayConfig mocks base method.
func (m *MockGatewayConfigWriter) UpdateGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayConfig indicates an expected call of UpdateGatewayConfig.
func (mr *MockGatewayConfigWriterMockRecorder) UpdateGatewayConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayConfig", reflect.TypeOf((*MockGatewayConfigWriter)(nil).UpdateGatewayConfig), varargs...)
}

// UpsertGatewayConfig mocks base method.
func (m *MockGatewayConfigWriter) UpsertGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, transitionFuncs ...v1alpha1.GatewayConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGatewayConfig indicates an expected call of UpsertGatewayConfig.
func (mr *MockGatewayConfigWriterMockRecorder) UpsertGatewayConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGatewayConfig", reflect.TypeOf((*MockGatewayConfigWriter)(nil).UpsertGatewayConfig), varargs...)
}

// MockGatewayConfigStatusWriter is a mock of GatewayConfigStatusWriter interface.
type MockGatewayConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayConfigStatusWriterMockRecorder
}

// MockGatewayConfigStatusWriterMockRecorder is the mock recorder for MockGatewayConfigStatusWriter.
type MockGatewayConfigStatusWriterMockRecorder struct {
	mock *MockGatewayConfigStatusWriter
}

// NewMockGatewayConfigStatusWriter creates a new mock instance.
func NewMockGatewayConfigStatusWriter(ctrl *gomock.Controller) *MockGatewayConfigStatusWriter {
	mock := &MockGatewayConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGatewayConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayConfigStatusWriter) EXPECT() *MockGatewayConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchGatewayConfigStatus mocks base method.
func (m *MockGatewayConfigStatusWriter) PatchGatewayConfigStatus(ctx context.Context, obj *v1alpha1.GatewayConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayConfigStatus indicates an expected call of PatchGatewayConfigStatus.
func (mr *MockGatewayConfigStatusWriterMockRecorder) PatchGatewayConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayConfigStatus", reflect.TypeOf((*MockGatewayConfigStatusWriter)(nil).PatchGatewayConfigStatus), varargs...)
}

// UpdateGatewayConfigStatus mocks base method.
func (m *MockGatewayConfigStatusWriter) UpdateGatewayConfigStatus(ctx context.Context, obj *v1alpha1.GatewayConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayConfigStatus indicates an expected call of UpdateGatewayConfigStatus.
func (mr *MockGatewayConfigStatusWriterMockRecorder) UpdateGatewayConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayConfigStatus", reflect.TypeOf((*MockGatewayConfigStatusWriter)(nil).UpdateGatewayConfigStatus), varargs...)
}

// MockGatewayConfigClient is a mock of GatewayConfigClient interface.
type MockGatewayConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayConfigClientMockRecorder
}

// MockGatewayConfigClientMockRecorder is the mock recorder for MockGatewayConfigClient.
type MockGatewayConfigClientMockRecorder struct {
	mock *MockGatewayConfigClient
}

// NewMockGatewayConfigClient creates a new mock instance.
func NewMockGatewayConfigClient(ctrl *gomock.Controller) *MockGatewayConfigClient {
	mock := &MockGatewayConfigClient{ctrl: ctrl}
	mock.recorder = &MockGatewayConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayConfigClient) EXPECT() *MockGatewayConfigClientMockRecorder {
	return m.recorder
}

// CreateGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) CreateGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayConfig indicates an expected call of CreateGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) CreateGatewayConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).CreateGatewayConfig), varargs...)
}

// DeleteAllOfGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) DeleteAllOfGatewayConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGatewayConfig indicates an expected call of DeleteAllOfGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) DeleteAllOfGatewayConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).DeleteAllOfGatewayConfig), varargs...)
}

// DeleteGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) DeleteGatewayConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGatewayConfig indicates an expected call of DeleteGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) DeleteGatewayConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).DeleteGatewayConfig), varargs...)
}

// GetGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) GetGatewayConfig(ctx context.Context, key client.ObjectKey) (*v1alpha1.GatewayConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewayConfig", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.GatewayConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayConfig indicates an expected call of GetGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) GetGatewayConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).GetGatewayConfig), ctx, key)
}

// ListGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) ListGatewayConfig(ctx context.Context, opts ...client.ListOption) (*v1alpha1.GatewayConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewayConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GatewayConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayConfig indicates an expected call of ListGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) ListGatewayConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).ListGatewayConfig), varargs...)
}

// PatchGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) PatchGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayConfig indicates an expected call of PatchGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) PatchGatewayConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).PatchGatewayConfig), varargs...)
}

// PatchGatewayConfigStatus mocks base method.
func (m *MockGatewayConfigClient) PatchGatewayConfigStatus(ctx context.Context, obj *v1alpha1.GatewayConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayConfigStatus indicates an expected call of PatchGatewayConfigStatus.
func (mr *MockGatewayConfigClientMockRecorder) PatchGatewayConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayConfigStatus", reflect.TypeOf((*MockGatewayConfigClient)(nil).PatchGatewayConfigStatus), varargs...)
}

// UpdateGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) UpdateGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayConfig indicates an expected call of UpdateGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) UpdateGatewayConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).UpdateGatewayConfig), varargs...)
}

// UpdateGatewayConfigStatus mocks base method.
func (m *MockGatewayConfigClient) UpdateGatewayConfigStatus(ctx context.Context, obj *v1alpha1.GatewayConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayConfigStatus indicates an expected call of UpdateGatewayConfigStatus.
func (mr *MockGatewayConfigClientMockRecorder) UpdateGatewayConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayConfigStatus", reflect.TypeOf((*MockGatewayConfigClient)(nil).UpdateGatewayConfigStatus), varargs...)
}

// UpsertGatewayConfig mocks base method.
func (m *MockGatewayConfigClient) UpsertGatewayConfig(ctx context.Context, obj *v1alpha1.GatewayConfig, transitionFuncs ...v1alpha1.GatewayConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGatewayConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGatewayConfig indicates an expected call of UpsertGatewayConfig.
func (mr *MockGatewayConfigClientMockRecorder) UpsertGatewayConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGatewayConfig", reflect.TypeOf((*MockGatewayConfigClient)(nil).UpsertGatewayConfig), varargs...)
}

// MockMulticlusterGatewayConfigClient is a mock of MulticlusterGatewayConfigClient interface.
type MockMulticlusterGatewayConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayConfigClientMockRecorder
}

// MockMulticlusterGatewayConfigClientMockRecorder is the mock recorder for MockMulticlusterGatewayConfigClient.
type MockMulticlusterGatewayConfigClientMockRecorder struct {
	mock *MockMulticlusterGatewayConfigClient
}

// NewMockMulticlusterGatewayConfigClient creates a new mock instance.
func NewMockMulticlusterGatewayConfigClient(ctrl *gomock.Controller) *MockMulticlusterGatewayConfigClient {
	mock := &MockMulticlusterGatewayConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayConfigClient) EXPECT() *MockMulticlusterGatewayConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGatewayConfigClient) Cluster(cluster string) (v1alpha1.GatewayConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.GatewayConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGatewayConfigClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGatewayConfigClient)(nil).Cluster), cluster)
}

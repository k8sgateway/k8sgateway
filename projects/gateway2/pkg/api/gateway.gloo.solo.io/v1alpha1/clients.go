// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1alpha1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the gateway.gloo.solo.io/v1alpha1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the gateway.gloo.solo.io/v1alpha1 APIs
type Clientset interface {
	// clienset for the gateway.gloo.solo.io/v1alpha1/v1alpha1 APIs
	GatewayConfigs() GatewayConfigClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the gateway.gloo.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) GatewayConfigs() GatewayConfigClient {
	return NewGatewayConfigClient(c.client)
}

// Reader knows how to read and list GatewayConfigs.
type GatewayConfigReader interface {
	// Get retrieves a GatewayConfig for the given object key
	GetGatewayConfig(ctx context.Context, key client.ObjectKey) (*GatewayConfig, error)

	// List retrieves list of GatewayConfigs for a given namespace and list options.
	ListGatewayConfig(ctx context.Context, opts ...client.ListOption) (*GatewayConfigList, error)
}

// GatewayConfigTransitionFunction instructs the GatewayConfigWriter how to transition between an existing
// GatewayConfig object and a desired on an Upsert
type GatewayConfigTransitionFunction func(existing, desired *GatewayConfig) error

// Writer knows how to create, delete, and update GatewayConfigs.
type GatewayConfigWriter interface {
	// Create saves the GatewayConfig object.
	CreateGatewayConfig(ctx context.Context, obj *GatewayConfig, opts ...client.CreateOption) error

	// Delete deletes the GatewayConfig object.
	DeleteGatewayConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GatewayConfig object.
	UpdateGatewayConfig(ctx context.Context, obj *GatewayConfig, opts ...client.UpdateOption) error

	// Patch patches the given GatewayConfig object.
	PatchGatewayConfig(ctx context.Context, obj *GatewayConfig, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GatewayConfig objects matching the given options.
	DeleteAllOfGatewayConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GatewayConfig object.
	UpsertGatewayConfig(ctx context.Context, obj *GatewayConfig, transitionFuncs ...GatewayConfigTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GatewayConfig object.
type GatewayConfigStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GatewayConfig object.
	UpdateGatewayConfigStatus(ctx context.Context, obj *GatewayConfig, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given GatewayConfig object's subresource.
	PatchGatewayConfigStatus(ctx context.Context, obj *GatewayConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on GatewayConfigs.
type GatewayConfigClient interface {
	GatewayConfigReader
	GatewayConfigWriter
	GatewayConfigStatusWriter
}

type gatewayConfigClient struct {
	client client.Client
}

func NewGatewayConfigClient(client client.Client) *gatewayConfigClient {
	return &gatewayConfigClient{client: client}
}

func (c *gatewayConfigClient) GetGatewayConfig(ctx context.Context, key client.ObjectKey) (*GatewayConfig, error) {
	obj := &GatewayConfig{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *gatewayConfigClient) ListGatewayConfig(ctx context.Context, opts ...client.ListOption) (*GatewayConfigList, error) {
	list := &GatewayConfigList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *gatewayConfigClient) CreateGatewayConfig(ctx context.Context, obj *GatewayConfig, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *gatewayConfigClient) DeleteGatewayConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GatewayConfig{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *gatewayConfigClient) UpdateGatewayConfig(ctx context.Context, obj *GatewayConfig, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *gatewayConfigClient) PatchGatewayConfig(ctx context.Context, obj *GatewayConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *gatewayConfigClient) DeleteAllOfGatewayConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GatewayConfig{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *gatewayConfigClient) UpsertGatewayConfig(ctx context.Context, obj *GatewayConfig, transitionFuncs ...GatewayConfigTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GatewayConfig), desired.(*GatewayConfig)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *gatewayConfigClient) UpdateGatewayConfigStatus(ctx context.Context, obj *GatewayConfig, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *gatewayConfigClient) PatchGatewayConfigStatus(ctx context.Context, obj *GatewayConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GatewayConfigClients for multiple clusters.
type MulticlusterGatewayConfigClient interface {
	// Cluster returns a GatewayConfigClient for the given cluster
	Cluster(cluster string) (GatewayConfigClient, error)
}

type multiclusterGatewayConfigClient struct {
	client multicluster.Client
}

func NewMulticlusterGatewayConfigClient(client multicluster.Client) MulticlusterGatewayConfigClient {
	return &multiclusterGatewayConfigClient{client: client}
}

func (m *multiclusterGatewayConfigClient) Cluster(cluster string) (GatewayConfigClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGatewayConfigClient(client), nil
}

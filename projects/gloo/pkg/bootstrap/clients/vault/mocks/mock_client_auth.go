// Code generated by MockGen. DO NOT EDIT.
// Source: projects/gloo/pkg/bootstrap/clients/vault/auth.go

// Package mock_vault is a generated GoMock package.
package mock_vault

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
)

// MockTokenRenewer is a mock of TokenRenewer interface.
type MockTokenRenewer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRenewerMockRecorder
}

// MockTokenRenewerMockRecorder is the mock recorder for MockTokenRenewer.
type MockTokenRenewerMockRecorder struct {
	mock *MockTokenRenewer
}

// NewMockTokenRenewer creates a new mock instance.
func NewMockTokenRenewer(ctrl *gomock.Controller) *MockTokenRenewer {
	mock := &MockTokenRenewer{ctrl: ctrl}
	mock.recorder = &MockTokenRenewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRenewer) EXPECT() *MockTokenRenewerMockRecorder {
	return m.recorder
}

// StartRenewal mocks base method.
func (m *MockTokenRenewer) StartRenewal(ctx context.Context, client *api.Client, secret *api.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRenewal", ctx, client, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRenewal indicates an expected call of StartRenewal.
func (mr *MockTokenRenewerMockRecorder) StartRenewal(ctx, client, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRenewal", reflect.TypeOf((*MockTokenRenewer)(nil).StartRenewal), ctx, client, secret)
}

// MockClientAuth is a mock of ClientAuth interface.
type MockClientAuth struct {
	ctrl     *gomock.Controller
	recorder *MockClientAuthMockRecorder
}

// MockClientAuthMockRecorder is the mock recorder for MockClientAuth.
type MockClientAuthMockRecorder struct {
	mock *MockClientAuth
}

// NewMockClientAuth creates a new mock instance.
func NewMockClientAuth(ctrl *gomock.Controller) *MockClientAuth {
	mock := &MockClientAuth{ctrl: ctrl}
	mock.recorder = &MockClientAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAuth) EXPECT() *MockClientAuthMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockClientAuth) Login(ctx context.Context, client *api.Client) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, client)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockClientAuthMockRecorder) Login(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClientAuth)(nil).Login), ctx, client)
}

// StartRenewal mocks base method.
func (m *MockClientAuth) StartRenewal(ctx context.Context, client *api.Client, secret *api.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRenewal", ctx, client, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRenewal indicates an expected call of StartRenewal.
func (mr *MockClientAuthMockRecorder) StartRenewal(ctx, client, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRenewal", reflect.TypeOf((*MockClientAuth)(nil).StartRenewal), ctx, client, secret)
}

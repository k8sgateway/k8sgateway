// Code generated by MockGen. DO NOT EDIT.
// Source: projects/gloo/pkg/bootstrap/clients/vault/renewal.go

// Package mock_vault is a generated GoMock package.
package mock_vault

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
)

// MockTokenWatcher is a mock of TokenWatcher interface.
type MockTokenWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTokenWatcherMockRecorder
}

// MockTokenWatcherMockRecorder is the mock recorder for MockTokenWatcher.
type MockTokenWatcherMockRecorder struct {
	mock *MockTokenWatcher
}

// NewMockTokenWatcher creates a new mock instance.
func NewMockTokenWatcher(ctrl *gomock.Controller) *MockTokenWatcher {
	mock := &MockTokenWatcher{ctrl: ctrl}
	mock.recorder = &MockTokenWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenWatcher) EXPECT() *MockTokenWatcherMockRecorder {
	return m.recorder
}

// DoneCh mocks base method.
func (m *MockTokenWatcher) DoneCh() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoneCh")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// DoneCh indicates an expected call of DoneCh.
func (mr *MockTokenWatcherMockRecorder) DoneCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoneCh", reflect.TypeOf((*MockTokenWatcher)(nil).DoneCh))
}

// RenewCh mocks base method.
func (m *MockTokenWatcher) RenewCh() <-chan *api.RenewOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewCh")
	ret0, _ := ret[0].(<-chan *api.RenewOutput)
	return ret0
}

// RenewCh indicates an expected call of RenewCh.
func (mr *MockTokenWatcherMockRecorder) RenewCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewCh", reflect.TypeOf((*MockTokenWatcher)(nil).RenewCh))
}

// Start mocks base method.
func (m *MockTokenWatcher) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockTokenWatcherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTokenWatcher)(nil).Start))
}

// Stop mocks base method.
func (m *MockTokenWatcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTokenWatcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTokenWatcher)(nil).Stop))
}

// MockTokenRenewer is a mock of TokenRenewer interface.
type MockTokenRenewer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRenewerMockRecorder
}

// MockTokenRenewerMockRecorder is the mock recorder for MockTokenRenewer.
type MockTokenRenewerMockRecorder struct {
	mock *MockTokenRenewer
}

// NewMockTokenRenewer creates a new mock instance.
func NewMockTokenRenewer(ctrl *gomock.Controller) *MockTokenRenewer {
	mock := &MockTokenRenewer{ctrl: ctrl}
	mock.recorder = &MockTokenRenewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRenewer) EXPECT() *MockTokenRenewerMockRecorder {
	return m.recorder
}

// StartRenewal mocks base method.
func (m *MockTokenRenewer) StartRenewal(ctx context.Context, client *api.Client, secret *api.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRenewal", ctx, client, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRenewal indicates an expected call of StartRenewal.
func (mr *MockTokenRenewerMockRecorder) StartRenewal(ctx, client, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRenewal", reflect.TypeOf((*MockTokenRenewer)(nil).StartRenewal), ctx, client, secret)
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/graphql/stitching.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ------------- Graphql Tools JS Out -------------
// This is the message which the graphql-tools js script will consume
type GraphQLToolsStitchingInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subschemas []*GraphQLToolsStitchingInput_Schema `protobuf:"bytes,1,rep,name=subschemas,proto3" json:"subschemas,omitempty"`
}

func (x *GraphQLToolsStitchingInput) Reset() {
	*x = GraphQLToolsStitchingInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLToolsStitchingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLToolsStitchingInput) ProtoMessage() {}

func (x *GraphQLToolsStitchingInput) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLToolsStitchingInput.ProtoReflect.Descriptor instead.
func (*GraphQLToolsStitchingInput) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{0}
}

func (x *GraphQLToolsStitchingInput) GetSubschemas() []*GraphQLToolsStitchingInput_Schema {
	if x != nil {
		return x.Subschemas
	}
	return nil
}

//------------- Graphql Tools JS Out ------------------
// The message that is the output of the graphql tools stitching info script
type GraphQlToolsStitchingOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNodesByType  map[string]*FieldNodes       `protobuf:"bytes,1,rep,name=field_nodes_by_type,json=fieldNodesByType,proto3" json:"field_nodes_by_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldNodesByField map[string]*FieldNodeMap     `protobuf:"bytes,2,rep,name=field_nodes_by_field,json=fieldNodesByField,proto3" json:"field_nodes_by_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MergedTypes       map[string]*MergedTypeConfig `protobuf:"bytes,3,rep,name=merged_types,json=mergedTypes,proto3" json:"merged_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StitchedSchema    string                       `protobuf:"bytes,5,opt,name=stitched_schema,json=stitchedSchema,proto3" json:"stitched_schema,omitempty"`
}

func (x *GraphQlToolsStitchingOutput) Reset() {
	*x = GraphQlToolsStitchingOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQlToolsStitchingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQlToolsStitchingOutput) ProtoMessage() {}

func (x *GraphQlToolsStitchingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQlToolsStitchingOutput.ProtoReflect.Descriptor instead.
func (*GraphQlToolsStitchingOutput) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{1}
}

func (x *GraphQlToolsStitchingOutput) GetFieldNodesByType() map[string]*FieldNodes {
	if x != nil {
		return x.FieldNodesByType
	}
	return nil
}

func (x *GraphQlToolsStitchingOutput) GetFieldNodesByField() map[string]*FieldNodeMap {
	if x != nil {
		return x.FieldNodesByField
	}
	return nil
}

func (x *GraphQlToolsStitchingOutput) GetMergedTypes() map[string]*MergedTypeConfig {
	if x != nil {
		return x.MergedTypes
	}
	return nil
}

func (x *GraphQlToolsStitchingOutput) GetStitchedSchema() string {
	if x != nil {
		return x.StitchedSchema
	}
	return ""
}

type FieldNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FieldNode) Reset() {
	*x = FieldNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNode) ProtoMessage() {}

func (x *FieldNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNode.ProtoReflect.Descriptor instead.
func (*FieldNode) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{2}
}

func (x *FieldNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FieldNodeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes map[string]*FieldNodes `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FieldNodeMap) Reset() {
	*x = FieldNodeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldNodeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNodeMap) ProtoMessage() {}

func (x *FieldNodeMap) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNodeMap.ProtoReflect.Descriptor instead.
func (*FieldNodeMap) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{3}
}

func (x *FieldNodeMap) GetNodes() map[string]*FieldNodes {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FieldNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNodes []*FieldNode `protobuf:"bytes,1,rep,name=field_nodes,json=fieldNodes,proto3" json:"field_nodes,omitempty"`
}

func (x *FieldNodes) Reset() {
	*x = FieldNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNodes) ProtoMessage() {}

func (x *FieldNodes) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNodes.ProtoReflect.Descriptor instead.
func (*FieldNodes) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{4}
}

func (x *FieldNodes) GetFieldNodes() []*FieldNode {
	if x != nil {
		return x.FieldNodes
	}
	return nil
}

type ResolverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionSet string `protobuf:"bytes,1,opt,name=selection_set,json=selectionSet,proto3" json:"selection_set,omitempty"`
	FieldName    string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *ResolverConfig) Reset() {
	*x = ResolverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverConfig) ProtoMessage() {}

func (x *ResolverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverConfig.ProtoReflect.Descriptor instead.
func (*ResolverConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{5}
}

func (x *ResolverConfig) GetSelectionSet() string {
	if x != nil {
		return x.SelectionSet
	}
	return ""
}

func (x *ResolverConfig) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type Schemas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (x *Schemas) Reset() {
	*x = Schemas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemas) ProtoMessage() {}

func (x *Schemas) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemas.ProtoReflect.Descriptor instead.
func (*Schemas) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{6}
}

func (x *Schemas) GetSchemas() []string {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type ArgPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setter Path
	SetterPath []string `protobuf:"bytes,1,rep,name=setter_path,json=setterPath,proto3" json:"setter_path,omitempty"`
	// Extraction path
	ExtractionPath []string `protobuf:"bytes,2,rep,name=extraction_path,json=extractionPath,proto3" json:"extraction_path,omitempty"`
}

func (x *ArgPath) Reset() {
	*x = ArgPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgPath) ProtoMessage() {}

func (x *ArgPath) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgPath.ProtoReflect.Descriptor instead.
func (*ArgPath) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{7}
}

func (x *ArgPath) GetSetterPath() []string {
	if x != nil {
		return x.SetterPath
	}
	return nil
}

func (x *ArgPath) GetExtractionPath() []string {
	if x != nil {
		return x.ExtractionPath
	}
	return nil
}

type ResolverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string     `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Args      []*ArgPath `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ResolverInfo) Reset() {
	*x = ResolverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverInfo) ProtoMessage() {}

func (x *ResolverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverInfo.ProtoReflect.Descriptor instead.
func (*ResolverInfo) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{8}
}

func (x *ResolverInfo) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ResolverInfo) GetArgs() []*ArgPath {
	if x != nil {
		return x.Args
	}
	return nil
}

type MergedTypeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// map of subschema name to selection set string
	// e.g. name_subschema: '{ id }'
	SelectionSets map[string]string `protobuf:"bytes,2,rep,name=selection_sets,json=selectionSets,proto3" json:"selection_sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// schema -> resolver
	// map<string, ResolverConfig> resolver_config = 4;
	// field name -> scema name
	UniqueFieldsToSubschemaName     map[string]string   `protobuf:"bytes,5,rep,name=unique_fields_to_subschema_name,json=uniqueFieldsToSubschemaName,proto3" json:"unique_fields_to_subschema_name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NonUniqueFieldsToSubschemaNames map[string]*Schemas `protobuf:"bytes,6,rep,name=non_unique_fields_to_subschema_names,json=nonUniqueFieldsToSubschemaNames,proto3" json:"non_unique_fields_to_subschema_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// schema -> subschemas
	DeclarativeTargetSubschemas map[string]*Schemas      `protobuf:"bytes,7,rep,name=declarative_target_subschemas,json=declarativeTargetSubschemas,proto3" json:"declarative_target_subschemas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubschemaNameToResolverInfo map[string]*ResolverInfo `protobuf:"bytes,8,rep,name=subschema_name_to_resolver_info,json=subschemaNameToResolverInfo,proto3" json:"subschema_name_to_resolver_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MergedTypeConfig) Reset() {
	*x = MergedTypeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedTypeConfig) ProtoMessage() {}

func (x *MergedTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedTypeConfig.ProtoReflect.Descriptor instead.
func (*MergedTypeConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{9}
}

func (x *MergedTypeConfig) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *MergedTypeConfig) GetSelectionSets() map[string]string {
	if x != nil {
		return x.SelectionSets
	}
	return nil
}

func (x *MergedTypeConfig) GetUniqueFieldsToSubschemaName() map[string]string {
	if x != nil {
		return x.UniqueFieldsToSubschemaName
	}
	return nil
}

func (x *MergedTypeConfig) GetNonUniqueFieldsToSubschemaNames() map[string]*Schemas {
	if x != nil {
		return x.NonUniqueFieldsToSubschemaNames
	}
	return nil
}

func (x *MergedTypeConfig) GetDeclarativeTargetSubschemas() map[string]*Schemas {
	if x != nil {
		return x.DeclarativeTargetSubschemas
	}
	return nil
}

func (x *MergedTypeConfig) GetSubschemaNameToResolverInfo() map[string]*ResolverInfo {
	if x != nil {
		return x.SubschemaNameToResolverInfo
	}
	return nil
}

// Data plane stitching info extension message
type StitchingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNodesByType               map[string]*FieldNodes                    `protobuf:"bytes,1,rep,name=field_nodes_by_type,json=fieldNodesByType,proto3" json:"field_nodes_by_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldNodesByField              map[string]*FieldNodeMap                  `protobuf:"bytes,2,rep,name=field_nodes_by_field,json=fieldNodesByField,proto3" json:"field_nodes_by_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MergedTypes                    map[string]*MergedTypeConfig              `protobuf:"bytes,3,rep,name=merged_types,json=mergedTypes,proto3" json:"merged_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubschemaNameToSubschemaConfig map[string]*StitchingInfo_SubschemaConfig `protobuf:"bytes,4,rep,name=subschema_name_to_subschema_config,json=subschemaNameToSubschemaConfig,proto3" json:"subschema_name_to_subschema_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StitchingInfo) Reset() {
	*x = StitchingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StitchingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchingInfo) ProtoMessage() {}

func (x *StitchingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchingInfo.ProtoReflect.Descriptor instead.
func (*StitchingInfo) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{10}
}

func (x *StitchingInfo) GetFieldNodesByType() map[string]*FieldNodes {
	if x != nil {
		return x.FieldNodesByType
	}
	return nil
}

func (x *StitchingInfo) GetFieldNodesByField() map[string]*FieldNodeMap {
	if x != nil {
		return x.FieldNodesByField
	}
	return nil
}

func (x *StitchingInfo) GetMergedTypes() map[string]*MergedTypeConfig {
	if x != nil {
		return x.MergedTypes
	}
	return nil
}

func (x *StitchingInfo) GetSubschemaNameToSubschemaConfig() map[string]*StitchingInfo_SubschemaConfig {
	if x != nil {
		return x.SubschemaNameToSubschemaConfig
	}
	return nil
}

// Config for the stitching resolver
type StitchingResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each query field comes from a specific subschema,
	// this is the name of the subschema that the query field comes from.
	SubschemaName string `protobuf:"bytes,1,opt,name=subschema_name,json=subschemaName,proto3" json:"subschema_name,omitempty"`
}

func (x *StitchingResolver) Reset() {
	*x = StitchingResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StitchingResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchingResolver) ProtoMessage() {}

func (x *StitchingResolver) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchingResolver.ProtoReflect.Descriptor instead.
func (*StitchingResolver) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{11}
}

func (x *StitchingResolver) GetSubschemaName() string {
	if x != nil {
		return x.SubschemaName
	}
	return ""
}

type GraphQLToolsStitchingInput_Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the subschema, arbitrary name but must be unique in a gateway schema.
	// generally generated from the graphql schema ref
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// GraphQL schema SDL for the subschema
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// Type merge config that the graphql-tools stitching script
	// needs to generate stitching info for the data plane
	TypeMergeConfig map[string]*GraphQLToolsStitchingInput_Schema_TypeMergeConfig `protobuf:"bytes,3,rep,name=type_merge_config,json=typeMergeConfig,proto3" json:"type_merge_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GraphQLToolsStitchingInput_Schema) Reset() {
	*x = GraphQLToolsStitchingInput_Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLToolsStitchingInput_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLToolsStitchingInput_Schema) ProtoMessage() {}

func (x *GraphQLToolsStitchingInput_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLToolsStitchingInput_Schema.ProtoReflect.Descriptor instead.
func (*GraphQLToolsStitchingInput_Schema) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GraphQLToolsStitchingInput_Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema) GetTypeMergeConfig() map[string]*GraphQLToolsStitchingInput_Schema_TypeMergeConfig {
	if x != nil {
		return x.TypeMergeConfig
	}
	return nil
}

type GraphQLToolsStitchingInput_Schema_TypeMergeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionSet string            `protobuf:"bytes,1,opt,name=selection_set,json=selectionSet,proto3" json:"selection_set,omitempty"`
	FieldName    string            `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Args         map[string]string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) Reset() {
	*x = GraphQLToolsStitchingInput_Schema_TypeMergeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLToolsStitchingInput_Schema_TypeMergeConfig) ProtoMessage() {}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLToolsStitchingInput_Schema_TypeMergeConfig.ProtoReflect.Descriptor instead.
func (*GraphQLToolsStitchingInput_Schema_TypeMergeConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) GetSelectionSet() string {
	if x != nil {
		return x.SelectionSet
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

type StitchingInfo_SubschemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutableSchema *ExecutableSchema `protobuf:"bytes,1,opt,name=executable_schema,json=executableSchema,proto3" json:"executable_schema,omitempty"`
}

func (x *StitchingInfo_SubschemaConfig) Reset() {
	*x = StitchingInfo_SubschemaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StitchingInfo_SubschemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchingInfo_SubschemaConfig) ProtoMessage() {}

func (x *StitchingInfo_SubschemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchingInfo_SubschemaConfig.ProtoReflect.Descriptor instead.
func (*StitchingInfo_SubschemaConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StitchingInfo_SubschemaConfig) GetExecutableSchema() *ExecutableSchema {
	if x != nil {
		return x.ExecutableSchema
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2f, 0x73, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe5, 0x05, 0x0a, 0x1a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c,
	0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x65, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c,
	0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x1a, 0xdf, 0x04, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x86, 0x01,
	0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x83, 0x02, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x99, 0x01, 0x0a,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x6b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x06, 0x0a, 0x1b, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x73,
	0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x73, 0x0a, 0x0c, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c,
	0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x73, 0x0a, 0x15, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x16,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x09, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x51, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a,
	0x68, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a,
	0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x22, 0x53, 0x0a, 0x07, 0x41, 0x72, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xb5, 0x0a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x24, 0x6e, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1f, 0x6e, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x9b,
	0x01, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x40, 0x0a, 0x12,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e,
	0x0a, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7f,
	0x0a, 0x24, 0x4e, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x7b, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x80, 0x01, 0x0a,
	0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfe, 0x08, 0x0a, 0x0d, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x76, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x22,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x75, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x62, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x73, 0x0a, 0x15, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x16, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x94, 0x01, 0x0a, 0x23, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3a, 0x0a, 0x11, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0xad, 0x01, 0x0a,
	0x31, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e,
	0x76, 0x32, 0x42, 0x15, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescData = file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDesc
)

func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_goTypes = []interface{}{
	(*GraphQLToolsStitchingInput)(nil),        // 0: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput
	(*GraphQlToolsStitchingOutput)(nil),       // 1: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput
	(*FieldNode)(nil),                         // 2: envoy.config.resolver.stitching.v2.FieldNode
	(*FieldNodeMap)(nil),                      // 3: envoy.config.resolver.stitching.v2.FieldNodeMap
	(*FieldNodes)(nil),                        // 4: envoy.config.resolver.stitching.v2.FieldNodes
	(*ResolverConfig)(nil),                    // 5: envoy.config.resolver.stitching.v2.ResolverConfig
	(*Schemas)(nil),                           // 6: envoy.config.resolver.stitching.v2.Schemas
	(*ArgPath)(nil),                           // 7: envoy.config.resolver.stitching.v2.ArgPath
	(*ResolverInfo)(nil),                      // 8: envoy.config.resolver.stitching.v2.ResolverInfo
	(*MergedTypeConfig)(nil),                  // 9: envoy.config.resolver.stitching.v2.MergedTypeConfig
	(*StitchingInfo)(nil),                     // 10: envoy.config.resolver.stitching.v2.StitchingInfo
	(*StitchingResolver)(nil),                 // 11: envoy.config.resolver.stitching.v2.StitchingResolver
	(*GraphQLToolsStitchingInput_Schema)(nil), // 12: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema
	(*GraphQLToolsStitchingInput_Schema_TypeMergeConfig)(nil), // 13: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfig
	nil,                                   // 14: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfigEntry
	nil,                                   // 15: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.ArgsEntry
	nil,                                   // 16: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.FieldNodesByTypeEntry
	nil,                                   // 17: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.FieldNodesByFieldEntry
	nil,                                   // 18: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.MergedTypesEntry
	nil,                                   // 19: envoy.config.resolver.stitching.v2.FieldNodeMap.NodesEntry
	nil,                                   // 20: envoy.config.resolver.stitching.v2.MergedTypeConfig.SelectionSetsEntry
	nil,                                   // 21: envoy.config.resolver.stitching.v2.MergedTypeConfig.UniqueFieldsToSubschemaNameEntry
	nil,                                   // 22: envoy.config.resolver.stitching.v2.MergedTypeConfig.NonUniqueFieldsToSubschemaNamesEntry
	nil,                                   // 23: envoy.config.resolver.stitching.v2.MergedTypeConfig.DeclarativeTargetSubschemasEntry
	nil,                                   // 24: envoy.config.resolver.stitching.v2.MergedTypeConfig.SubschemaNameToResolverInfoEntry
	(*StitchingInfo_SubschemaConfig)(nil), // 25: envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig
	nil,                                   // 26: envoy.config.resolver.stitching.v2.StitchingInfo.FieldNodesByTypeEntry
	nil,                                   // 27: envoy.config.resolver.stitching.v2.StitchingInfo.FieldNodesByFieldEntry
	nil,                                   // 28: envoy.config.resolver.stitching.v2.StitchingInfo.MergedTypesEntry
	nil,                                   // 29: envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaNameToSubschemaConfigEntry
	(*ExecutableSchema)(nil),              // 30: envoy.config.filter.http.graphql.v2.ExecutableSchema
}
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_depIdxs = []int32{
	12, // 0: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.subschemas:type_name -> envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema
	16, // 1: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.field_nodes_by_type:type_name -> envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.FieldNodesByTypeEntry
	17, // 2: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.field_nodes_by_field:type_name -> envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.FieldNodesByFieldEntry
	18, // 3: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.merged_types:type_name -> envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.MergedTypesEntry
	19, // 4: envoy.config.resolver.stitching.v2.FieldNodeMap.nodes:type_name -> envoy.config.resolver.stitching.v2.FieldNodeMap.NodesEntry
	2,  // 5: envoy.config.resolver.stitching.v2.FieldNodes.field_nodes:type_name -> envoy.config.resolver.stitching.v2.FieldNode
	7,  // 6: envoy.config.resolver.stitching.v2.ResolverInfo.args:type_name -> envoy.config.resolver.stitching.v2.ArgPath
	20, // 7: envoy.config.resolver.stitching.v2.MergedTypeConfig.selection_sets:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig.SelectionSetsEntry
	21, // 8: envoy.config.resolver.stitching.v2.MergedTypeConfig.unique_fields_to_subschema_name:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig.UniqueFieldsToSubschemaNameEntry
	22, // 9: envoy.config.resolver.stitching.v2.MergedTypeConfig.non_unique_fields_to_subschema_names:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig.NonUniqueFieldsToSubschemaNamesEntry
	23, // 10: envoy.config.resolver.stitching.v2.MergedTypeConfig.declarative_target_subschemas:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig.DeclarativeTargetSubschemasEntry
	24, // 11: envoy.config.resolver.stitching.v2.MergedTypeConfig.subschema_name_to_resolver_info:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig.SubschemaNameToResolverInfoEntry
	26, // 12: envoy.config.resolver.stitching.v2.StitchingInfo.field_nodes_by_type:type_name -> envoy.config.resolver.stitching.v2.StitchingInfo.FieldNodesByTypeEntry
	27, // 13: envoy.config.resolver.stitching.v2.StitchingInfo.field_nodes_by_field:type_name -> envoy.config.resolver.stitching.v2.StitchingInfo.FieldNodesByFieldEntry
	28, // 14: envoy.config.resolver.stitching.v2.StitchingInfo.merged_types:type_name -> envoy.config.resolver.stitching.v2.StitchingInfo.MergedTypesEntry
	29, // 15: envoy.config.resolver.stitching.v2.StitchingInfo.subschema_name_to_subschema_config:type_name -> envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaNameToSubschemaConfigEntry
	14, // 16: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.type_merge_config:type_name -> envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfigEntry
	15, // 17: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.args:type_name -> envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.ArgsEntry
	13, // 18: envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfigEntry.value:type_name -> envoy.config.resolver.stitching.v2.GraphQLToolsStitchingInput.Schema.TypeMergeConfig
	4,  // 19: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.FieldNodesByTypeEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodes
	3,  // 20: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.FieldNodesByFieldEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodeMap
	9,  // 21: envoy.config.resolver.stitching.v2.GraphQlToolsStitchingOutput.MergedTypesEntry.value:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig
	4,  // 22: envoy.config.resolver.stitching.v2.FieldNodeMap.NodesEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodes
	6,  // 23: envoy.config.resolver.stitching.v2.MergedTypeConfig.NonUniqueFieldsToSubschemaNamesEntry.value:type_name -> envoy.config.resolver.stitching.v2.Schemas
	6,  // 24: envoy.config.resolver.stitching.v2.MergedTypeConfig.DeclarativeTargetSubschemasEntry.value:type_name -> envoy.config.resolver.stitching.v2.Schemas
	8,  // 25: envoy.config.resolver.stitching.v2.MergedTypeConfig.SubschemaNameToResolverInfoEntry.value:type_name -> envoy.config.resolver.stitching.v2.ResolverInfo
	30, // 26: envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.executable_schema:type_name -> envoy.config.filter.http.graphql.v2.ExecutableSchema
	4,  // 27: envoy.config.resolver.stitching.v2.StitchingInfo.FieldNodesByTypeEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodes
	3,  // 28: envoy.config.resolver.stitching.v2.StitchingInfo.FieldNodesByFieldEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodeMap
	9,  // 29: envoy.config.resolver.stitching.v2.StitchingInfo.MergedTypesEntry.value:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig
	25, // 30: envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaNameToSubschemaConfigEntry.value:type_name -> envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_graphql_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLToolsStitchingInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQlToolsStitchingOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldNodeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schemas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedTypeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StitchingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StitchingResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLToolsStitchingInput_Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLToolsStitchingInput_Schema_TypeMergeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StitchingInfo_SubschemaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_rawDesc = nil
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_graphql_stitching_proto_depIdxs = nil
}

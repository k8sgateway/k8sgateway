// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/opentelemetry.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *OpenTelemetryConfig) Clone() proto.Message {
	var target *OpenTelemetryConfig
	if m == nil {
		return target
	}
	target = &OpenTelemetryConfig{}

	if h, ok := interface{}(m.GetServiceNameSource()).(clone.Cloner); ok {
		target.ServiceNameSource = h.Clone().(*OpenTelemetryConfig_ServiceNameSource)
	} else {
		target.ServiceNameSource = proto.Clone(m.GetServiceNameSource()).(*OpenTelemetryConfig_ServiceNameSource)
	}

	switch m.CollectorCluster.(type) {

	case *OpenTelemetryConfig_CollectorUpstreamRef:

		if h, ok := interface{}(m.GetCollectorUpstreamRef()).(clone.Cloner); ok {
			target.CollectorCluster = &OpenTelemetryConfig_CollectorUpstreamRef{
				CollectorUpstreamRef: h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		} else {
			target.CollectorCluster = &OpenTelemetryConfig_CollectorUpstreamRef{
				CollectorUpstreamRef: proto.Clone(m.GetCollectorUpstreamRef()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		}

	case *OpenTelemetryConfig_ClusterName:

		target.CollectorCluster = &OpenTelemetryConfig_ClusterName{
			ClusterName: m.GetClusterName(),
		}

	}

	return target
}

// Clone function
func (m *OpenTelemetryConfig_ServiceNameSource) Clone() proto.Message {
	var target *OpenTelemetryConfig_ServiceNameSource
	if m == nil {
		return target
	}
	target = &OpenTelemetryConfig_ServiceNameSource{}

	switch m.SourceType.(type) {

	case *OpenTelemetryConfig_ServiceNameSource_GatewayName:

		if h, ok := interface{}(m.GetGatewayName()).(clone.Cloner); ok {
			target.SourceType = &OpenTelemetryConfig_ServiceNameSource_GatewayName{
				GatewayName: h.Clone().(*OpenTelemetryConfig_ServiceNameSource_GatewayServiceNameSource),
			}
		} else {
			target.SourceType = &OpenTelemetryConfig_ServiceNameSource_GatewayName{
				GatewayName: proto.Clone(m.GetGatewayName()).(*OpenTelemetryConfig_ServiceNameSource_GatewayServiceNameSource),
			}
		}

	}

	return target
}

// Clone function
func (m *OpenTelemetryConfig_ServiceNameSource_GatewayServiceNameSource) Clone() proto.Message {
	var target *OpenTelemetryConfig_ServiceNameSource_GatewayServiceNameSource
	if m == nil {
		return target
	}
	target = &OpenTelemetryConfig_ServiceNameSource_GatewayServiceNameSource{}

	return target
}

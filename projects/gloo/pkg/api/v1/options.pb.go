// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v2 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/filter/http/gzip/v2"
	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/buffer/v3"
	proxylatency "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/proxylatency"
	transformation "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/transformation"
	dlp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/dlp"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"
	jwt "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwt"
	ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit"
	rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbac"
	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/waf"
	als "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/als"
	aws "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/aws"
	azure "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/azure"
	cors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/cors"
	faultinjection "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/faultinjection"
	grpc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc"
	grpc_web "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc_web"
	hcm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/hcm"
	headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/headers"
	healthcheck "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/healthcheck"
	lbhash "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/lbhash"
	protocol_upgrade "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol_upgrade"
	rest "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/rest"
	retries "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/retries"
	shadowing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/shadowing"
	stats "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/stats"
	tcp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tcp"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracing"
	wasm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/wasm"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Optional, feature-specific configuration that lives on gateways.
// Each ListenerOption object contains configuration for a specific feature.
// Note to developers: new Listener plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type ListenerOptions struct {
	AccessLoggingService *als.AccessLoggingService `protobuf:"bytes,1,opt,name=access_logging_service,json=accessLoggingService,proto3" json:"access_logging_service,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,2,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Soft limit on size of the listener's new connection read and write buffers. If unspecified, defaults to 1MiB
	// For more info, check out the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v2/api/v2/listener.proto)
	PerConnectionBufferLimitBytes *types.UInt32Value `protobuf:"bytes,3,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}           `json:"-"`
	XXX_unrecognized              []byte             `json:"-"`
	XXX_sizecache                 int32              `json:"-"`
}

func (m *ListenerOptions) Reset()         { *m = ListenerOptions{} }
func (m *ListenerOptions) String() string { return proto.CompactTextString(m) }
func (*ListenerOptions) ProtoMessage()    {}
func (*ListenerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{0}
}
func (m *ListenerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenerOptions.Unmarshal(m, b)
}
func (m *ListenerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenerOptions.Marshal(b, m, deterministic)
}
func (m *ListenerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerOptions.Merge(m, src)
}
func (m *ListenerOptions) XXX_Size() int {
	return xxx_messageInfo_ListenerOptions.Size(m)
}
func (m *ListenerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerOptions proto.InternalMessageInfo

func (m *ListenerOptions) GetAccessLoggingService() *als.AccessLoggingService {
	if m != nil {
		return m.AccessLoggingService
	}
	return nil
}

func (m *ListenerOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *ListenerOptions) GetPerConnectionBufferLimitBytes() *types.UInt32Value {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return nil
}

// Optional, feature-specific configuration that lives on http listeners
type HttpListenerOptions struct {
	GrpcWeb                       *grpc_web.GrpcWeb                  `protobuf:"bytes,1,opt,name=grpc_web,json=grpcWeb,proto3" json:"grpc_web,omitempty"`
	HttpConnectionManagerSettings *hcm.HttpConnectionManagerSettings `protobuf:"bytes,2,opt,name=http_connection_manager_settings,json=httpConnectionManagerSettings,proto3" json:"http_connection_manager_settings,omitempty"`
	// enable [Envoy health checks](https://www.envoyproxy.io/docs/envoy/v1.7.0/api-v2/config/filter/http/health_check/v2/health_check.proto) on this listener
	HealthCheck *healthcheck.HealthCheck `protobuf:"bytes,4,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,5,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.FilterConfig `protobuf:"bytes,6,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// Wasm filter config [very-experimental!]
	// Currently these extensions will only work if Gloo deployed using the helm flag, wasm.enabled=true
	// These require a special nightly version of envoy which is not deployed by default
	Wasm *wasm.PluginSource `protobuf:"bytes,7,opt,name=wasm,proto3" json:"wasm,omitempty"`
	// Enterprise-only: External auth related settings
	Extauth *v1.Settings `protobuf:"bytes,10,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Settings for the rate limiting server itself
	RatelimitServer *ratelimit.Settings `protobuf:"bytes,11,opt,name=ratelimit_server,json=ratelimitServer,proto3" json:"ratelimit_server,omitempty"`
	// Gzip is an HTTP option which enables Gloo to compress
	// data returned from an upstream service upon client request.
	// Compression is useful in situations where large payloads need to be transmitted without compromising the response time.
	// Example:
	// ```
	// gzip:
	//  contentType:
	//  - "application/json"
	//  compressionLevel: BEST
	// ```
	Gzip *v2.Gzip `protobuf:"bytes,8,opt,name=gzip,proto3" json:"gzip,omitempty"`
	// Enterprise-only: Proxy latency
	ProxyLatency *proxylatency.ProxyLatency `protobuf:"bytes,9,opt,name=proxy_latency,json=proxyLatency,proto3" json:"proxy_latency,omitempty"`
	// Buffer can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	Buffer               *v3.Buffer `protobuf:"bytes,12,opt,name=buffer,proto3" json:"buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HttpListenerOptions) Reset()         { *m = HttpListenerOptions{} }
func (m *HttpListenerOptions) String() string { return proto.CompactTextString(m) }
func (*HttpListenerOptions) ProtoMessage()    {}
func (*HttpListenerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{1}
}
func (m *HttpListenerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpListenerOptions.Unmarshal(m, b)
}
func (m *HttpListenerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpListenerOptions.Marshal(b, m, deterministic)
}
func (m *HttpListenerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpListenerOptions.Merge(m, src)
}
func (m *HttpListenerOptions) XXX_Size() int {
	return xxx_messageInfo_HttpListenerOptions.Size(m)
}
func (m *HttpListenerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpListenerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HttpListenerOptions proto.InternalMessageInfo

func (m *HttpListenerOptions) GetGrpcWeb() *grpc_web.GrpcWeb {
	if m != nil {
		return m.GrpcWeb
	}
	return nil
}

func (m *HttpListenerOptions) GetHttpConnectionManagerSettings() *hcm.HttpConnectionManagerSettings {
	if m != nil {
		return m.HttpConnectionManagerSettings
	}
	return nil
}

func (m *HttpListenerOptions) GetHealthCheck() *healthcheck.HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *HttpListenerOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *HttpListenerOptions) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *HttpListenerOptions) GetDlp() *dlp.FilterConfig {
	if m != nil {
		return m.Dlp
	}
	return nil
}

func (m *HttpListenerOptions) GetWasm() *wasm.PluginSource {
	if m != nil {
		return m.Wasm
	}
	return nil
}

func (m *HttpListenerOptions) GetExtauth() *v1.Settings {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func (m *HttpListenerOptions) GetRatelimitServer() *ratelimit.Settings {
	if m != nil {
		return m.RatelimitServer
	}
	return nil
}

func (m *HttpListenerOptions) GetGzip() *v2.Gzip {
	if m != nil {
		return m.Gzip
	}
	return nil
}

func (m *HttpListenerOptions) GetProxyLatency() *proxylatency.ProxyLatency {
	if m != nil {
		return m.ProxyLatency
	}
	return nil
}

func (m *HttpListenerOptions) GetBuffer() *v3.Buffer {
	if m != nil {
		return m.Buffer
	}
	return nil
}

// Optional, feature-specific configuration that lives on tcp listeners
type TcpListenerOptions struct {
	TcpProxySettings     *tcp.TcpProxySettings `protobuf:"bytes,3,opt,name=tcp_proxy_settings,json=tcpProxySettings,proto3" json:"tcp_proxy_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TcpListenerOptions) Reset()         { *m = TcpListenerOptions{} }
func (m *TcpListenerOptions) String() string { return proto.CompactTextString(m) }
func (*TcpListenerOptions) ProtoMessage()    {}
func (*TcpListenerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{2}
}
func (m *TcpListenerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpListenerOptions.Unmarshal(m, b)
}
func (m *TcpListenerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpListenerOptions.Marshal(b, m, deterministic)
}
func (m *TcpListenerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpListenerOptions.Merge(m, src)
}
func (m *TcpListenerOptions) XXX_Size() int {
	return xxx_messageInfo_TcpListenerOptions.Size(m)
}
func (m *TcpListenerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpListenerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TcpListenerOptions proto.InternalMessageInfo

func (m *TcpListenerOptions) GetTcpProxySettings() *tcp.TcpProxySettings {
	if m != nil {
		return m.TcpProxySettings
	}
	return nil
}

// Optional, feature-specific configuration that lives on virtual hosts.
// Each VirtualHostPlugin object contains configuration for a specific feature.
// Note to developers: new Virtual Host plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type VirtualHostOptions struct {
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions          `protobuf:"bytes,1,opt,name=extensions,proto3" json:"extensions,omitempty"`
	Retries    *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	Stats      *stats.Stats         `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	// Append/Remove headers on Requests or Responses on all routes contained in this Virtual Host
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,2,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Defines a CORS policy for the virtual host
	// If a CORS policy is also defined on the route matched by the request, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,3,opt,name=cors,proto3" json:"cors,omitempty"`
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,4,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,6,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Types that are valid to be assigned to RateLimitConfigType:
	//	*VirtualHostOptions_Ratelimit
	//	*VirtualHostOptions_RateLimitConfigs
	RateLimitConfigType isVirtualHostOptions_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,8,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	Jwt *jwt.VhostExtension `protobuf:"bytes,9,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,11,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,12,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.Config `protobuf:"bytes,13,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute *v3.BufferPerRoute `protobuf:"bytes,14,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	// IncludeRequestAttemptCount decides whether the x-envoy-attempt-count header
	// should be included in the upstream request.
	// Setting this option will cause it to override any existing header value,
	// so in the case of two Envoys on the request path with this option enabled,
	// the upstream will see the attempt count as perceived by the second Envoy.
	// Defaults to false.
	IncludeRequestAttemptCount *types.BoolValue `protobuf:"bytes,15,opt,name=include_request_attempt_count,json=includeRequestAttemptCount,proto3" json:"include_request_attempt_count,omitempty"`
	// IncludeAttemptCountInResponse decides whether the x-envoy-attempt-count header
	// should be included in the downstream response.
	// Setting this option will cause the router to override any existing header value,
	// so in the case of two Envoys on the request path with this option enabled,
	// the downstream will see the attempt count as perceived by the Envoy closest upstream from itself.
	// Defaults to false.
	IncludeAttemptCountInResponse *types.BoolValue `protobuf:"bytes,16,opt,name=include_attempt_count_in_response,json=includeAttemptCountInResponse,proto3" json:"include_attempt_count_in_response,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}         `json:"-"`
	XXX_unrecognized              []byte           `json:"-"`
	XXX_sizecache                 int32            `json:"-"`
}

func (m *VirtualHostOptions) Reset()         { *m = VirtualHostOptions{} }
func (m *VirtualHostOptions) String() string { return proto.CompactTextString(m) }
func (*VirtualHostOptions) ProtoMessage()    {}
func (*VirtualHostOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{3}
}
func (m *VirtualHostOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualHostOptions.Unmarshal(m, b)
}
func (m *VirtualHostOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualHostOptions.Marshal(b, m, deterministic)
}
func (m *VirtualHostOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHostOptions.Merge(m, src)
}
func (m *VirtualHostOptions) XXX_Size() int {
	return xxx_messageInfo_VirtualHostOptions.Size(m)
}
func (m *VirtualHostOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHostOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHostOptions proto.InternalMessageInfo

type isVirtualHostOptions_RateLimitConfigType interface {
	isVirtualHostOptions_RateLimitConfigType()
	Equal(interface{}) bool
}

type VirtualHostOptions_Ratelimit struct {
	Ratelimit *ratelimit.RateLimitVhostExtension `protobuf:"bytes,70,opt,name=ratelimit,proto3,oneof" json:"ratelimit,omitempty"`
}
type VirtualHostOptions_RateLimitConfigs struct {
	RateLimitConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,71,opt,name=rate_limit_configs,json=rateLimitConfigs,proto3,oneof" json:"rate_limit_configs,omitempty"`
}

func (*VirtualHostOptions_Ratelimit) isVirtualHostOptions_RateLimitConfigType()        {}
func (*VirtualHostOptions_RateLimitConfigs) isVirtualHostOptions_RateLimitConfigType() {}

func (m *VirtualHostOptions) GetRateLimitConfigType() isVirtualHostOptions_RateLimitConfigType {
	if m != nil {
		return m.RateLimitConfigType
	}
	return nil
}

func (m *VirtualHostOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *VirtualHostOptions) GetRetries() *retries.RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *VirtualHostOptions) GetStats() *stats.Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VirtualHostOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *VirtualHostOptions) GetCors() *cors.CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *VirtualHostOptions) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *VirtualHostOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if m != nil {
		return m.RatelimitBasic
	}
	return nil
}

func (m *VirtualHostOptions) GetRatelimit() *ratelimit.RateLimitVhostExtension {
	if x, ok := m.GetRateLimitConfigType().(*VirtualHostOptions_Ratelimit); ok {
		return x.Ratelimit
	}
	return nil
}

func (m *VirtualHostOptions) GetRateLimitConfigs() *ratelimit.RateLimitConfigRefs {
	if x, ok := m.GetRateLimitConfigType().(*VirtualHostOptions_RateLimitConfigs); ok {
		return x.RateLimitConfigs
	}
	return nil
}

func (m *VirtualHostOptions) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *VirtualHostOptions) GetJwt() *jwt.VhostExtension {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *VirtualHostOptions) GetRbac() *rbac.ExtensionSettings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *VirtualHostOptions) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func (m *VirtualHostOptions) GetDlp() *dlp.Config {
	if m != nil {
		return m.Dlp
	}
	return nil
}

func (m *VirtualHostOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if m != nil {
		return m.BufferPerRoute
	}
	return nil
}

func (m *VirtualHostOptions) GetIncludeRequestAttemptCount() *types.BoolValue {
	if m != nil {
		return m.IncludeRequestAttemptCount
	}
	return nil
}

func (m *VirtualHostOptions) GetIncludeAttemptCountInResponse() *types.BoolValue {
	if m != nil {
		return m.IncludeAttemptCountInResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VirtualHostOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VirtualHostOptions_Ratelimit)(nil),
		(*VirtualHostOptions_RateLimitConfigs)(nil),
	}
}

// Optional, feature-specific configuration that lives on routes.
// Each RouteOption object contains configuration for a specific feature.
// Note to developers: new Route plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type RouteOptions struct {
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,1,opt,name=transformations,proto3" json:"transformations,omitempty"`
	Faults          *faultinjection.RouteFaults          `protobuf:"bytes,2,opt,name=faults,proto3" json:"faults,omitempty"`
	// For requests matched on this route, rewrite the HTTP request path to the provided value before forwarding upstream
	PrefixRewrite *types.StringValue `protobuf:"bytes,3,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	// Specifies the upstream timeout for the route. If not specified, the default is 15s. This spans between the point
	// at which the entire downstream request (i.e. end-of-stream) has been processed and when the upstream response has
	// been completely processed. A value of 0 will disable the route’s timeout.
	Timeout *time.Duration       `protobuf:"bytes,4,opt,name=timeout,proto3,stdduration" json:"timeout,omitempty"`
	Retries *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,6,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Defines route-specific tracing configuration.
	// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
	// See here for additional information about configuring tracing with Gloo: https://gloo.solo.io/observability/tracing/
	Tracing *tracing.RouteTracingSettings `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Specifies traffic shadowing configuration for the route.
	// See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
	Shadowing *shadowing.RouteShadowing `protobuf:"bytes,8,opt,name=shadowing,proto3" json:"shadowing,omitempty"`
	// Append/Remove headers on Requests or Responses on this Route
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,9,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// For requests matched on this route, rewrite the Host header before forwarding upstream
	//
	// Types that are valid to be assigned to HostRewriteType:
	//	*RouteOptions_HostRewrite
	//	*RouteOptions_AutoHostRewrite
	HostRewriteType isRouteOptions_HostRewriteType `protobuf_oneof:"host_rewrite_type"`
	// Defines a CORS policy for the route
	// If a CORS policy is also defined on the route's virtual host, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,11,opt,name=cors,proto3" json:"cors,omitempty"`
	// For routes served by a hashing load balancer, this defines the input to the hash key
	// Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
	// - route, upstream, virtual service
	LbHash *lbhash.RouteActionHashConfig `protobuf:"bytes,12,opt,name=lb_hash,json=lbHash,proto3" json:"lb_hash,omitempty"`
	// Route configuration for protocol upgrade requests.
	Upgrades []*protocol_upgrade.ProtocolUpgradeConfig `protobuf:"bytes,21,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,13,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Types that are valid to be assigned to RateLimitConfigType:
	//	*RouteOptions_Ratelimit
	//	*RouteOptions_RateLimitConfigs
	RateLimitConfigType isRouteOptions_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,15,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	Jwt *jwt.RouteExtension `protobuf:"bytes,16,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,17,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,18,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.Config `protobuf:"bytes,20,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute       *v3.BufferPerRoute `protobuf:"bytes,22,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RouteOptions) Reset()         { *m = RouteOptions{} }
func (m *RouteOptions) String() string { return proto.CompactTextString(m) }
func (*RouteOptions) ProtoMessage()    {}
func (*RouteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{4}
}
func (m *RouteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteOptions.Unmarshal(m, b)
}
func (m *RouteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteOptions.Marshal(b, m, deterministic)
}
func (m *RouteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteOptions.Merge(m, src)
}
func (m *RouteOptions) XXX_Size() int {
	return xxx_messageInfo_RouteOptions.Size(m)
}
func (m *RouteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RouteOptions proto.InternalMessageInfo

type isRouteOptions_HostRewriteType interface {
	isRouteOptions_HostRewriteType()
	Equal(interface{}) bool
}
type isRouteOptions_RateLimitConfigType interface {
	isRouteOptions_RateLimitConfigType()
	Equal(interface{}) bool
}

type RouteOptions_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,10,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type RouteOptions_AutoHostRewrite struct {
	AutoHostRewrite *types.BoolValue `protobuf:"bytes,19,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type RouteOptions_Ratelimit struct {
	Ratelimit *ratelimit.RateLimitRouteExtension `protobuf:"bytes,140,opt,name=ratelimit,proto3,oneof" json:"ratelimit,omitempty"`
}
type RouteOptions_RateLimitConfigs struct {
	RateLimitConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,141,opt,name=rate_limit_configs,json=rateLimitConfigs,proto3,oneof" json:"rate_limit_configs,omitempty"`
}

func (*RouteOptions_HostRewrite) isRouteOptions_HostRewriteType()          {}
func (*RouteOptions_AutoHostRewrite) isRouteOptions_HostRewriteType()      {}
func (*RouteOptions_Ratelimit) isRouteOptions_RateLimitConfigType()        {}
func (*RouteOptions_RateLimitConfigs) isRouteOptions_RateLimitConfigType() {}

func (m *RouteOptions) GetHostRewriteType() isRouteOptions_HostRewriteType {
	if m != nil {
		return m.HostRewriteType
	}
	return nil
}
func (m *RouteOptions) GetRateLimitConfigType() isRouteOptions_RateLimitConfigType {
	if m != nil {
		return m.RateLimitConfigType
	}
	return nil
}

func (m *RouteOptions) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *RouteOptions) GetFaults() *faultinjection.RouteFaults {
	if m != nil {
		return m.Faults
	}
	return nil
}

func (m *RouteOptions) GetPrefixRewrite() *types.StringValue {
	if m != nil {
		return m.PrefixRewrite
	}
	return nil
}

func (m *RouteOptions) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RouteOptions) GetRetries() *retries.RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *RouteOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *RouteOptions) GetTracing() *tracing.RouteTracingSettings {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *RouteOptions) GetShadowing() *shadowing.RouteShadowing {
	if m != nil {
		return m.Shadowing
	}
	return nil
}

func (m *RouteOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *RouteOptions) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteType().(*RouteOptions_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteOptions) GetAutoHostRewrite() *types.BoolValue {
	if x, ok := m.GetHostRewriteType().(*RouteOptions_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteOptions) GetCors() *cors.CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *RouteOptions) GetLbHash() *lbhash.RouteActionHashConfig {
	if m != nil {
		return m.LbHash
	}
	return nil
}

func (m *RouteOptions) GetUpgrades() []*protocol_upgrade.ProtocolUpgradeConfig {
	if m != nil {
		return m.Upgrades
	}
	return nil
}

func (m *RouteOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if m != nil {
		return m.RatelimitBasic
	}
	return nil
}

func (m *RouteOptions) GetRatelimit() *ratelimit.RateLimitRouteExtension {
	if x, ok := m.GetRateLimitConfigType().(*RouteOptions_Ratelimit); ok {
		return x.Ratelimit
	}
	return nil
}

func (m *RouteOptions) GetRateLimitConfigs() *ratelimit.RateLimitConfigRefs {
	if x, ok := m.GetRateLimitConfigType().(*RouteOptions_RateLimitConfigs); ok {
		return x.RateLimitConfigs
	}
	return nil
}

func (m *RouteOptions) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *RouteOptions) GetJwt() *jwt.RouteExtension {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *RouteOptions) GetRbac() *rbac.ExtensionSettings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *RouteOptions) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func (m *RouteOptions) GetDlp() *dlp.Config {
	if m != nil {
		return m.Dlp
	}
	return nil
}

func (m *RouteOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if m != nil {
		return m.BufferPerRoute
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteOptions_HostRewrite)(nil),
		(*RouteOptions_AutoHostRewrite)(nil),
		(*RouteOptions_Ratelimit)(nil),
		(*RouteOptions_RateLimitConfigs)(nil),
	}
}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
type DestinationSpec struct {
	// Note to developers: new DestinationSpecs must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*DestinationSpec_Aws
	//	*DestinationSpec_Azure
	//	*DestinationSpec_Rest
	//	*DestinationSpec_Grpc
	DestinationType      isDestinationSpec_DestinationType `protobuf_oneof:"destination_type"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DestinationSpec) Reset()         { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()    {}
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{5}
}
func (m *DestinationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSpec.Unmarshal(m, b)
}
func (m *DestinationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSpec.Marshal(b, m, deterministic)
}
func (m *DestinationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSpec.Merge(m, src)
}
func (m *DestinationSpec) XXX_Size() int {
	return xxx_messageInfo_DestinationSpec.Size(m)
}
func (m *DestinationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSpec proto.InternalMessageInfo

type isDestinationSpec_DestinationType interface {
	isDestinationSpec_DestinationType()
	Equal(interface{}) bool
}

type DestinationSpec_Aws struct {
	Aws *aws.DestinationSpec `protobuf:"bytes,1,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type DestinationSpec_Azure struct {
	Azure *azure.DestinationSpec `protobuf:"bytes,2,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type DestinationSpec_Rest struct {
	Rest *rest.DestinationSpec `protobuf:"bytes,3,opt,name=rest,proto3,oneof" json:"rest,omitempty"`
}
type DestinationSpec_Grpc struct {
	Grpc *grpc.DestinationSpec `protobuf:"bytes,4,opt,name=grpc,proto3,oneof" json:"grpc,omitempty"`
}

func (*DestinationSpec_Aws) isDestinationSpec_DestinationType()   {}
func (*DestinationSpec_Azure) isDestinationSpec_DestinationType() {}
func (*DestinationSpec_Rest) isDestinationSpec_DestinationType()  {}
func (*DestinationSpec_Grpc) isDestinationSpec_DestinationType()  {}

func (m *DestinationSpec) GetDestinationType() isDestinationSpec_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *DestinationSpec) GetAws() *aws.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *DestinationSpec) GetAzure() *azure.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *DestinationSpec) GetRest() *rest.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Rest); ok {
		return x.Rest
	}
	return nil
}

func (m *DestinationSpec) GetGrpc() *grpc.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Grpc); ok {
		return x.Grpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DestinationSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DestinationSpec_Aws)(nil),
		(*DestinationSpec_Azure)(nil),
		(*DestinationSpec_Rest)(nil),
		(*DestinationSpec_Grpc)(nil),
	}
}

// Optional, feature-specific configuration that is applied when a specific weighted destination
// is selected for routing.
type WeightedDestinationOptions struct {
	// Append/Remove headers on Requests or Responses to/from this Weighted Destination
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,1,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,2,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,4,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute       *v3.BufferPerRoute `protobuf:"bytes,5,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WeightedDestinationOptions) Reset()         { *m = WeightedDestinationOptions{} }
func (m *WeightedDestinationOptions) String() string { return proto.CompactTextString(m) }
func (*WeightedDestinationOptions) ProtoMessage()    {}
func (*WeightedDestinationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{6}
}
func (m *WeightedDestinationOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightedDestinationOptions.Unmarshal(m, b)
}
func (m *WeightedDestinationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightedDestinationOptions.Marshal(b, m, deterministic)
}
func (m *WeightedDestinationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedDestinationOptions.Merge(m, src)
}
func (m *WeightedDestinationOptions) XXX_Size() int {
	return xxx_messageInfo_WeightedDestinationOptions.Size(m)
}
func (m *WeightedDestinationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedDestinationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedDestinationOptions proto.InternalMessageInfo

func (m *WeightedDestinationOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *WeightedDestinationOptions) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *WeightedDestinationOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *WeightedDestinationOptions) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func (m *WeightedDestinationOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if m != nil {
		return m.BufferPerRoute
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenerOptions)(nil), "gloo.solo.io.ListenerOptions")
	proto.RegisterType((*HttpListenerOptions)(nil), "gloo.solo.io.HttpListenerOptions")
	proto.RegisterType((*TcpListenerOptions)(nil), "gloo.solo.io.TcpListenerOptions")
	proto.RegisterType((*VirtualHostOptions)(nil), "gloo.solo.io.VirtualHostOptions")
	proto.RegisterType((*RouteOptions)(nil), "gloo.solo.io.RouteOptions")
	proto.RegisterType((*DestinationSpec)(nil), "gloo.solo.io.DestinationSpec")
	proto.RegisterType((*WeightedDestinationOptions)(nil), "gloo.solo.io.WeightedDestinationOptions")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/options.proto", fileDescriptor_94dcee4f7557dfdc)
}

var fileDescriptor_94dcee4f7557dfdc = []byte{
	// 1924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4d, 0x73, 0xdc, 0x48,
	0x19, 0xf6, 0xc4, 0x8e, 0x1d, 0xb7, 0xed, 0xd8, 0xe9, 0x84, 0x94, 0x70, 0x6d, 0x96, 0xc4, 0x14,
	0x6c, 0x36, 0xb0, 0x3d, 0xd9, 0x31, 0x90, 0x8d, 0xb3, 0xd4, 0x62, 0x7b, 0x93, 0x4c, 0x6a, 0xbd,
	0x85, 0x4b, 0xf6, 0x26, 0x01, 0x8a, 0x52, 0xf5, 0x68, 0x7a, 0xa4, 0xce, 0x6a, 0xd4, 0xa2, 0xbb,
	0x35, 0x63, 0xe7, 0xc4, 0x91, 0x03, 0xdc, 0xe1, 0x1f, 0x70, 0xe1, 0x4e, 0x15, 0x7f, 0x81, 0x13,
	0x7f, 0x80, 0x2a, 0xfe, 0x03, 0xf7, 0xad, 0xfe, 0xd0, 0xc7, 0x78, 0x34, 0x19, 0x8d, 0x33, 0x07,
	0x69, 0xd4, 0x52, 0x3f, 0x4f, 0x7f, 0xa8, 0xdf, 0xe7, 0x79, 0xd5, 0x03, 0xf6, 0x02, 0x2a, 0xc3,
	0xb4, 0x83, 0x7c, 0xd6, 0x6f, 0x0a, 0x16, 0xb1, 0x4f, 0x28, 0x6b, 0x06, 0x11, 0x63, 0xcd, 0x84,
	0xb3, 0x37, 0xc4, 0x97, 0xc2, 0x94, 0x70, 0x42, 0x9b, 0x83, 0x4f, 0x9b, 0x2c, 0x91, 0x94, 0xc5,
	0x02, 0x25, 0x9c, 0x49, 0x06, 0xd7, 0xd5, 0x23, 0xa4, 0x50, 0x88, 0xb2, 0xed, 0x0f, 0x02, 0xc6,
	0x82, 0x88, 0x34, 0xf5, 0xb3, 0x4e, 0xda, 0x6b, 0x0a, 0xc9, 0x53, 0x5f, 0x9a, 0xba, 0xdb, 0xb7,
	0x02, 0x16, 0x30, 0x7d, 0xd9, 0x54, 0x57, 0xf6, 0x2e, 0x24, 0x67, 0xd2, 0xdc, 0x24, 0x67, 0x59,
	0xcd, 0x07, 0x93, 0x9b, 0x27, 0x67, 0x92, 0xc4, 0xa2, 0xe8, 0xc1, 0xf6, 0xa7, 0x53, 0xbb, 0xda,
	0xf4, 0x19, 0x37, 0xa7, 0xfa, 0x10, 0x4e, 0x84, 0xd4, 0xa7, 0xfa, 0x90, 0x80, 0x27, 0xbe, 0x3e,
	0x59, 0xc8, 0xf4, 0x39, 0x6c, 0xe2, 0x48, 0x1f, 0x16, 0xf0, 0xb8, 0x5e, 0x1b, 0xde, 0x90, 0x74,
	0xf2, 0x8b, 0xfa, 0x6d, 0x85, 0x7e, 0x5f, 0x1d, 0x16, 0xf0, 0xf3, 0xe9, 0x80, 0xa8, 0x13, 0x62,
	0x11, 0xda, 0x1f, 0x0b, 0x7b, 0x32, 0x1d, 0x26, 0x42, 0xdc, 0x65, 0x43, 0x1a, 0x07, 0xc5, 0x55,
	0xfd, 0x4e, 0x4a, 0x3f, 0x51, 0x87, 0x05, 0x3c, 0xaa, 0x01, 0xe0, 0xd8, 0x57, 0x6d, 0xd9, 0xdf,
	0xfa, 0x40, 0x4e, 0x24, 0xa7, 0x24, 0xff, 0xb5, 0xc0, 0xdd, 0x1a, 0xe3, 0x93, 0x58, 0xda, 0xb3,
	0x05, 0x7d, 0x3e, 0x1d, 0xd4, 0xc3, 0x69, 0x24, 0x69, 0xac, 0x2a, 0x50, 0x16, 0x9b, 0x62, 0xfd,
	0xbe, 0x86, 0x04, 0x77, 0x09, 0xcf, 0x7f, 0x67, 0x58, 0x5f, 0x43, 0x7d, 0xd4, 0x5f, 0xc3, 0x43,
	0x2c, 0xfa, 0xfa, 0x54, 0x7f, 0x3e, 0xf0, 0xdb, 0x94, 0x13, 0x73, 0xb6, 0xa0, 0x2f, 0x6a, 0x8d,
	0x28, 0x92, 0xa1, 0x1f, 0x12, 0xff, 0xdb, 0xf2, 0xb5, 0x25, 0x78, 0x31, 0x9d, 0x40, 0x57, 0xf4,
	0x59, 0xe4, 0xa5, 0x49, 0xc0, 0x71, 0x97, 0x8c, 0xdd, 0xb0, 0x54, 0xa7, 0x13, 0xa8, 0x94, 0x8c,
	0xf0, 0x18, 0x47, 0x4d, 0x12, 0x0f, 0xd8, 0x79, 0x49, 0x55, 0xd4, 0x4a, 0x8a, 0x45, 0x8f, 0xf1,
	0x3e, 0xd6, 0xaf, 0x6a, 0xb4, 0x68, 0x59, 0x8f, 0x67, 0x66, 0x4d, 0x38, 0x3b, 0x3b, 0x8f, 0xb0,
	0x24, 0xb1, 0x7f, 0x3e, 0x52, 0xb8, 0x74, 0x3f, 0x7b, 0x34, 0x92, 0x7a, 0x51, 0x48, 0x99, 0x34,
	0x3b, 0x69, 0xaf, 0x47, 0x78, 0x73, 0xb0, 0x6b, 0xaf, 0x2c, 0xeb, 0x57, 0xf5, 0x58, 0x7d, 0x16,
	0xf7, 0x68, 0x60, 0x19, 0x0d, 0x61, 0xf0, 0x96, 0x26, 0xcd, 0x41, 0x4b, 0xff, 0x5a, 0xb2, 0xa7,
	0xef, 0x10, 0xe5, 0x58, 0x12, 0x9e, 0x70, 0x2a, 0x48, 0xfe, 0x82, 0xc8, 0x99, 0xc4, 0xa9, 0x0c,
	0xad, 0x64, 0xab, 0x4b, 0x4b, 0xb3, 0x37, 0x13, 0xcd, 0x9b, 0xa1, 0x54, 0x87, 0xc5, 0x3e, 0x9b,
	0x09, 0xcb, 0xb1, 0x24, 0x11, 0xed, 0x53, 0x59, 0x5c, 0x4d, 0x8f, 0xd8, 0x2a, 0x9e, 0x0e, 0xf6,
	0xf5, 0xe9, 0x52, 0x23, 0x18, 0xe2, 0x9e, 0x3a, 0x2e, 0x85, 0xed, 0x46, 0x89, 0x3a, 0x2c, 0xf6,
	0xc3, 0x8b, 0xee, 0xda, 0x4d, 0x79, 0x79, 0x55, 0x8e, 0x3d, 0x1f, 0x72, 0x9c, 0x24, 0xb9, 0x60,
	0xec, 0xfc, 0xed, 0x0a, 0xd8, 0x3c, 0xa2, 0x42, 0x92, 0x98, 0xf0, 0x5f, 0x9b, 0x16, 0x60, 0x17,
	0xdc, 0xc6, 0xbe, 0x4f, 0x84, 0xf0, 0x22, 0x16, 0x04, 0x34, 0x0e, 0x3c, 0x41, 0xf8, 0x80, 0xfa,
	0xc4, 0x69, 0xdc, 0x6d, 0xdc, 0x5f, 0x6b, 0x21, 0xa4, 0xfc, 0x29, 0xf3, 0xfc, 0xb2, 0xd9, 0xa3,
	0x7d, 0x8d, 0x3b, 0x32, 0xb0, 0x13, 0x83, 0x72, 0x6f, 0xe1, 0x8a, 0xbb, 0xf0, 0x33, 0x00, 0x8a,
	0x95, 0xeb, 0x5c, 0xd1, 0xcc, 0xce, 0x28, 0xdb, 0xd3, 0xfc, 0xb9, 0x5b, 0xaa, 0x0b, 0x7b, 0xe0,
	0x5e, 0x42, 0xb8, 0xe7, 0xb3, 0x38, 0x36, 0xda, 0xe9, 0x99, 0x05, 0xee, 0xe9, 0xd7, 0xe9, 0x75,
	0xce, 0x25, 0x11, 0xce, 0xa2, 0x26, 0xfc, 0x00, 0x99, 0xf1, 0xa3, 0x6c, 0xfc, 0xe8, 0x9b, 0x17,
	0xb1, 0xdc, 0x6d, 0xbd, 0xc4, 0x51, 0x4a, 0xdc, 0x3b, 0x09, 0xe1, 0x87, 0x39, 0xcb, 0x81, 0x26,
	0x39, 0x52, 0x1c, 0x07, 0x8a, 0x62, 0xe7, 0x4f, 0x2b, 0xe0, 0x66, 0x5b, 0xca, 0xe4, 0xe2, 0xfc,
	0xec, 0x83, 0x6b, 0x99, 0xd5, 0xda, 0x19, 0xf9, 0x31, 0xca, 0xbd, 0xb7, 0x72, 0x5a, 0x9e, 0xf3,
	0xc4, 0x7f, 0x45, 0x3a, 0xee, 0x4a, 0x60, 0x2e, 0xe0, 0x1f, 0x1b, 0xe0, 0xae, 0x8a, 0xa9, 0xf2,
	0x20, 0xfa, 0x38, 0xc6, 0x01, 0xe1, 0x9e, 0x20, 0x52, 0xd2, 0x38, 0xc8, 0xe6, 0xe4, 0x11, 0x52,
	0x0e, 0x5d, 0x49, 0xab, 0x3a, 0x57, 0xf4, 0xff, 0x6b, 0x83, 0x3f, 0xb1, 0x70, 0xf7, 0x4e, 0xf8,
	0xae, 0xc7, 0xf0, 0x18, 0xac, 0x1b, 0x95, 0xf5, 0xb4, 0xcc, 0x3a, 0x4b, 0xba, 0xb5, 0x4f, 0x50,
	0x59, 0x7a, 0xab, 0x5b, 0xd5, 0x15, 0x0e, 0x55, 0x05, 0x77, 0x2d, 0x2c, 0x0a, 0x17, 0xde, 0xe8,
	0xe2, 0x0c, 0x6f, 0xf4, 0x67, 0x60, 0x71, 0x88, 0x7b, 0xce, 0x55, 0x0d, 0xd9, 0x41, 0x2a, 0x34,
	0x2a, 0x9b, 0xce, 0xc7, 0xa6, 0xaa, 0xc3, 0xcf, 0xc0, 0x62, 0x37, 0x4a, 0x9c, 0x65, 0xfb, 0x0a,
	0x54, 0x50, 0x54, 0xa2, 0x9e, 0x69, 0x0d, 0x3b, 0xd4, 0x82, 0xe6, 0x2a, 0x08, 0x7c, 0x02, 0x96,
	0x94, 0xa1, 0x39, 0x2b, 0x1a, 0xfa, 0x11, 0xd2, 0xee, 0x56, 0x89, 0x3d, 0x8e, 0xd2, 0x80, 0xc6,
	0x27, 0x2c, 0xe5, 0x3e, 0x71, 0x35, 0x08, 0x3e, 0x01, 0x2b, 0x56, 0xbd, 0x1c, 0xa0, 0xf1, 0xf7,
	0x50, 0x11, 0xa6, 0x13, 0xfa, 0x9b, 0x21, 0xe0, 0x09, 0xd8, 0xca, 0x85, 0x47, 0x87, 0x15, 0xe1,
	0xce, 0x9a, 0x66, 0xb9, 0x8f, 0x0a, 0x45, 0x7a, 0xf7, 0xe0, 0x37, 0xf3, 0x8a, 0x27, 0x9a, 0x00,
	0xee, 0x81, 0x25, 0xa5, 0xc9, 0xce, 0x35, 0x3b, 0x13, 0x5a, 0xc1, 0x91, 0x51, 0x70, 0x64, 0x14,
	0x1c, 0xa9, 0xc5, 0x80, 0xb4, 0x72, 0x0f, 0x5a, 0xe8, 0xf9, 0x5b, 0x9a, 0xb8, 0x1a, 0x03, 0x7f,
	0x07, 0x36, 0xb4, 0xf5, 0x78, 0xd6, 0x7b, 0x9c, 0x55, 0x4d, 0xf2, 0x8b, 0xc9, 0x24, 0x23, 0x4e,
	0x35, 0x68, 0xa1, 0x63, 0x55, 0x3e, 0x32, 0x65, 0x77, 0x3d, 0x29, 0x95, 0xe0, 0x73, 0xb0, 0x6c,
	0x42, 0xd3, 0x59, 0xd7, 0xac, 0x4d, 0xcb, 0x5a, 0x4a, 0xd8, 0xad, 0x65, 0x19, 0x6a, 0x6b, 0x54,
	0x83, 0x5d, 0x64, 0x82, 0xd1, 0xb5, 0xf0, 0x9d, 0x18, 0xc0, 0x53, 0x7f, 0x2c, 0x10, 0x5f, 0x03,
	0x28, 0xfd, 0xc4, 0x33, 0xfd, 0xcf, 0xc3, 0xc6, 0x2c, 0xbc, 0x07, 0x48, 0xe5, 0x8c, 0x95, 0x13,
	0x79, 0xea, 0x27, 0xba, 0xcf, 0xf9, 0x84, 0x6e, 0xc9, 0x0b, 0x77, 0x76, 0xfe, 0x0d, 0x00, 0x7c,
	0x49, 0xb9, 0x4c, 0x71, 0xd4, 0x66, 0x42, 0x66, 0x0d, 0x8e, 0xae, 0xf0, 0xc6, 0x0c, 0x2b, 0xfc,
	0x10, 0xac, 0xd8, 0xac, 0xd2, 0xae, 0xf2, 0x8f, 0x51, 0x96, 0x65, 0x56, 0xf6, 0xd1, 0x25, 0x92,
	0x9f, 0x1f, 0xb3, 0x88, 0xfa, 0xe7, 0x6e, 0x86, 0x84, 0x8f, 0xc0, 0x55, 0x9d, 0x63, 0xe6, 0xeb,
	0xce, 0x64, 0x9c, 0xd5, 0xab, 0x45, 0x3d, 0x72, 0x4d, 0x7d, 0x88, 0xc1, 0x4d, 0x93, 0x27, 0x2a,
	0x91, 0xa1, 0x49, 0x1a, 0x69, 0x8b, 0xb0, 0x02, 0xf3, 0x10, 0x65, 0x39, 0xe4, 0xa4, 0x70, 0xef,
	0x12, 0xfe, 0x75, 0x09, 0xe7, 0xc2, 0x70, 0xec, 0x1e, 0x7c, 0x0c, 0x96, 0xd4, 0xd7, 0x94, 0x9d,
	0xfd, 0x1f, 0x21, 0xfd, 0x69, 0x55, 0x49, 0x78, 0xc8, 0xb8, 0xb0, 0x23, 0xd3, 0x10, 0xf8, 0x1a,
	0x6c, 0x8e, 0x66, 0x54, 0xc2, 0x8a, 0x11, 0xb2, 0xcb, 0x05, 0x27, 0x54, 0x2d, 0xb4, 0xf2, 0x22,
	0x74, 0x59, 0x2a, 0xc9, 0xe9, 0x28, 0xca, 0xbd, 0x48, 0x03, 0x7f, 0x03, 0x8a, 0x58, 0xf1, 0x3a,
	0x58, 0x50, 0xdf, 0xaa, 0xc5, 0xc3, 0x69, 0xc1, 0xf6, 0x22, 0x0e, 0x38, 0x11, 0xc2, 0xc5, 0x92,
	0x68, 0x47, 0x70, 0xaf, 0xe7, 0x80, 0x03, 0xc5, 0x03, 0x5f, 0x81, 0xd5, 0xfc, 0x8e, 0xf3, 0xcc,
	0x2a, 0xf5, 0x14, 0xd2, 0x9c, 0xed, 0x65, 0xc8, 0x84, 0xcc, 0x57, 0x4a, 0x7b, 0xc1, 0x2d, 0xb8,
	0xa0, 0x0f, 0xa0, 0x2a, 0x58, 0x33, 0x33, 0xf1, 0x27, 0x9c, 0xe7, 0xba, 0x85, 0xdd, 0xda, 0x2d,
	0x58, 0xb5, 0x23, 0x3d, 0xd1, 0x5e, 0x70, 0xb5, 0xe4, 0x94, 0x6e, 0xe7, 0x82, 0x7b, 0x6d, 0x36,
	0xc1, 0xdd, 0x03, 0x8b, 0x6f, 0x86, 0xd2, 0x2a, 0xc4, 0x7d, 0xa4, 0x72, 0xb0, 0x4a, 0xd4, 0xe8,
	0xf0, 0x5c, 0x05, 0x82, 0xbf, 0x02, 0x4b, 0x2a, 0x5d, 0xb2, 0x62, 0xf7, 0x53, 0xa4, 0x73, 0xa7,
	0x4a, 0x74, 0x0e, 0xcc, 0x1b, 0xd7, 0x48, 0x15, 0x42, 0x99, 0xee, 0xae, 0xdb, 0x10, 0x9a, 0xa4,
	0xbb, 0x4f, 0xcf, 0xe4, 0x7e, 0x2a, 0xc3, 0xa2, 0x0b, 0xb9, 0xfe, 0xb6, 0x8c, 0x67, 0x6c, 0x68,
	0x82, 0xbb, 0x93, 0x3d, 0xa3, 0xec, 0x16, 0x18, 0x6c, 0xd9, 0x04, 0x43, 0xa5, 0x1d, 0x5c, 0xad,
	0x3c, 0xe7, 0xba, 0x7d, 0xe3, 0xb3, 0xe9, 0xd9, 0x31, 0xe1, 0x7a, 0xe1, 0xba, 0xd7, 0x3b, 0x23,
	0x65, 0xf8, 0x7b, 0x70, 0x87, 0xc6, 0x7e, 0x94, 0x76, 0x89, 0xc7, 0xc9, 0x1f, 0x52, 0x22, 0xa4,
	0x87, 0xa5, 0x24, 0xfd, 0x44, 0xad, 0x80, 0x34, 0x96, 0xce, 0xa6, 0x6e, 0x6f, 0x7b, 0x2c, 0x9d,
	0x39, 0x60, 0x2c, 0x32, 0xc9, 0xcc, 0xb6, 0x25, 0x70, 0x0d, 0x7e, 0xdf, 0xc0, 0x0f, 0x15, 0x1a,
	0x76, 0xc1, 0xbd, 0x8c, 0x7e, 0x84, 0xd6, 0xa3, 0xb1, 0xc7, 0x89, 0x48, 0x58, 0x2c, 0x88, 0xb3,
	0x35, 0xb5, 0x89, 0xac, 0x8f, 0x65, 0xee, 0x17, 0xb1, 0x6b, 0x09, 0x0e, 0x1c, 0x70, 0x7b, 0x6c,
	0xe5, 0x7a, 0xf2, 0x3c, 0x21, 0x3b, 0xff, 0xd9, 0x00, 0xeb, 0x7a, 0xa0, 0x85, 0x72, 0x8f, 0x85,
	0x7c, 0x63, 0x3e, 0x21, 0xff, 0x05, 0x58, 0xd6, 0x5f, 0xd2, 0x59, 0xfa, 0xf4, 0x11, 0x32, 0x1f,
	0xd6, 0xd5, 0xe1, 0xa2, 0x28, 0x9f, 0xe9, 0xea, 0xae, 0x85, 0xc1, 0x43, 0x70, 0x3d, 0xe1, 0xa4,
	0x47, 0xcf, 0x3c, 0x4e, 0x86, 0x9c, 0x4a, 0x32, 0x31, 0x95, 0x3c, 0x91, 0x9c, 0xc6, 0x81, 0x99,
	0x9a, 0x0d, 0x83, 0x71, 0x0d, 0x04, 0x3e, 0x06, 0x2b, 0x92, 0xf6, 0x09, 0x4b, 0xa5, 0x95, 0xb2,
	0xef, 0x8f, 0xa1, 0xbf, 0xb4, 0x89, 0xfa, 0xc1, 0xd2, 0x5f, 0xff, 0xfb, 0x83, 0x86, 0x9b, 0xd5,
	0x9f, 0x8f, 0x53, 0x8c, 0x1a, 0xd5, 0xf2, 0x0c, 0x46, 0x75, 0x04, 0x56, 0xec, 0xbe, 0x89, 0xcd,
	0x8e, 0x5a, 0x28, 0xdb, 0x47, 0x99, 0x3c, 0x85, 0xa7, 0xa6, 0x46, 0x91, 0xee, 0x58, 0x08, 0x3c,
	0x02, 0xab, 0xf9, 0x8e, 0x8f, 0x55, 0x1b, 0x84, 0x8a, 0x3d, 0xa0, 0xc9, 0x8c, 0x27, 0x59, 0x1d,
	0xb7, 0x20, 0x98, 0x64, 0x63, 0xab, 0x73, 0xb4, 0xb1, 0x1f, 0x82, 0x75, 0x25, 0x5e, 0xf9, 0xbb,
	0x57, 0x4e, 0xbb, 0xda, 0x5e, 0x70, 0xd7, 0xd4, 0xdd, 0xec, 0xed, 0xb6, 0xc1, 0x0d, 0x9c, 0x4a,
	0xe6, 0x8d, 0xd4, 0xbc, 0x39, 0x2d, 0x7c, 0xda, 0x0b, 0xee, 0xa6, 0x82, 0xb5, 0x4b, 0x4c, 0x99,
	0x6b, 0xae, 0xcd, 0xee, 0x9a, 0x5f, 0x81, 0x95, 0xa8, 0xe3, 0x85, 0x58, 0x64, 0x72, 0xd8, 0x42,
	0x76, 0x5b, 0x6e, 0xf2, 0xac, 0xee, 0xeb, 0x2f, 0x81, 0x36, 0x16, 0xa1, 0xd5, 0xb7, 0xe5, 0xa8,
	0xa3, 0x4a, 0xf0, 0x35, 0xb8, 0x66, 0xf7, 0x48, 0x84, 0xf3, 0xbd, 0xbb, 0x8b, 0xf7, 0xd7, 0x5a,
	0x9f, 0xa3, 0xb1, 0xdd, 0x93, 0xea, 0x04, 0xd9, 0xd6, 0xfa, 0xc6, 0x54, 0xb2, 0xbc, 0x39, 0x5b,
	0x95, 0x05, 0x6f, 0xcc, 0xc9, 0x82, 0x5f, 0x97, 0x2d, 0xf8, 0xcf, 0x8d, 0x19, 0x3d, 0x58, 0x4f,
	0x48, 0xe1, 0xc1, 0x8d, 0xb2, 0x07, 0x77, 0x2b, 0x3d, 0xf8, 0x2f, 0x8d, 0xcb, 0x9b, 0x70, 0x63,
	0xb2, 0x09, 0x6f, 0x5e, 0xca, 0x84, 0xb7, 0xa6, 0x99, 0xf0, 0xe8, 0xf8, 0x46, 0x4d, 0xf8, 0xc6,
	0x3c, 0x4c, 0x18, 0xbe, 0xaf, 0x09, 0xdf, 0x7a, 0x5f, 0x13, 0xbe, 0x3d, 0x57, 0x13, 0x3e, 0xb8,
	0x09, 0x6e, 0x94, 0x23, 0x5a, 0x5b, 0xd7, 0x3b, 0x4c, 0xed, 0x1f, 0x57, 0xc0, 0xe6, 0x97, 0x44,
	0x48, 0x1a, 0x6b, 0xe9, 0x38, 0x49, 0x88, 0x0f, 0x7f, 0x09, 0x16, 0xf1, 0x30, 0xf3, 0xb2, 0x8f,
	0x11, 0x1e, 0x4e, 0x88, 0xe6, 0x0b, 0xb8, 0xf6, 0x82, 0xab, 0x70, 0xf0, 0x10, 0x5c, 0xd5, 0x9b,
	0xa6, 0xd6, 0xbb, 0x7e, 0x82, 0xcc, 0x16, 0x6a, 0x4d, 0x0a, 0x83, 0xd5, 0x2f, 0x99, 0x08, 0x99,
	0x7f, 0x07, 0xe9, 0x7f, 0x2c, 0x6a, 0x52, 0x68, 0xa4, 0x62, 0x08, 0x78, 0xe2, 0x5b, 0xeb, 0x7a,
	0xa0, 0x37, 0x37, 0x6a, 0x33, 0xa8, 0xca, 0x07, 0x10, 0x6c, 0x75, 0x8b, 0x47, 0x66, 0xbe, 0xfe,
	0xb5, 0x08, 0xb6, 0x5f, 0x11, 0x1a, 0x84, 0x92, 0x74, 0x4b, 0xb8, 0x2c, 0x25, 0x98, 0x20, 0xee,
	0x8d, 0x39, 0x8a, 0x7b, 0x45, 0xd6, 0x71, 0x65, 0x3e, 0x59, 0xc7, 0xe5, 0xb7, 0x3e, 0x4a, 0x01,
	0xb5, 0x74, 0xe9, 0x80, 0xaa, 0x0a, 0x8e, 0xab, 0xf3, 0x0d, 0x8e, 0xbd, 0x7f, 0xfe, 0x7f, 0xa9,
	0xf1, 0xf7, 0xff, 0x7d, 0xd8, 0xf8, 0xed, 0xc3, 0x7a, 0x7f, 0x0d, 0x26, 0xdf, 0x06, 0x76, 0x17,
	0xb3, 0xb3, 0xac, 0xad, 0x64, 0xf7, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0xa9, 0xa4, 0x9d,
	0x55, 0x1c, 0x00, 0x00,
}

func (this *ListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerOptions)
	if !ok {
		that2, ok := that.(ListenerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AccessLoggingService.Equal(that1.AccessLoggingService) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.PerConnectionBufferLimitBytes.Equal(that1.PerConnectionBufferLimitBytes) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpListenerOptions)
	if !ok {
		that2, ok := that.(HttpListenerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcWeb.Equal(that1.GrpcWeb) {
		return false
	}
	if !this.HttpConnectionManagerSettings.Equal(that1.HttpConnectionManagerSettings) {
		return false
	}
	if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Dlp.Equal(that1.Dlp) {
		return false
	}
	if !this.Wasm.Equal(that1.Wasm) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !this.RatelimitServer.Equal(that1.RatelimitServer) {
		return false
	}
	if !this.Gzip.Equal(that1.Gzip) {
		return false
	}
	if !this.ProxyLatency.Equal(that1.ProxyLatency) {
		return false
	}
	if !this.Buffer.Equal(that1.Buffer) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TcpListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpListenerOptions)
	if !ok {
		that2, ok := that.(TcpListenerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpProxySettings.Equal(that1.TcpProxySettings) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualHostOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostOptions)
	if !ok {
		that2, ok := that.(VirtualHostOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.RatelimitBasic.Equal(that1.RatelimitBasic) {
		return false
	}
	if that1.RateLimitConfigType == nil {
		if this.RateLimitConfigType != nil {
			return false
		}
	} else if this.RateLimitConfigType == nil {
		return false
	} else if !this.RateLimitConfigType.Equal(that1.RateLimitConfigType) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !this.Dlp.Equal(that1.Dlp) {
		return false
	}
	if !this.BufferPerRoute.Equal(that1.BufferPerRoute) {
		return false
	}
	if !this.IncludeRequestAttemptCount.Equal(that1.IncludeRequestAttemptCount) {
		return false
	}
	if !this.IncludeAttemptCountInResponse.Equal(that1.IncludeAttemptCountInResponse) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualHostOptions_Ratelimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostOptions_Ratelimit)
	if !ok {
		that2, ok := that.(VirtualHostOptions_Ratelimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	return true
}
func (this *VirtualHostOptions_RateLimitConfigs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostOptions_RateLimitConfigs)
	if !ok {
		that2, ok := that.(VirtualHostOptions_RateLimitConfigs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimitConfigs.Equal(that1.RateLimitConfigs) {
		return false
	}
	return true
}
func (this *RouteOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions)
	if !ok {
		that2, ok := that.(RouteOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.Faults.Equal(that1.Faults) {
		return false
	}
	if !this.PrefixRewrite.Equal(that1.PrefixRewrite) {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Tracing.Equal(that1.Tracing) {
		return false
	}
	if !this.Shadowing.Equal(that1.Shadowing) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if that1.HostRewriteType == nil {
		if this.HostRewriteType != nil {
			return false
		}
	} else if this.HostRewriteType == nil {
		return false
	} else if !this.HostRewriteType.Equal(that1.HostRewriteType) {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	if !this.LbHash.Equal(that1.LbHash) {
		return false
	}
	if len(this.Upgrades) != len(that1.Upgrades) {
		return false
	}
	for i := range this.Upgrades {
		if !this.Upgrades[i].Equal(that1.Upgrades[i]) {
			return false
		}
	}
	if !this.RatelimitBasic.Equal(that1.RatelimitBasic) {
		return false
	}
	if that1.RateLimitConfigType == nil {
		if this.RateLimitConfigType != nil {
			return false
		}
	} else if this.RateLimitConfigType == nil {
		return false
	} else if !this.RateLimitConfigType.Equal(that1.RateLimitConfigType) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !this.Dlp.Equal(that1.Dlp) {
		return false
	}
	if !this.BufferPerRoute.Equal(that1.BufferPerRoute) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteOptions_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions_HostRewrite)
	if !ok {
		that2, ok := that.(RouteOptions_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteOptions_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteOptions_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteOptions_Ratelimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions_Ratelimit)
	if !ok {
		that2, ok := that.(RouteOptions_Ratelimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	return true
}
func (this *RouteOptions_RateLimitConfigs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions_RateLimitConfigs)
	if !ok {
		that2, ok := that.(RouteOptions_RateLimitConfigs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimitConfigs.Equal(that1.RateLimitConfigs) {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DestinationSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Aws)
	if !ok {
		that2, ok := that.(DestinationSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *DestinationSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Azure)
	if !ok {
		that2, ok := that.(DestinationSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *DestinationSpec_Rest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Rest)
	if !ok {
		that2, ok := that.(DestinationSpec_Rest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rest.Equal(that1.Rest) {
		return false
	}
	return true
}
func (this *DestinationSpec_Grpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Grpc)
	if !ok {
		that2, ok := that.(DestinationSpec_Grpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Grpc.Equal(that1.Grpc) {
		return false
	}
	return true
}
func (this *WeightedDestinationOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedDestinationOptions)
	if !ok {
		that2, ok := that.(WeightedDestinationOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !this.BufferPerRoute.Equal(that1.BufferPerRoute) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

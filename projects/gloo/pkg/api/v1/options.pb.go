// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	transformation "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/transformation"
	dlp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/dlp"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"
	jwt "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwt"
	ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit"
	rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbac"
	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/waf"
	als "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/als"
	aws "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/aws"
	azure "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/azure"
	cors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/cors"
	faultinjection "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/faultinjection"
	grpc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc"
	grpc_web "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc_web"
	hcm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/hcm"
	headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/headers"
	healthcheck "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/healthcheck"
	lbhash "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/lbhash"
	protocol_upgrade "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol_upgrade"
	rest "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/rest"
	retries "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/retries"
	shadowing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/shadowing"
	stats "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/stats"
	tcp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tcp"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracing"
	wasm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/wasm"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Optional, feature-specific configuration that lives on gateways.
// Each ListenerOption object contains configuration for a specific feature.
// Note to developers: new Listener plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type ListenerOptions struct {
	AccessLoggingService *als.AccessLoggingService `protobuf:"bytes,1,opt,name=access_logging_service,json=accessLoggingService,proto3" json:"access_logging_service,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions           *Extensions `protobuf:"bytes,2,opt,name=extensions,proto3" json:"extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListenerOptions) Reset()         { *m = ListenerOptions{} }
func (m *ListenerOptions) String() string { return proto.CompactTextString(m) }
func (*ListenerOptions) ProtoMessage()    {}
func (*ListenerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{0}
}
func (m *ListenerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenerOptions.Unmarshal(m, b)
}
func (m *ListenerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenerOptions.Marshal(b, m, deterministic)
}
func (m *ListenerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerOptions.Merge(m, src)
}
func (m *ListenerOptions) XXX_Size() int {
	return xxx_messageInfo_ListenerOptions.Size(m)
}
func (m *ListenerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerOptions proto.InternalMessageInfo

func (m *ListenerOptions) GetAccessLoggingService() *als.AccessLoggingService {
	if m != nil {
		return m.AccessLoggingService
	}
	return nil
}

func (m *ListenerOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// Optional, feature-specific configuration that lives on http listeners
type HttpListenerOptions struct {
	GrpcWeb                       *grpc_web.GrpcWeb                  `protobuf:"bytes,1,opt,name=grpc_web,json=grpcWeb,proto3" json:"grpc_web,omitempty"`
	HttpConnectionManagerSettings *hcm.HttpConnectionManagerSettings `protobuf:"bytes,2,opt,name=http_connection_manager_settings,json=httpConnectionManagerSettings,proto3" json:"http_connection_manager_settings,omitempty"`
	// enable [Envoy health checks](https://www.envoyproxy.io/docs/envoy/v1.7.0/api-v2/config/filter/http/health_check/v2/health_check.proto) on this listener
	HealthCheck *healthcheck.HealthCheck `protobuf:"bytes,4,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,5,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.FilterConfig `protobuf:"bytes,6,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// Wasm filter config [very-experimental!]
	// Currently these extensions will only work if Gloo deployed using the helm flag, wasm.enabled=true
	// These require a special nightly version of envoy which is not deployed by default
	Wasm                 *wasm.PluginSource `protobuf:"bytes,7,opt,name=wasm,proto3" json:"wasm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HttpListenerOptions) Reset()         { *m = HttpListenerOptions{} }
func (m *HttpListenerOptions) String() string { return proto.CompactTextString(m) }
func (*HttpListenerOptions) ProtoMessage()    {}
func (*HttpListenerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{1}
}
func (m *HttpListenerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpListenerOptions.Unmarshal(m, b)
}
func (m *HttpListenerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpListenerOptions.Marshal(b, m, deterministic)
}
func (m *HttpListenerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpListenerOptions.Merge(m, src)
}
func (m *HttpListenerOptions) XXX_Size() int {
	return xxx_messageInfo_HttpListenerOptions.Size(m)
}
func (m *HttpListenerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpListenerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HttpListenerOptions proto.InternalMessageInfo

func (m *HttpListenerOptions) GetGrpcWeb() *grpc_web.GrpcWeb {
	if m != nil {
		return m.GrpcWeb
	}
	return nil
}

func (m *HttpListenerOptions) GetHttpConnectionManagerSettings() *hcm.HttpConnectionManagerSettings {
	if m != nil {
		return m.HttpConnectionManagerSettings
	}
	return nil
}

func (m *HttpListenerOptions) GetHealthCheck() *healthcheck.HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *HttpListenerOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *HttpListenerOptions) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *HttpListenerOptions) GetDlp() *dlp.FilterConfig {
	if m != nil {
		return m.Dlp
	}
	return nil
}

func (m *HttpListenerOptions) GetWasm() *wasm.PluginSource {
	if m != nil {
		return m.Wasm
	}
	return nil
}

// Optional, feature-specific configuration that lives on tcp listeners
type TcpListenerOptions struct {
	TcpProxySettings     *tcp.TcpProxySettings `protobuf:"bytes,3,opt,name=tcp_proxy_settings,json=tcpProxySettings,proto3" json:"tcp_proxy_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TcpListenerOptions) Reset()         { *m = TcpListenerOptions{} }
func (m *TcpListenerOptions) String() string { return proto.CompactTextString(m) }
func (*TcpListenerOptions) ProtoMessage()    {}
func (*TcpListenerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{2}
}
func (m *TcpListenerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpListenerOptions.Unmarshal(m, b)
}
func (m *TcpListenerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpListenerOptions.Marshal(b, m, deterministic)
}
func (m *TcpListenerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpListenerOptions.Merge(m, src)
}
func (m *TcpListenerOptions) XXX_Size() int {
	return xxx_messageInfo_TcpListenerOptions.Size(m)
}
func (m *TcpListenerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpListenerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TcpListenerOptions proto.InternalMessageInfo

func (m *TcpListenerOptions) GetTcpProxySettings() *tcp.TcpProxySettings {
	if m != nil {
		return m.TcpProxySettings
	}
	return nil
}

// Optional, feature-specific configuration that lives on virtual hosts.
// Each VirtualHostPlugin object contains configuration for a specific feature.
// Note to developers: new Virtual Host plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type VirtualHostOptions struct {
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions          `protobuf:"bytes,1,opt,name=extensions,proto3" json:"extensions,omitempty"`
	Retries    *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	Stats      *stats.Stats         `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	// Append/Remove headers on Requests or Responses on all routes contained in this Virtual Host
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,2,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Defines a CORS policy for the virtual host
	// If a CORS policy is also defined on the route matched by the request, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,3,opt,name=cors,proto3" json:"cors,omitempty"`
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,4,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,6,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings
	Ratelimit *ratelimit.RateLimitVhostExtension `protobuf:"bytes,7,opt,name=ratelimit,proto3" json:"ratelimit,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,8,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	Jwt *jwt.VhostExtension `protobuf:"bytes,9,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,11,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,12,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp                  *dlp.Config `protobuf:"bytes,13,opt,name=dlp,proto3" json:"dlp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VirtualHostOptions) Reset()         { *m = VirtualHostOptions{} }
func (m *VirtualHostOptions) String() string { return proto.CompactTextString(m) }
func (*VirtualHostOptions) ProtoMessage()    {}
func (*VirtualHostOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{3}
}
func (m *VirtualHostOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualHostOptions.Unmarshal(m, b)
}
func (m *VirtualHostOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualHostOptions.Marshal(b, m, deterministic)
}
func (m *VirtualHostOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHostOptions.Merge(m, src)
}
func (m *VirtualHostOptions) XXX_Size() int {
	return xxx_messageInfo_VirtualHostOptions.Size(m)
}
func (m *VirtualHostOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHostOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHostOptions proto.InternalMessageInfo

func (m *VirtualHostOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *VirtualHostOptions) GetRetries() *retries.RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *VirtualHostOptions) GetStats() *stats.Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VirtualHostOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *VirtualHostOptions) GetCors() *cors.CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *VirtualHostOptions) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *VirtualHostOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if m != nil {
		return m.RatelimitBasic
	}
	return nil
}

func (m *VirtualHostOptions) GetRatelimit() *ratelimit.RateLimitVhostExtension {
	if m != nil {
		return m.Ratelimit
	}
	return nil
}

func (m *VirtualHostOptions) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *VirtualHostOptions) GetJwt() *jwt.VhostExtension {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *VirtualHostOptions) GetRbac() *rbac.ExtensionSettings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *VirtualHostOptions) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func (m *VirtualHostOptions) GetDlp() *dlp.Config {
	if m != nil {
		return m.Dlp
	}
	return nil
}

// Optional, feature-specific configuration that lives on routes.
// Each RouteOption object contains configuration for a specific feature.
// Note to developers: new Route plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type RouteOptions struct {
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,1,opt,name=transformations,proto3" json:"transformations,omitempty"`
	Faults          *faultinjection.RouteFaults          `protobuf:"bytes,2,opt,name=faults,proto3" json:"faults,omitempty"`
	// For requests matched on this route, rewrite the HTTP request path to the provided value before forwarding upstream
	PrefixRewrite *types.StringValue   `protobuf:"bytes,3,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	Timeout       *time.Duration       `protobuf:"bytes,4,opt,name=timeout,proto3,stdduration" json:"timeout,omitempty"`
	Retries       *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,6,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Defines route-specific tracing configuration.
	// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
	// See here for additional information about configuring tracing with Gloo: https://gloo.solo.io/observability/tracing/
	Tracing *tracing.RouteTracingSettings `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Specifies traffic shadowing configuration for the route.
	// See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
	Shadowing *shadowing.RouteShadowing `protobuf:"bytes,8,opt,name=shadowing,proto3" json:"shadowing,omitempty"`
	// Append/Remove headers on Requests or Responses on this Route
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,9,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// For requests matched on this route, rewrite the Host header before forwarding upstream
	//
	// Types that are valid to be assigned to HostRewriteType:
	//	*RouteOptions_HostRewrite
	//	*RouteOptions_AutoHostRewrite
	HostRewriteType isRouteOptions_HostRewriteType `protobuf_oneof:"host_rewrite_type"`
	// Defines a CORS policy for the route
	// If a CORS policy is also defined on the route's virtual host, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,11,opt,name=cors,proto3" json:"cors,omitempty"`
	// For routes served by a hashing load balancer, this defines the input to the hash key
	// Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
	// - route, upstream, virtual service
	LbHash *lbhash.RouteActionHashConfig `protobuf:"bytes,12,opt,name=lb_hash,json=lbHash,proto3" json:"lb_hash,omitempty"`
	// Route configuration for protocol upgrade requests.
	Upgrades []*protocol_upgrade.ProtocolUpgradeConfig `protobuf:"bytes,21,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,13,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings
	Ratelimit *ratelimit.RateLimitRouteExtension `protobuf:"bytes,14,opt,name=ratelimit,proto3" json:"ratelimit,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,15,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	Jwt *jwt.RouteExtension `protobuf:"bytes,16,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,17,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,18,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp                  *dlp.Config `protobuf:"bytes,20,opt,name=dlp,proto3" json:"dlp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteOptions) Reset()         { *m = RouteOptions{} }
func (m *RouteOptions) String() string { return proto.CompactTextString(m) }
func (*RouteOptions) ProtoMessage()    {}
func (*RouteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{4}
}
func (m *RouteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteOptions.Unmarshal(m, b)
}
func (m *RouteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteOptions.Marshal(b, m, deterministic)
}
func (m *RouteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteOptions.Merge(m, src)
}
func (m *RouteOptions) XXX_Size() int {
	return xxx_messageInfo_RouteOptions.Size(m)
}
func (m *RouteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RouteOptions proto.InternalMessageInfo

type isRouteOptions_HostRewriteType interface {
	isRouteOptions_HostRewriteType()
	Equal(interface{}) bool
}

type RouteOptions_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,10,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type RouteOptions_AutoHostRewrite struct {
	AutoHostRewrite *types.BoolValue `protobuf:"bytes,19,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}

func (*RouteOptions_HostRewrite) isRouteOptions_HostRewriteType()     {}
func (*RouteOptions_AutoHostRewrite) isRouteOptions_HostRewriteType() {}

func (m *RouteOptions) GetHostRewriteType() isRouteOptions_HostRewriteType {
	if m != nil {
		return m.HostRewriteType
	}
	return nil
}

func (m *RouteOptions) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *RouteOptions) GetFaults() *faultinjection.RouteFaults {
	if m != nil {
		return m.Faults
	}
	return nil
}

func (m *RouteOptions) GetPrefixRewrite() *types.StringValue {
	if m != nil {
		return m.PrefixRewrite
	}
	return nil
}

func (m *RouteOptions) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RouteOptions) GetRetries() *retries.RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *RouteOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *RouteOptions) GetTracing() *tracing.RouteTracingSettings {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *RouteOptions) GetShadowing() *shadowing.RouteShadowing {
	if m != nil {
		return m.Shadowing
	}
	return nil
}

func (m *RouteOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *RouteOptions) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteType().(*RouteOptions_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteOptions) GetAutoHostRewrite() *types.BoolValue {
	if x, ok := m.GetHostRewriteType().(*RouteOptions_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteOptions) GetCors() *cors.CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *RouteOptions) GetLbHash() *lbhash.RouteActionHashConfig {
	if m != nil {
		return m.LbHash
	}
	return nil
}

func (m *RouteOptions) GetUpgrades() []*protocol_upgrade.ProtocolUpgradeConfig {
	if m != nil {
		return m.Upgrades
	}
	return nil
}

func (m *RouteOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if m != nil {
		return m.RatelimitBasic
	}
	return nil
}

func (m *RouteOptions) GetRatelimit() *ratelimit.RateLimitRouteExtension {
	if m != nil {
		return m.Ratelimit
	}
	return nil
}

func (m *RouteOptions) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *RouteOptions) GetJwt() *jwt.RouteExtension {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *RouteOptions) GetRbac() *rbac.ExtensionSettings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *RouteOptions) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func (m *RouteOptions) GetDlp() *dlp.Config {
	if m != nil {
		return m.Dlp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteOptions_HostRewrite)(nil),
		(*RouteOptions_AutoHostRewrite)(nil),
	}
}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
type DestinationSpec struct {
	// Note to developers: new DestinationSpecs must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*DestinationSpec_Aws
	//	*DestinationSpec_Azure
	//	*DestinationSpec_Rest
	//	*DestinationSpec_Grpc
	DestinationType      isDestinationSpec_DestinationType `protobuf_oneof:"destination_type"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DestinationSpec) Reset()         { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()    {}
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{5}
}
func (m *DestinationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSpec.Unmarshal(m, b)
}
func (m *DestinationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSpec.Marshal(b, m, deterministic)
}
func (m *DestinationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSpec.Merge(m, src)
}
func (m *DestinationSpec) XXX_Size() int {
	return xxx_messageInfo_DestinationSpec.Size(m)
}
func (m *DestinationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSpec proto.InternalMessageInfo

type isDestinationSpec_DestinationType interface {
	isDestinationSpec_DestinationType()
	Equal(interface{}) bool
}

type DestinationSpec_Aws struct {
	Aws *aws.DestinationSpec `protobuf:"bytes,1,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type DestinationSpec_Azure struct {
	Azure *azure.DestinationSpec `protobuf:"bytes,2,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type DestinationSpec_Rest struct {
	Rest *rest.DestinationSpec `protobuf:"bytes,3,opt,name=rest,proto3,oneof" json:"rest,omitempty"`
}
type DestinationSpec_Grpc struct {
	Grpc *grpc.DestinationSpec `protobuf:"bytes,4,opt,name=grpc,proto3,oneof" json:"grpc,omitempty"`
}

func (*DestinationSpec_Aws) isDestinationSpec_DestinationType()   {}
func (*DestinationSpec_Azure) isDestinationSpec_DestinationType() {}
func (*DestinationSpec_Rest) isDestinationSpec_DestinationType()  {}
func (*DestinationSpec_Grpc) isDestinationSpec_DestinationType()  {}

func (m *DestinationSpec) GetDestinationType() isDestinationSpec_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *DestinationSpec) GetAws() *aws.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *DestinationSpec) GetAzure() *azure.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *DestinationSpec) GetRest() *rest.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Rest); ok {
		return x.Rest
	}
	return nil
}

func (m *DestinationSpec) GetGrpc() *grpc.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Grpc); ok {
		return x.Grpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DestinationSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DestinationSpec_Aws)(nil),
		(*DestinationSpec_Azure)(nil),
		(*DestinationSpec_Rest)(nil),
		(*DestinationSpec_Grpc)(nil),
	}
}

// Optional, feature-specific configuration that is applied when a specific weighted destination
// is selected for routing.
type WeightedDestinationOptions struct {
	// Append/Remove headers on Requests or Responses to/from this Weighted Destination
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,1,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,2,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth              *v1.ExtAuthExtension `protobuf:"bytes,4,opt,name=extauth,proto3" json:"extauth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WeightedDestinationOptions) Reset()         { *m = WeightedDestinationOptions{} }
func (m *WeightedDestinationOptions) String() string { return proto.CompactTextString(m) }
func (*WeightedDestinationOptions) ProtoMessage()    {}
func (*WeightedDestinationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_94dcee4f7557dfdc, []int{6}
}
func (m *WeightedDestinationOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightedDestinationOptions.Unmarshal(m, b)
}
func (m *WeightedDestinationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightedDestinationOptions.Marshal(b, m, deterministic)
}
func (m *WeightedDestinationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedDestinationOptions.Merge(m, src)
}
func (m *WeightedDestinationOptions) XXX_Size() int {
	return xxx_messageInfo_WeightedDestinationOptions.Size(m)
}
func (m *WeightedDestinationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedDestinationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedDestinationOptions proto.InternalMessageInfo

func (m *WeightedDestinationOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *WeightedDestinationOptions) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *WeightedDestinationOptions) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *WeightedDestinationOptions) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenerOptions)(nil), "gloo.solo.io.ListenerOptions")
	proto.RegisterType((*HttpListenerOptions)(nil), "gloo.solo.io.HttpListenerOptions")
	proto.RegisterType((*TcpListenerOptions)(nil), "gloo.solo.io.TcpListenerOptions")
	proto.RegisterType((*VirtualHostOptions)(nil), "gloo.solo.io.VirtualHostOptions")
	proto.RegisterType((*RouteOptions)(nil), "gloo.solo.io.RouteOptions")
	proto.RegisterType((*DestinationSpec)(nil), "gloo.solo.io.DestinationSpec")
	proto.RegisterType((*WeightedDestinationOptions)(nil), "gloo.solo.io.WeightedDestinationOptions")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/options.proto", fileDescriptor_94dcee4f7557dfdc)
}

var fileDescriptor_94dcee4f7557dfdc = []byte{
	// 1537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x73, 0xdb, 0xc4,
	0x1f, 0xae, 0x13, 0x37, 0x6e, 0xd6, 0x69, 0xd3, 0x6e, 0xfa, 0xff, 0x8f, 0xc9, 0x94, 0x12, 0xcc,
	0x40, 0x5f, 0xa0, 0xeb, 0x36, 0x85, 0x49, 0x9b, 0x96, 0x29, 0x89, 0xdb, 0xe2, 0x0e, 0xe9, 0x90,
	0x51, 0xd2, 0x17, 0xb8, 0x68, 0xd6, 0xf2, 0x5a, 0xda, 0x56, 0xd6, 0x6a, 0x56, 0xab, 0x38, 0xe1,
	0xc4, 0x87, 0xe0, 0xc0, 0x9d, 0x0b, 0x17, 0x0e, 0xdc, 0xf8, 0x28, 0xdc, 0x98, 0xe1, 0xcc, 0x95,
	0x3b, 0xb3, 0x2f, 0x92, 0xfc, 0x22, 0xc7, 0x72, 0x08, 0x07, 0xc9, 0xab, 0xd5, 0xef, 0x79, 0x76,
	0xb5, 0xfb, 0xdb, 0xe7, 0xd9, 0x35, 0xd8, 0x74, 0xa9, 0xf0, 0xe2, 0x36, 0x72, 0x58, 0xaf, 0x11,
	0x31, 0x9f, 0xdd, 0xa2, 0xac, 0xe1, 0xfa, 0x8c, 0x35, 0x42, 0xce, 0xde, 0x10, 0x47, 0x44, 0xfa,
	0x09, 0x87, 0xb4, 0x71, 0x70, 0xa7, 0xc1, 0x42, 0x41, 0x59, 0x10, 0xa1, 0x90, 0x33, 0xc1, 0xe0,
	0x92, 0x7c, 0x85, 0x24, 0x0a, 0x51, 0xb6, 0x7a, 0xc5, 0x65, 0xcc, 0xf5, 0x49, 0x43, 0xbd, 0x6b,
	0xc7, 0xdd, 0x46, 0x24, 0x78, 0xec, 0x08, 0x1d, 0xbb, 0x7a, 0xd9, 0x65, 0x2e, 0x53, 0xc5, 0x86,
	0x2c, 0x99, 0x5a, 0x48, 0x0e, 0x85, 0xae, 0x24, 0x87, 0x49, 0xe4, 0xcd, 0xc9, 0xcd, 0x93, 0x43,
	0x41, 0x82, 0x28, 0xeb, 0xc1, 0xea, 0x9d, 0xa9, 0x5d, 0x6d, 0x38, 0x8c, 0xeb, 0x5b, 0x71, 0x08,
	0x27, 0x91, 0x50, 0xb7, 0xe2, 0x10, 0x97, 0x87, 0x8e, 0xba, 0x19, 0xc8, 0xf4, 0x31, 0x6c, 0x60,
	0x5f, 0x5d, 0x06, 0x70, 0xbf, 0x58, 0x1b, 0x76, 0x9f, 0xb4, 0xd3, 0x42, 0xf1, 0xb6, 0x3c, 0xa7,
	0x27, 0x2f, 0x03, 0xf8, 0x6c, 0x3a, 0xc0, 0x6f, 0x7b, 0x38, 0xf2, 0xcc, 0x8f, 0x81, 0x3d, 0x98,
	0x0e, 0x8b, 0x3c, 0xdc, 0x61, 0x7d, 0x1a, 0xb8, 0x59, 0xa9, 0x78, 0x27, 0x85, 0x13, 0xca, 0xcb,
	0x00, 0x36, 0x0a, 0x00, 0x38, 0x76, 0x64, 0x5b, 0xe6, 0xb7, 0x38, 0x90, 0x13, 0xc1, 0x29, 0x49,
	0x7f, 0x0d, 0xf0, 0x6e, 0x81, 0xef, 0x13, 0x58, 0x98, 0xbb, 0x01, 0x3d, 0x9c, 0x0e, 0xea, 0xe2,
	0xd8, 0x17, 0x34, 0x90, 0x01, 0x94, 0x05, 0xfa, 0xb1, 0x78, 0x5f, 0x3d, 0x82, 0x3b, 0x84, 0xa7,
	0xbf, 0x33, 0xe4, 0x57, 0x5f, 0x5d, 0xc5, 0x73, 0xb8, 0x8f, 0xa3, 0x9e, 0xba, 0x15, 0x1f, 0x0f,
	0xfc, 0x5d, 0xcc, 0x89, 0xbe, 0x1b, 0xd0, 0xa3, 0x42, 0x5f, 0xe4, 0x0b, 0xcf, 0xf1, 0x88, 0xf3,
	0x76, 0xb0, 0x6c, 0x08, 0x9e, 0x4d, 0x27, 0x50, 0x81, 0x0e, 0xf3, 0xed, 0x38, 0x74, 0x39, 0xee,
	0x90, 0xb1, 0x0a, 0x43, 0xb5, 0x3f, 0x81, 0x4a, 0xca, 0x08, 0x0f, 0xb0, 0xdf, 0x20, 0xc1, 0x01,
	0x3b, 0x1a, 0x50, 0x15, 0x99, 0x49, 0x41, 0xd4, 0x65, 0xbc, 0x87, 0xd5, 0x54, 0x0d, 0x3f, 0x1a,
	0xd6, 0x27, 0xc7, 0xe8, 0x53, 0x20, 0x08, 0x0f, 0x39, 0x8d, 0x48, 0xda, 0x57, 0x72, 0x28, 0x70,
	0x2c, 0x3c, 0xa3, 0x5e, 0xb2, 0x68, 0x68, 0x36, 0x67, 0xa2, 0x79, 0xd3, 0x17, 0xf2, 0x32, 0xd8,
	0xa7, 0x33, 0x61, 0x39, 0x16, 0xc4, 0xa7, 0x3d, 0x2a, 0xb2, 0xd2, 0xf4, 0xe4, 0xcd, 0xe3, 0x69,
	0x63, 0x47, 0xdd, 0x4e, 0xf4, 0x05, 0x7d, 0xdc, 0x95, 0xd7, 0x89, 0xb0, 0x1d, 0x3f, 0x94, 0x97,
	0xc1, 0x5e, 0x1d, 0x35, 0x9a, 0x4e, 0xcc, 0x07, 0x27, 0x68, 0xec, 0x7d, 0x9f, 0xe3, 0x30, 0x4c,
	0xd7, 0x4e, 0xfd, 0xd7, 0x12, 0x58, 0xde, 0xa1, 0x91, 0x20, 0x01, 0xe1, 0x5f, 0xeb, 0x16, 0x60,
	0x07, 0xfc, 0x1f, 0x3b, 0x0e, 0x89, 0x22, 0xdb, 0x67, 0xae, 0x4b, 0x03, 0xd7, 0x8e, 0x08, 0x3f,
	0xa0, 0x0e, 0xa9, 0x95, 0xd6, 0x4a, 0xd7, 0xab, 0xeb, 0x08, 0x49, 0xa9, 0x4e, 0xec, 0x6f, 0xd0,
	0xf7, 0xd0, 0x96, 0xc2, 0xed, 0x68, 0xd8, 0x9e, 0x46, 0x59, 0x97, 0x71, 0x4e, 0x2d, 0xbc, 0x07,
	0x40, 0x96, 0x6c, 0xb5, 0x39, 0xc5, 0x5c, 0x1b, 0x66, 0x7b, 0x92, 0xbe, 0xb7, 0x06, 0x62, 0xeb,
	0x3f, 0x94, 0xc1, 0x4a, 0x4b, 0x88, 0x70, 0xb4, 0xdf, 0x5b, 0xe0, 0x5c, 0xe2, 0x06, 0xa6, 0xa7,
	0x1f, 0xa1, 0xd4, 0x1e, 0x72, 0xbb, 0xfb, 0x25, 0x0f, 0x9d, 0x57, 0xa4, 0x6d, 0x55, 0x5c, 0x5d,
	0x80, 0xdf, 0x97, 0xc0, 0x9a, 0x27, 0x44, 0x68, 0x3b, 0x2c, 0x08, 0xb4, 0x46, 0xd9, 0x3d, 0x1c,
	0x60, 0x97, 0x70, 0x3b, 0x22, 0x42, 0xd0, 0xc0, 0x4d, 0xfa, 0xba, 0x81, 0xa4, 0x89, 0xe4, 0xd2,
	0xca, 0xce, 0x35, 0x53, 0x82, 0xe7, 0x1a, 0xbf, 0x67, 0xe0, 0xd6, 0xbb, 0xde, 0x71, 0xaf, 0xe1,
	0x2e, 0x58, 0xd2, 0x42, 0x60, 0x2b, 0x25, 0xa8, 0x95, 0x55, 0x6b, 0xb7, 0xd0, 0xa0, 0x3a, 0xe4,
	0xb7, 0xaa, 0x02, 0x9a, 0x32, 0xc0, 0xaa, 0x7a, 0xd9, 0xc3, 0xc8, 0x48, 0xcf, 0x17, 0x1f, 0x69,
	0xf8, 0x29, 0x98, 0xef, 0xe3, 0x6e, 0xed, 0xac, 0x82, 0xd4, 0x91, 0x4c, 0xd9, 0xdc, 0xa6, 0xd3,
	0x6f, 0x93, 0xe1, 0xf0, 0x1e, 0x98, 0xef, 0xf8, 0x61, 0x6d, 0xc1, 0x4c, 0x81, 0x4c, 0xd6, 0x5c,
	0xd4, 0x53, 0xea, 0x0b, 0xc2, 0x9b, 0x2c, 0xe8, 0x52, 0xd7, 0x92, 0x10, 0xf8, 0x00, 0x94, 0xa5,
	0xe6, 0xd6, 0x2a, 0x0a, 0x7a, 0x0d, 0x29, 0x01, 0xce, 0xc5, 0xee, 0xfa, 0xb1, 0x4b, 0x83, 0x3d,
	0x16, 0x73, 0x87, 0x58, 0x0a, 0x54, 0x0f, 0x00, 0xdc, 0x77, 0xc6, 0x92, 0xe2, 0x35, 0x80, 0xc2,
	0x09, 0xed, 0x90, 0xb3, 0xc3, 0xa3, 0x6c, 0x0a, 0xf5, 0x20, 0xdc, 0x44, 0xd2, 0x62, 0x73, 0xf9,
	0xf7, 0x9d, 0x70, 0x57, 0x42, 0xd2, 0x2f, 0xbb, 0x28, 0x46, 0x6a, 0xea, 0x3f, 0x55, 0x00, 0x7c,
	0x49, 0xb9, 0x88, 0xb1, 0xdf, 0x62, 0x91, 0x48, 0x1a, 0x1c, 0x1e, 0xed, 0xd2, 0x0c, 0xa3, 0xdd,
	0x04, 0x15, 0x63, 0xc2, 0x66, 0xc4, 0x6f, 0xa0, 0xc4, 0x94, 0x73, 0xfb, 0x68, 0x11, 0xc1, 0x8f,
	0x76, 0x99, 0x4f, 0x9d, 0x23, 0x2b, 0x41, 0xc2, 0x0d, 0x70, 0x56, 0x59, 0x72, 0x0d, 0x28, 0x8a,
	0xf7, 0x91, 0x36, 0xe8, 0xfc, 0x69, 0x93, 0xaf, 0x2c, 0x1d, 0x0f, 0x31, 0x58, 0xd1, 0xb6, 0x2a,
	0x13, 0x9e, 0x86, 0xb1, 0xaf, 0x64, 0xc4, 0x24, 0xfb, 0x6d, 0x94, 0x58, 0xee, 0xa4, 0xd4, 0xeb,
	0x10, 0xfe, 0x7c, 0x00, 0x67, 0x41, 0x6f, 0xac, 0x0e, 0xde, 0x07, 0x65, 0xb9, 0xf9, 0x34, 0xa3,
	0xff, 0x21, 0x52, 0x3b, 0xd1, 0x5c, 0xc2, 0x26, 0xe3, 0x91, 0xf9, 0x32, 0x05, 0x81, 0xaf, 0xc1,
	0xf2, 0xb0, 0x01, 0x45, 0x66, 0x61, 0x20, 0xa4, 0x8c, 0x0b, 0xe1, 0x90, 0xa2, 0x83, 0x75, 0xd4,
	0x55, 0x39, 0x85, 0xe4, 0x12, 0x43, 0x16, 0x8b, 0x05, 0xd9, 0x1f, 0x46, 0x59, 0xa3, 0x34, 0xf0,
	0x1b, 0xb0, 0x9c, 0x5a, 0x81, 0xdd, 0xc6, 0x11, 0x75, 0x4c, 0xe6, 0xde, 0x46, 0x99, 0x45, 0xe4,
	0x76, 0xf2, 0x59, 0xe0, 0x72, 0x12, 0x45, 0x16, 0x16, 0x64, 0x47, 0x46, 0x59, 0x17, 0x52, 0xc0,
	0xb6, 0xe4, 0x81, 0x2f, 0xc0, 0x62, 0x5a, 0x63, 0x72, 0x7a, 0x63, 0x1a, 0x69, 0xca, 0xf6, 0xd2,
	0x63, 0x91, 0x48, 0x33, 0xc5, 0xca, 0x98, 0x92, 0x55, 0x79, 0x6e, 0xb6, 0x55, 0xb9, 0x09, 0xe6,
	0xdf, 0xf4, 0x45, 0x6d, 0x51, 0xa1, 0xae, 0x23, 0x69, 0xa0, 0xb9, 0xa8, 0x91, 0x76, 0x25, 0x08,
	0x7e, 0x01, 0xca, 0xd2, 0xeb, 0x6a, 0x55, 0x05, 0xfe, 0x04, 0x29, 0xe3, 0xcb, 0x45, 0xa7, 0xc0,
	0xb4, 0x71, 0x85, 0x94, 0xb9, 0x6d, 0x2c, 0xbf, 0xb6, 0x64, 0x72, 0x3b, 0xf3, 0xb6, 0x31, 0x8a,
	0xad, 0x58, 0x78, 0x59, 0x17, 0x12, 0x24, 0x5c, 0xd7, 0xc2, 0x72, 0x5e, 0x11, 0xac, 0x4d, 0x16,
	0x96, 0x01, 0x49, 0xa9, 0xff, 0x55, 0x05, 0x4b, 0x2a, 0x11, 0x32, 0x41, 0x18, 0xcb, 0xa4, 0xd2,
	0xe9, 0x64, 0xd2, 0x23, 0xb0, 0xa0, 0xf6, 0xb3, 0x89, 0x43, 0x5c, 0x43, 0x7a, 0x7b, 0x9b, 0x3f,
	0xcf, 0x92, 0xf2, 0xa9, 0x0a, 0xb7, 0x0c, 0x0c, 0x36, 0xc1, 0x85, 0x90, 0x93, 0x2e, 0x3d, 0xb4,
	0x39, 0xe9, 0x73, 0x2a, 0x88, 0x59, 0x29, 0x57, 0x90, 0x76, 0x71, 0x94, 0xb8, 0x38, 0xda, 0x13,
	0x9c, 0x06, 0xee, 0x4b, 0xec, 0xc7, 0xc4, 0x3a, 0xaf, 0x31, 0x96, 0x86, 0xc0, 0xfb, 0xa0, 0x22,
	0x68, 0x8f, 0xb0, 0x58, 0x98, 0x15, 0xf2, 0xce, 0x18, 0xfa, 0xb1, 0xd9, 0x23, 0x6c, 0x97, 0x7f,
	0xfc, 0xe3, 0xbd, 0x92, 0x95, 0xc4, 0x9f, 0x8e, 0x00, 0x0d, 0xeb, 0xdf, 0xc2, 0x0c, 0xfa, 0xb7,
	0x03, 0x2a, 0xe6, 0xf4, 0x62, 0x16, 0xcb, 0x3a, 0x4a, 0x4e, 0x33, 0x93, 0x87, 0x70, 0x5f, 0x47,
	0xa4, 0xe9, 0x96, 0x50, 0xc0, 0x1d, 0xb0, 0x98, 0x9e, 0xbb, 0xcc, 0x5a, 0x41, 0x28, 0x3b, 0x89,
	0x4d, 0x66, 0xdc, 0x4b, 0x62, 0xac, 0x8c, 0x60, 0x92, 0x3a, 0x2e, 0x9e, 0xa2, 0x3a, 0x7e, 0x00,
	0x96, 0xe4, 0xd2, 0x4b, 0xe7, 0x5e, 0x0a, 0xf8, 0x62, 0xeb, 0x8c, 0x55, 0x95, 0xb5, 0xc9, 0xec,
	0xb6, 0xc0, 0x25, 0x1c, 0x0b, 0x66, 0x0f, 0x45, 0xae, 0xa8, 0x5e, 0xac, 0x8e, 0xcd, 0xf3, 0x36,
	0x63, 0xbe, 0xca, 0x91, 0xd6, 0x19, 0x6b, 0x59, 0xc2, 0x5a, 0x03, 0x4c, 0x89, 0x18, 0x57, 0x67,
	0x17, 0xe3, 0xaf, 0x40, 0xc5, 0x6f, 0xdb, 0xf2, 0x34, 0x6c, 0x16, 0xf3, 0x3a, 0x32, 0x87, 0xe3,
	0xc9, 0xa3, 0xba, 0xa5, 0x36, 0x3b, 0x2d, 0x1c, 0x79, 0x66, 0x75, 0x2e, 0xf8, 0x6d, 0xf9, 0x04,
	0x5f, 0x83, 0x73, 0xe6, 0xa4, 0x12, 0xd5, 0xfe, 0xb7, 0x36, 0x7f, 0xbd, 0xba, 0xfe, 0x10, 0x8d,
	0x9d, 0x61, 0xf2, 0xf7, 0x00, 0x26, 0xea, 0x85, 0x0e, 0x32, 0xbc, 0x29, 0x5b, 0x9e, 0xb2, 0x9f,
	0xff, 0x2f, 0x94, 0xfd, 0xc2, 0x8c, 0xca, 0xae, 0xc6, 0xe3, 0x38, 0x65, 0x5f, 0x3e, 0x91, 0xb2,
	0x5f, 0x9c, 0xa6, 0xec, 0x23, 0xed, 0x0e, 0x29, 0xfb, 0xa5, 0xd3, 0x50, 0x76, 0xf8, 0x6f, 0x95,
	0xfd, 0xf2, 0x0c, 0xca, 0xbe, 0xbd, 0x02, 0x2e, 0x0d, 0xae, 0x02, 0x5b, 0x1c, 0x85, 0xa4, 0xfe,
	0xcb, 0x1c, 0x58, 0x7e, 0x4c, 0x22, 0x41, 0x03, 0xb5, 0xa8, 0xf6, 0x42, 0xe2, 0xc0, 0xcf, 0xc1,
	0x3c, 0xee, 0x27, 0x2a, 0x7f, 0x03, 0xe1, 0xfe, 0x84, 0x3c, 0x1f, 0xc1, 0xb5, 0xce, 0x58, 0x12,
	0x07, 0x9b, 0xe0, 0xac, 0x3a, 0xd4, 0x1b, 0x55, 0xff, 0x18, 0xe9, 0x23, 0x7e, 0x41, 0x0a, 0x8d,
	0x55, 0xe3, 0x4c, 0x22, 0x91, 0x6e, 0x3c, 0xd5, 0x3f, 0x6a, 0x05, 0x29, 0x14, 0x52, 0x32, 0xc8,
	0x53, 0x8a, 0x11, 0xf5, 0x9b, 0xea, 0x64, 0x53, 0x98, 0x41, 0x06, 0x6f, 0x43, 0x70, 0xb1, 0x93,
	0xbd, 0xd2, 0xe3, 0xf5, 0xfb, 0x1c, 0x58, 0x7d, 0x45, 0xa8, 0xeb, 0x09, 0xd2, 0x19, 0xc0, 0x25,
	0x66, 0x39, 0x41, 0xf6, 0x4a, 0xa7, 0x28, 0x7b, 0x39, 0x7e, 0x3c, 0x77, 0x3a, 0x7e, 0x7c, 0xf2,
	0x73, 0xcf, 0x40, 0x4e, 0x97, 0x4f, 0x9a, 0xd3, 0xdb, 0x9b, 0xbf, 0xfd, 0x5d, 0x2e, 0xfd, 0xfc,
	0xe7, 0xd5, 0xd2, 0xb7, 0xb7, 0x8b, 0xfd, 0xaf, 0x1c, 0xbe, 0x75, 0xcd, 0xb9, 0xbf, 0xbd, 0xa0,
	0x14, 0xf0, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x43, 0xc8, 0xed, 0x89, 0x92, 0x16, 0x00,
	0x00,
}

func (this *ListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerOptions)
	if !ok {
		that2, ok := that.(ListenerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AccessLoggingService.Equal(that1.AccessLoggingService) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpListenerOptions)
	if !ok {
		that2, ok := that.(HttpListenerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcWeb.Equal(that1.GrpcWeb) {
		return false
	}
	if !this.HttpConnectionManagerSettings.Equal(that1.HttpConnectionManagerSettings) {
		return false
	}
	if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Dlp.Equal(that1.Dlp) {
		return false
	}
	if !this.Wasm.Equal(that1.Wasm) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TcpListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpListenerOptions)
	if !ok {
		that2, ok := that.(TcpListenerOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpProxySettings.Equal(that1.TcpProxySettings) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualHostOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostOptions)
	if !ok {
		that2, ok := that.(VirtualHostOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.RatelimitBasic.Equal(that1.RatelimitBasic) {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !this.Dlp.Equal(that1.Dlp) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions)
	if !ok {
		that2, ok := that.(RouteOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.Faults.Equal(that1.Faults) {
		return false
	}
	if !this.PrefixRewrite.Equal(that1.PrefixRewrite) {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Tracing.Equal(that1.Tracing) {
		return false
	}
	if !this.Shadowing.Equal(that1.Shadowing) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if that1.HostRewriteType == nil {
		if this.HostRewriteType != nil {
			return false
		}
	} else if this.HostRewriteType == nil {
		return false
	} else if !this.HostRewriteType.Equal(that1.HostRewriteType) {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	if !this.LbHash.Equal(that1.LbHash) {
		return false
	}
	if len(this.Upgrades) != len(that1.Upgrades) {
		return false
	}
	for i := range this.Upgrades {
		if !this.Upgrades[i].Equal(that1.Upgrades[i]) {
			return false
		}
	}
	if !this.RatelimitBasic.Equal(that1.RatelimitBasic) {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !this.Dlp.Equal(that1.Dlp) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteOptions_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions_HostRewrite)
	if !ok {
		that2, ok := that.(RouteOptions_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteOptions_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteOptions_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteOptions_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DestinationSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Aws)
	if !ok {
		that2, ok := that.(DestinationSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *DestinationSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Azure)
	if !ok {
		that2, ok := that.(DestinationSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *DestinationSpec_Rest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Rest)
	if !ok {
		that2, ok := that.(DestinationSpec_Rest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rest.Equal(that1.Rest) {
		return false
	}
	return true
}
func (this *DestinationSpec_Grpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Grpc)
	if !ok {
		that2, ok := that.(DestinationSpec_Grpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Grpc.Equal(that1.Grpc) {
		return false
	}
	return true
}
func (this *WeightedDestinationOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedDestinationOptions)
	if !ok {
		that2, ok := that.(WeightedDestinationOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

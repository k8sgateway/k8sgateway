// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	cluster "github.com/envoyproxy/go-control-plane/envoy/api/v2/cluster"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/plugins/extauth/v1"
	jwt "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/plugins/jwt"
	ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/plugins/ratelimit"
	rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/plugins/rbac"
	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/plugins/waf"
	als "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/als"
	aws "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/aws"
	ec2 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/aws/ec2"
	azure "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/azure"
	consul "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/consul"
	cors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/cors"
	faultinjection "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/faultinjection"
	grpc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/grpc"
	grpc_web "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/grpc_web"
	hcm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/hcm"
	headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/headers"
	healthcheck "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/healthcheck"
	hostrewrite "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/hostrewrite"
	kubernetes "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/kubernetes"
	lbhash "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/lbhash"
	pipe "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/pipe"
	rest "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/rest"
	retries "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/retries"
	shadowing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/shadowing"
	static "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/static"
	stats "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/stats"
	tcp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/tcp"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/tracing"
	transformation "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/transformation"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Plugin-specific configuration that lives on gateways
// Each ListenerPlugin object contains configuration for a specific plugin
// Note to developers: new Listener Plugins must be added to this struct
// to be usable by Gloo.
type ListenerPlugins struct {
	AccessLoggingService *als.AccessLoggingService `protobuf:"bytes,1,opt,name=access_logging_service,json=accessLoggingService,proto3" json:"access_logging_service,omitempty"`
	// Deprecated: Opaque config for Gloo plugins
	Extensions           *Extensions `protobuf:"bytes,2,opt,name=extensions,proto3" json:"extensions,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListenerPlugins) Reset()         { *m = ListenerPlugins{} }
func (m *ListenerPlugins) String() string { return proto.CompactTextString(m) }
func (*ListenerPlugins) ProtoMessage()    {}
func (*ListenerPlugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{0}
}
func (m *ListenerPlugins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenerPlugins.Unmarshal(m, b)
}
func (m *ListenerPlugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenerPlugins.Marshal(b, m, deterministic)
}
func (m *ListenerPlugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerPlugins.Merge(m, src)
}
func (m *ListenerPlugins) XXX_Size() int {
	return xxx_messageInfo_ListenerPlugins.Size(m)
}
func (m *ListenerPlugins) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerPlugins.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerPlugins proto.InternalMessageInfo

func (m *ListenerPlugins) GetAccessLoggingService() *als.AccessLoggingService {
	if m != nil {
		return m.AccessLoggingService
	}
	return nil
}

// Deprecated: Do not use.
func (m *ListenerPlugins) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// Plugin-specific configuration that lives on http listeners
type HttpListenerPlugins struct {
	GrpcWeb                       *grpc_web.GrpcWeb                  `protobuf:"bytes,1,opt,name=grpc_web,json=grpcWeb,proto3" json:"grpc_web,omitempty"`
	HttpConnectionManagerSettings *hcm.HttpConnectionManagerSettings `protobuf:"bytes,2,opt,name=http_connection_manager_settings,json=httpConnectionManagerSettings,proto3" json:"http_connection_manager_settings,omitempty"`
	// enable [Envoy health checks](https://www.envoyproxy.io/docs/envoy/v1.7.0/api-v2/config/filter/http/health_check/v2/health_check.proto) on this listener
	HealthCheck *healthcheck.HealthCheck `protobuf:"bytes,4,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// Deprecated: Opaque config for Gloo plugins
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"` // Deprecated: Do not use.
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf                  *waf.Settings `protobuf:"bytes,5,opt,name=waf,proto3" json:"waf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HttpListenerPlugins) Reset()         { *m = HttpListenerPlugins{} }
func (m *HttpListenerPlugins) String() string { return proto.CompactTextString(m) }
func (*HttpListenerPlugins) ProtoMessage()    {}
func (*HttpListenerPlugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{1}
}
func (m *HttpListenerPlugins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpListenerPlugins.Unmarshal(m, b)
}
func (m *HttpListenerPlugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpListenerPlugins.Marshal(b, m, deterministic)
}
func (m *HttpListenerPlugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpListenerPlugins.Merge(m, src)
}
func (m *HttpListenerPlugins) XXX_Size() int {
	return xxx_messageInfo_HttpListenerPlugins.Size(m)
}
func (m *HttpListenerPlugins) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpListenerPlugins.DiscardUnknown(m)
}

var xxx_messageInfo_HttpListenerPlugins proto.InternalMessageInfo

func (m *HttpListenerPlugins) GetGrpcWeb() *grpc_web.GrpcWeb {
	if m != nil {
		return m.GrpcWeb
	}
	return nil
}

func (m *HttpListenerPlugins) GetHttpConnectionManagerSettings() *hcm.HttpConnectionManagerSettings {
	if m != nil {
		return m.HttpConnectionManagerSettings
	}
	return nil
}

func (m *HttpListenerPlugins) GetHealthCheck() *healthcheck.HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

// Deprecated: Do not use.
func (m *HttpListenerPlugins) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *HttpListenerPlugins) GetWaf() *waf.Settings {
	if m != nil {
		return m.Waf
	}
	return nil
}

// Plugin-specific configuration that lives on tcp listeners
type TcpListenerPlugins struct {
	TcpProxySettings     *tcp.TcpProxySettings `protobuf:"bytes,3,opt,name=tcp_proxy_settings,json=tcpProxySettings,proto3" json:"tcp_proxy_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TcpListenerPlugins) Reset()         { *m = TcpListenerPlugins{} }
func (m *TcpListenerPlugins) String() string { return proto.CompactTextString(m) }
func (*TcpListenerPlugins) ProtoMessage()    {}
func (*TcpListenerPlugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{2}
}
func (m *TcpListenerPlugins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpListenerPlugins.Unmarshal(m, b)
}
func (m *TcpListenerPlugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpListenerPlugins.Marshal(b, m, deterministic)
}
func (m *TcpListenerPlugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpListenerPlugins.Merge(m, src)
}
func (m *TcpListenerPlugins) XXX_Size() int {
	return xxx_messageInfo_TcpListenerPlugins.Size(m)
}
func (m *TcpListenerPlugins) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpListenerPlugins.DiscardUnknown(m)
}

var xxx_messageInfo_TcpListenerPlugins proto.InternalMessageInfo

func (m *TcpListenerPlugins) GetTcpProxySettings() *tcp.TcpProxySettings {
	if m != nil {
		return m.TcpProxySettings
	}
	return nil
}

// Plugin-specific configuration that lives on virtual hosts
// Each VirtualHostPlugin object contains configuration for a specific plugin
// Note to developers: new Virtual Host Plugins must be added to this struct
// to be usable by Gloo.
type VirtualHostPlugins struct {
	// Deprecated: Opaque config for Gloo plugins
	Extensions *Extensions          `protobuf:"bytes,1,opt,name=extensions,proto3" json:"extensions,omitempty"` // Deprecated: Do not use.
	Retries    *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	Stats      *stats.Stats         `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	// Append/Remove headers on Requests or Responses on all routes contained in this Virtual Host
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,2,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Defines a CORS policy for the virtual host
	// If a CORS policy is also defined on the route matched by the request, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,3,opt,name=cors,proto3" json:"cors,omitempty"`
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,4,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,6,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings
	Ratelimit *ratelimit.RateLimitVhostExtension `protobuf:"bytes,7,opt,name=ratelimit,proto3" json:"ratelimit,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.VhostSettings `protobuf:"bytes,8,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	Jwt *jwt.VhostExtension `protobuf:"bytes,9,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,11,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth              *v1.ExtAuthExtension `protobuf:"bytes,12,opt,name=extauth,proto3" json:"extauth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VirtualHostPlugins) Reset()         { *m = VirtualHostPlugins{} }
func (m *VirtualHostPlugins) String() string { return proto.CompactTextString(m) }
func (*VirtualHostPlugins) ProtoMessage()    {}
func (*VirtualHostPlugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{3}
}
func (m *VirtualHostPlugins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualHostPlugins.Unmarshal(m, b)
}
func (m *VirtualHostPlugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualHostPlugins.Marshal(b, m, deterministic)
}
func (m *VirtualHostPlugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHostPlugins.Merge(m, src)
}
func (m *VirtualHostPlugins) XXX_Size() int {
	return xxx_messageInfo_VirtualHostPlugins.Size(m)
}
func (m *VirtualHostPlugins) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHostPlugins.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHostPlugins proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *VirtualHostPlugins) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *VirtualHostPlugins) GetRetries() *retries.RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *VirtualHostPlugins) GetStats() *stats.Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VirtualHostPlugins) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *VirtualHostPlugins) GetCors() *cors.CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *VirtualHostPlugins) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *VirtualHostPlugins) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if m != nil {
		return m.RatelimitBasic
	}
	return nil
}

func (m *VirtualHostPlugins) GetRatelimit() *ratelimit.RateLimitVhostExtension {
	if m != nil {
		return m.Ratelimit
	}
	return nil
}

func (m *VirtualHostPlugins) GetWaf() *waf.VhostSettings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *VirtualHostPlugins) GetJwt() *jwt.VhostExtension {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *VirtualHostPlugins) GetRbac() *rbac.ExtensionSettings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *VirtualHostPlugins) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

// Plugin-specific configuration that lives on routes
// Each RoutePlugin object contains configuration for a specific plugin
// Note to developers: new Route Plugins must be added to this struct
// to be usable by Gloo.
type RoutePlugins struct {
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,1,opt,name=transformations,proto3" json:"transformations,omitempty"`
	Faults          *faultinjection.RouteFaults          `protobuf:"bytes,2,opt,name=faults,proto3" json:"faults,omitempty"`
	PrefixRewrite   *transformation.PrefixRewrite        `protobuf:"bytes,3,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	Timeout         *time.Duration                       `protobuf:"bytes,4,opt,name=timeout,proto3,stdduration" json:"timeout,omitempty"`
	Retries         *retries.RetryPolicy                 `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Deprecated: Opaque config for Gloo plugins
	Extensions *Extensions `protobuf:"bytes,6,opt,name=extensions,proto3" json:"extensions,omitempty"` // Deprecated: Do not use.
	// Defines route-specific tracing configuration.
	// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
	// See here for additional information about configuring tracing with Gloo: https://gloo.solo.io/user_guides/setup_options/observability/#tracing
	Tracing *tracing.RouteTracingSettings `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Specifies traffic shadowing configuration for the route.
	// See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
	Shadowing *shadowing.RouteShadowing `protobuf:"bytes,8,opt,name=shadowing,proto3" json:"shadowing,omitempty"`
	// Append/Remove headers on Requests or Responses on this Route
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,9,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Rewrite the Host header for requests matched on this route
	HostRewrite *hostrewrite.HostRewrite `protobuf:"bytes,10,opt,name=host_rewrite,json=hostRewrite,proto3" json:"host_rewrite,omitempty"`
	// Defines a CORS policy for the route
	// If a CORS policy is also defined on the route's virtual host, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,11,opt,name=cors,proto3" json:"cors,omitempty"`
	// For routes served by a hashing load balancer, this defines the input to the hash key
	// Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
	// - route, upstream, virtual service
	LbHash *lbhash.RouteActionHashConfig `protobuf:"bytes,12,opt,name=lb_hash,json=lbHash,proto3" json:"lb_hash,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,13,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings
	Ratelimit *ratelimit.RateLimitRouteExtension `protobuf:"bytes,14,opt,name=ratelimit,proto3" json:"ratelimit,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.RouteSettings `protobuf:"bytes,15,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	Jwt *jwt.RouteExtension `protobuf:"bytes,16,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,17,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth              *v1.ExtAuthExtension `protobuf:"bytes,18,opt,name=extauth,proto3" json:"extauth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RoutePlugins) Reset()         { *m = RoutePlugins{} }
func (m *RoutePlugins) String() string { return proto.CompactTextString(m) }
func (*RoutePlugins) ProtoMessage()    {}
func (*RoutePlugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{4}
}
func (m *RoutePlugins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutePlugins.Unmarshal(m, b)
}
func (m *RoutePlugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutePlugins.Marshal(b, m, deterministic)
}
func (m *RoutePlugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutePlugins.Merge(m, src)
}
func (m *RoutePlugins) XXX_Size() int {
	return xxx_messageInfo_RoutePlugins.Size(m)
}
func (m *RoutePlugins) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutePlugins.DiscardUnknown(m)
}

var xxx_messageInfo_RoutePlugins proto.InternalMessageInfo

func (m *RoutePlugins) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

func (m *RoutePlugins) GetFaults() *faultinjection.RouteFaults {
	if m != nil {
		return m.Faults
	}
	return nil
}

func (m *RoutePlugins) GetPrefixRewrite() *transformation.PrefixRewrite {
	if m != nil {
		return m.PrefixRewrite
	}
	return nil
}

func (m *RoutePlugins) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RoutePlugins) GetRetries() *retries.RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

// Deprecated: Do not use.
func (m *RoutePlugins) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *RoutePlugins) GetTracing() *tracing.RouteTracingSettings {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *RoutePlugins) GetShadowing() *shadowing.RouteShadowing {
	if m != nil {
		return m.Shadowing
	}
	return nil
}

func (m *RoutePlugins) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *RoutePlugins) GetHostRewrite() *hostrewrite.HostRewrite {
	if m != nil {
		return m.HostRewrite
	}
	return nil
}

func (m *RoutePlugins) GetCors() *cors.CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *RoutePlugins) GetLbHash() *lbhash.RouteActionHashConfig {
	if m != nil {
		return m.LbHash
	}
	return nil
}

func (m *RoutePlugins) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if m != nil {
		return m.RatelimitBasic
	}
	return nil
}

func (m *RoutePlugins) GetRatelimit() *ratelimit.RateLimitRouteExtension {
	if m != nil {
		return m.Ratelimit
	}
	return nil
}

func (m *RoutePlugins) GetWaf() *waf.RouteSettings {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *RoutePlugins) GetJwt() *jwt.RouteExtension {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *RoutePlugins) GetRbac() *rbac.ExtensionSettings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *RoutePlugins) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
type DestinationSpec struct {
	// Note to developers: new DestinationSpecs must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*DestinationSpec_Aws
	//	*DestinationSpec_Azure
	//	*DestinationSpec_Rest
	//	*DestinationSpec_Grpc
	DestinationType      isDestinationSpec_DestinationType `protobuf_oneof:"destination_type"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DestinationSpec) Reset()         { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()    {}
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{5}
}
func (m *DestinationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSpec.Unmarshal(m, b)
}
func (m *DestinationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSpec.Marshal(b, m, deterministic)
}
func (m *DestinationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSpec.Merge(m, src)
}
func (m *DestinationSpec) XXX_Size() int {
	return xxx_messageInfo_DestinationSpec.Size(m)
}
func (m *DestinationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSpec proto.InternalMessageInfo

type isDestinationSpec_DestinationType interface {
	isDestinationSpec_DestinationType()
	Equal(interface{}) bool
}

type DestinationSpec_Aws struct {
	Aws *aws.DestinationSpec `protobuf:"bytes,1,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type DestinationSpec_Azure struct {
	Azure *azure.DestinationSpec `protobuf:"bytes,2,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type DestinationSpec_Rest struct {
	Rest *rest.DestinationSpec `protobuf:"bytes,3,opt,name=rest,proto3,oneof" json:"rest,omitempty"`
}
type DestinationSpec_Grpc struct {
	Grpc *grpc.DestinationSpec `protobuf:"bytes,4,opt,name=grpc,proto3,oneof" json:"grpc,omitempty"`
}

func (*DestinationSpec_Aws) isDestinationSpec_DestinationType()   {}
func (*DestinationSpec_Azure) isDestinationSpec_DestinationType() {}
func (*DestinationSpec_Rest) isDestinationSpec_DestinationType()  {}
func (*DestinationSpec_Grpc) isDestinationSpec_DestinationType()  {}

func (m *DestinationSpec) GetDestinationType() isDestinationSpec_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *DestinationSpec) GetAws() *aws.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *DestinationSpec) GetAzure() *azure.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *DestinationSpec) GetRest() *rest.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Rest); ok {
		return x.Rest
	}
	return nil
}

func (m *DestinationSpec) GetGrpc() *grpc.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Grpc); ok {
		return x.Grpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DestinationSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DestinationSpec_Aws)(nil),
		(*DestinationSpec_Azure)(nil),
		(*DestinationSpec_Rest)(nil),
		(*DestinationSpec_Grpc)(nil),
	}
}

// Plugin-specific configuration that is applied when a specific weighted destination
// is selected for routing.
type WeightedDestinationPlugins struct {
	// Append/Remove headers on Requests or Responses to/from this Weighted Destination
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,1,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Transformations to apply
	Transformations *transformation.RouteTransformations `protobuf:"bytes,2,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Deprecated: Opaque config for Gloo plugins
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"` // Deprecated: Do not use.
	// Enterprise-only: Authentication configuration
	Extauth              *v1.ExtAuthExtension `protobuf:"bytes,4,opt,name=extauth,proto3" json:"extauth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WeightedDestinationPlugins) Reset()         { *m = WeightedDestinationPlugins{} }
func (m *WeightedDestinationPlugins) String() string { return proto.CompactTextString(m) }
func (*WeightedDestinationPlugins) ProtoMessage()    {}
func (*WeightedDestinationPlugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{6}
}
func (m *WeightedDestinationPlugins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightedDestinationPlugins.Unmarshal(m, b)
}
func (m *WeightedDestinationPlugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightedDestinationPlugins.Marshal(b, m, deterministic)
}
func (m *WeightedDestinationPlugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedDestinationPlugins.Merge(m, src)
}
func (m *WeightedDestinationPlugins) XXX_Size() int {
	return xxx_messageInfo_WeightedDestinationPlugins.Size(m)
}
func (m *WeightedDestinationPlugins) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedDestinationPlugins.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedDestinationPlugins proto.InternalMessageInfo

func (m *WeightedDestinationPlugins) GetHeaderManipulation() *headers.HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *WeightedDestinationPlugins) GetTransformations() *transformation.RouteTransformations {
	if m != nil {
		return m.Transformations
	}
	return nil
}

// Deprecated: Do not use.
func (m *WeightedDestinationPlugins) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *WeightedDestinationPlugins) GetExtauth() *v1.ExtAuthExtension {
	if m != nil {
		return m.Extauth
	}
	return nil
}

// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin.
type UpstreamSpec struct {
	SslConfig *UpstreamSslConfig `protobuf:"bytes,1,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	// Circuit breakers for this upstream. if not set, the defaults ones from the Gloo settings will be used.
	// if those are not set, [envoy's defaults](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster/circuit_breaker.proto#envoy-api-msg-cluster-circuitbreakers)
	// will be used.
	CircuitBreakers    *CircuitBreakerConfig     `protobuf:"bytes,2,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	LoadBalancerConfig *LoadBalancerConfig       `protobuf:"bytes,3,opt,name=load_balancer_config,json=loadBalancerConfig,proto3" json:"load_balancer_config,omitempty"`
	ConnectionConfig   *ConnectionConfig         `protobuf:"bytes,4,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
	HealthChecks       []*core.HealthCheck       `protobuf:"bytes,5,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	OutlierDetection   *cluster.OutlierDetection `protobuf:"bytes,6,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// Use http2 when communicating with this upstream
	// this field is evaluated `true` for upstreams
	// with a grpc service spec
	UseHttp2 bool `protobuf:"varint,7,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	// Note to developers: new Upstream Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to UpstreamType:
	//	*UpstreamSpec_Kube
	//	*UpstreamSpec_Static
	//	*UpstreamSpec_Pipe
	//	*UpstreamSpec_Aws
	//	*UpstreamSpec_Azure
	//	*UpstreamSpec_Consul
	//	*UpstreamSpec_AwsEc2
	UpstreamType         isUpstreamSpec_UpstreamType `protobuf_oneof:"upstream_type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae47d2df5fad2a45, []int{7}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (m *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(m, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

type isUpstreamSpec_UpstreamType interface {
	isUpstreamSpec_UpstreamType()
	Equal(interface{}) bool
}

type UpstreamSpec_Kube struct {
	Kube *kubernetes.UpstreamSpec `protobuf:"bytes,8,opt,name=kube,proto3,oneof" json:"kube,omitempty"`
}
type UpstreamSpec_Static struct {
	Static *static.UpstreamSpec `protobuf:"bytes,9,opt,name=static,proto3,oneof" json:"static,omitempty"`
}
type UpstreamSpec_Pipe struct {
	Pipe *pipe.UpstreamSpec `protobuf:"bytes,10,opt,name=pipe,proto3,oneof" json:"pipe,omitempty"`
}
type UpstreamSpec_Aws struct {
	Aws *aws.UpstreamSpec `protobuf:"bytes,11,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type UpstreamSpec_Azure struct {
	Azure *azure.UpstreamSpec `protobuf:"bytes,12,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type UpstreamSpec_Consul struct {
	Consul *consul.UpstreamSpec `protobuf:"bytes,13,opt,name=consul,proto3,oneof" json:"consul,omitempty"`
}
type UpstreamSpec_AwsEc2 struct {
	AwsEc2 *ec2.UpstreamSpec `protobuf:"bytes,14,opt,name=aws_ec2,json=awsEc2,proto3,oneof" json:"aws_ec2,omitempty"`
}

func (*UpstreamSpec_Kube) isUpstreamSpec_UpstreamType()   {}
func (*UpstreamSpec_Static) isUpstreamSpec_UpstreamType() {}
func (*UpstreamSpec_Pipe) isUpstreamSpec_UpstreamType()   {}
func (*UpstreamSpec_Aws) isUpstreamSpec_UpstreamType()    {}
func (*UpstreamSpec_Azure) isUpstreamSpec_UpstreamType()  {}
func (*UpstreamSpec_Consul) isUpstreamSpec_UpstreamType() {}
func (*UpstreamSpec_AwsEc2) isUpstreamSpec_UpstreamType() {}

func (m *UpstreamSpec) GetUpstreamType() isUpstreamSpec_UpstreamType {
	if m != nil {
		return m.UpstreamType
	}
	return nil
}

func (m *UpstreamSpec) GetSslConfig() *UpstreamSslConfig {
	if m != nil {
		return m.SslConfig
	}
	return nil
}

func (m *UpstreamSpec) GetCircuitBreakers() *CircuitBreakerConfig {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

func (m *UpstreamSpec) GetLoadBalancerConfig() *LoadBalancerConfig {
	if m != nil {
		return m.LoadBalancerConfig
	}
	return nil
}

func (m *UpstreamSpec) GetConnectionConfig() *ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (m *UpstreamSpec) GetHealthChecks() []*core.HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *UpstreamSpec) GetOutlierDetection() *cluster.OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *UpstreamSpec) GetUseHttp2() bool {
	if m != nil {
		return m.UseHttp2
	}
	return false
}

func (m *UpstreamSpec) GetKube() *kubernetes.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Kube); ok {
		return x.Kube
	}
	return nil
}

func (m *UpstreamSpec) GetStatic() *static.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Static); ok {
		return x.Static
	}
	return nil
}

func (m *UpstreamSpec) GetPipe() *pipe.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Pipe); ok {
		return x.Pipe
	}
	return nil
}

func (m *UpstreamSpec) GetAws() *aws.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *UpstreamSpec) GetAzure() *azure.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *UpstreamSpec) GetConsul() *consul.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Consul); ok {
		return x.Consul
	}
	return nil
}

func (m *UpstreamSpec) GetAwsEc2() *ec2.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_AwsEc2); ok {
		return x.AwsEc2
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpstreamSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpstreamSpec_Kube)(nil),
		(*UpstreamSpec_Static)(nil),
		(*UpstreamSpec_Pipe)(nil),
		(*UpstreamSpec_Aws)(nil),
		(*UpstreamSpec_Azure)(nil),
		(*UpstreamSpec_Consul)(nil),
		(*UpstreamSpec_AwsEc2)(nil),
	}
}

func init() {
	proto.RegisterType((*ListenerPlugins)(nil), "gloo.solo.io.ListenerPlugins")
	proto.RegisterType((*HttpListenerPlugins)(nil), "gloo.solo.io.HttpListenerPlugins")
	proto.RegisterType((*TcpListenerPlugins)(nil), "gloo.solo.io.TcpListenerPlugins")
	proto.RegisterType((*VirtualHostPlugins)(nil), "gloo.solo.io.VirtualHostPlugins")
	proto.RegisterType((*RoutePlugins)(nil), "gloo.solo.io.RoutePlugins")
	proto.RegisterType((*DestinationSpec)(nil), "gloo.solo.io.DestinationSpec")
	proto.RegisterType((*WeightedDestinationPlugins)(nil), "gloo.solo.io.WeightedDestinationPlugins")
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.solo.io.UpstreamSpec")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins.proto", fileDescriptor_ae47d2df5fad2a45)
}

var fileDescriptor_ae47d2df5fad2a45 = []byte{
	// 1819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x41, 0x73, 0x1c, 0x39,
	0x15, 0x66, 0x6c, 0xaf, 0x1d, 0xcb, 0x4e, 0xec, 0x68, 0x53, 0xd4, 0x10, 0x20, 0x1b, 0x5c, 0xc5,
	0x66, 0x13, 0x88, 0x66, 0x19, 0xa8, 0xdd, 0xca, 0x16, 0x81, 0x64, 0x26, 0x59, 0x0c, 0xeb, 0xb0,
	0xae, 0x76, 0x76, 0x93, 0x70, 0xe9, 0xd2, 0x68, 0x34, 0xdd, 0x8a, 0xdb, 0xad, 0x2e, 0x49, 0x9d,
	0x89, 0x39, 0xf1, 0x33, 0xb8, 0x72, 0xe3, 0xc2, 0x91, 0x5f, 0xc1, 0x2f, 0xa0, 0x8a, 0x2a, 0xaa,
	0xf8, 0x15, 0x1c, 0x29, 0x49, 0xaf, 0x7b, 0x7a, 0xc6, 0x3d, 0xc9, 0xcc, 0xb4, 0x39, 0x74, 0xb7,
	0x5a, 0xfd, 0xde, 0xa7, 0x27, 0xe9, 0xe9, 0x7b, 0x4f, 0x6a, 0xf4, 0x45, 0x24, 0x4c, 0x9c, 0x0f,
	0x08, 0x93, 0x67, 0x1d, 0x2d, 0x13, 0x79, 0x5f, 0xc8, 0x4e, 0x94, 0x48, 0xd9, 0xc9, 0x94, 0x7c,
	0xcd, 0x99, 0xd1, 0xfe, 0x8d, 0x66, 0xa2, 0xf3, 0xe6, 0x67, 0x9d, 0x2c, 0xc9, 0x23, 0x91, 0x6a,
	0x92, 0x29, 0x69, 0x24, 0xde, 0xb5, 0x9f, 0x88, 0xd5, 0x22, 0x42, 0xde, 0xfc, 0x41, 0x24, 0x65,
	0x94, 0xf0, 0x8e, 0xfb, 0x36, 0xc8, 0x47, 0x1d, 0x6d, 0x54, 0xce, 0x8c, 0x97, 0xbd, 0x79, 0x23,
	0x92, 0x91, 0x74, 0xc5, 0x8e, 0x2d, 0x41, 0xed, 0x67, 0x4b, 0xb5, 0xae, 0x75, 0x02, 0x7a, 0x0f,
	0x97, 0xd2, 0xe3, 0x6f, 0x0d, 0x4f, 0xb5, 0x90, 0x85, 0xe1, 0x37, 0x7b, 0x4b, 0xa9, 0x33, 0xa1,
	0x58, 0x2e, 0x4c, 0x38, 0x50, 0x9c, 0x9e, 0x72, 0x05, 0x18, 0x8f, 0x96, 0xc2, 0x48, 0x24, 0x1d,
	0x86, 0x03, 0x9a, 0xd0, 0x94, 0x95, 0x08, 0xcb, 0x75, 0x82, 0xc9, 0x34, 0xe5, 0xcc, 0x08, 0x99,
	0xae, 0xd4, 0x09, 0x98, 0xb9, 0x0e, 0x1d, 0xbb, 0x0b, 0x30, 0x7e, 0xb7, 0x32, 0x06, 0x67, 0x5d,
	0xfb, 0x0c, 0x39, 0xeb, 0x02, 0xd6, 0x93, 0x95, 0xb0, 0x98, 0x54, 0xfe, 0xd6, 0x08, 0x45, 0x71,
	0x6d, 0xdc, 0xad, 0x11, 0x4a, 0xa4, 0x32, 0xe6, 0x6e, 0xcd, 0x46, 0x38, 0x71, 0x17, 0x60, 0x1c,
	0xad, 0x6c, 0x49, 0x38, 0xe6, 0x83, 0xb2, 0xd0, 0xc8, 0xa2, 0x98, 0x9d, 0xd9, 0x0b, 0x30, 0x0e,
	0x57, 0xc2, 0x48, 0x06, 0x31, 0xd5, 0x31, 0x3c, 0x00, 0xe9, 0xf7, 0x2b, 0x21, 0xe9, 0x98, 0x0e,
	0xe5, 0x58, 0xa4, 0xd1, 0xa4, 0xd4, 0xa8, 0x77, 0x86, 0x65, 0xf6, 0x6a, 0xe4, 0xd1, 0x46, 0x51,
	0x66, 0x2d, 0x82, 0x27, 0x60, 0x7d, 0xb9, 0xda, 0xfc, 0xff, 0x31, 0x57, 0xdc, 0xdf, 0x1b, 0x8d,
	0x38, 0x93, 0xa9, 0xce, 0x13, 0x78, 0x00, 0xd2, 0xf1, 0x4a, 0x48, 0xa7, 0xf9, 0x80, 0xab, 0x94,
	0x1b, 0x5e, 0x2d, 0x36, 0x1a, 0x2f, 0xc5, 0x8d, 0x12, 0xbc, 0x7c, 0x36, 0xea, 0xa7, 0x36, 0xd4,
	0x08, 0x06, 0x8f, 0x46, 0xeb, 0x37, 0x13, 0x19, 0x77, 0xb7, 0x46, 0xf3, 0x67, 0x0d, 0x81, 0x3b,
	0xe0, 0xbc, 0x5c, 0xd5, 0xa7, 0x52, 0x3d, 0x92, 0xea, 0x8c, 0x5a, 0xd2, 0xee, 0x64, 0x8a, 0x8f,
	0xc4, 0xdb, 0x50, 0xf1, 0xb1, 0x12, 0x86, 0x5f, 0x26, 0xf2, 0xf4, 0x2b, 0x20, 0x7f, 0xbd, 0x12,
	0xf2, 0x88, 0xe6, 0x89, 0x11, 0xe9, 0x6b, 0x1f, 0x68, 0xfc, 0x6b, 0x23, 0x47, 0x89, 0x39, 0x1d,
	0x72, 0x55, 0x3e, 0x01, 0x2b, 0x58, 0x15, 0x2b, 0x31, 0x31, 0x8b, 0x39, 0x3b, 0xad, 0x96, 0x9b,
	0x61, 0x4a, 0x6d, 0x60, 0x4a, 0xaa, 0xe5, 0x95, 0xa6, 0x87, 0xa7, 0x86, 0xab, 0x4c, 0x09, 0xcd,
	0x4b, 0x78, 0xfe, 0xd6, 0xd0, 0xdc, 0xc4, 0x90, 0x84, 0xd8, 0x22, 0x20, 0x3f, 0x6b, 0x8a, 0xfc,
	0x7a, 0x6c, 0xec, 0x05, 0x70, 0xaf, 0x9a, 0xc2, 0x29, 0x6a, 0x78, 0x22, 0xce, 0x84, 0x99, 0x94,
	0x56, 0x72, 0xa4, 0x3a, 0xe8, 0x01, 0x65, 0xee, 0x76, 0x59, 0x5d, 0x1f, 0xd3, 0x91, 0xbd, 0x00,
	0x2e, 0x5c, 0x1c, 0xce, 0xe6, 0x81, 0x2a, 0xa5, 0x49, 0x87, 0xa7, 0x6f, 0xe4, 0xb9, 0x6f, 0xa1,
	0xdb, 0x61, 0x49, 0xae, 0x0d, 0x57, 0x1d, 0x99, 0x9b, 0x44, 0x70, 0x15, 0x0e, 0xb9, 0x99, 0xca,
	0xb3, 0x5e, 0x34, 0x6e, 0x40, 0x2a, 0x0e, 0x0e, 0x1b, 0x56, 0x3d, 0xf6, 0xd6, 0x6c, 0xc2, 0x3c,
	0xcc, 0x55, 0x65, 0x09, 0x1f, 0xfc, 0xbd, 0x85, 0xf6, 0x8e, 0x84, 0x36, 0x3c, 0xe5, 0xea, 0xd8,
	0xf7, 0x1d, 0x0f, 0xd1, 0x77, 0x29, 0x63, 0x5c, 0xeb, 0x30, 0x91, 0x51, 0x24, 0xd2, 0x28, 0xd4,
	0x5c, 0xbd, 0x11, 0x8c, 0xb7, 0x5b, 0xb7, 0x5b, 0x9f, 0xec, 0x74, 0x09, 0x71, 0xa9, 0x07, 0xa4,
	0xe9, 0xd5, 0xfc, 0x9c, 0x3c, 0x76, 0x7a, 0x47, 0x5e, 0xed, 0xc4, 0x6b, 0x05, 0x37, 0x68, 0x4d,
	0x2d, 0xfe, 0x25, 0x42, 0x93, 0x9c, 0xb9, 0xbd, 0xe6, 0x90, 0xdb, 0xd3, 0x68, 0x4f, 0xcb, 0xef,
	0xbd, 0xb5, 0x76, 0x2b, 0xa8, 0xc8, 0x1f, 0xfc, 0x65, 0x1d, 0x7d, 0x78, 0x68, 0x4c, 0x36, 0x6b,
	0xfb, 0x63, 0x74, 0xa5, 0x48, 0x67, 0xc0, 0xda, 0x8f, 0xc9, 0x24, 0xbf, 0xa9, 0x33, 0xf9, 0x37,
	0x2a, 0x63, 0x2f, 0xf8, 0x20, 0xd8, 0x8a, 0x7c, 0x01, 0xff, 0xa9, 0x85, 0x6e, 0xc7, 0xc6, 0x64,
	0xe1, 0x24, 0x1b, 0x0e, 0xcf, 0x68, 0x4a, 0x23, 0xae, 0x42, 0xcd, 0x8d, 0x11, 0x69, 0x54, 0xd8,
	0xfb, 0x39, 0x71, 0x29, 0x4f, 0x1d, 0xac, 0x35, 0xae, 0x5f, 0x02, 0x3c, 0xf3, 0xfa, 0x27, 0xa0,
	0x1e, 0xfc, 0x30, 0x7e, 0xd7, 0x67, 0x7c, 0x8c, 0x76, 0xab, 0x73, 0xd9, 0xde, 0x70, 0xad, 0xdd,
	0x27, 0x53, 0x8c, 0x54, 0xdb, 0xaa, 0x13, 0xe8, 0x5b, 0x81, 0x60, 0x27, 0x9e, 0xbc, 0xcc, 0x8c,
	0xf6, 0xfa, 0x72, 0xa3, 0x8d, 0x7f, 0x81, 0xd6, 0xc7, 0x74, 0xd4, 0xfe, 0xc0, 0xa9, 0x1d, 0x10,
	0xb7, 0x30, 0xea, 0x9a, 0x2f, 0xfb, 0x67, 0xc5, 0x0f, 0x52, 0x84, 0x9f, 0xb3, 0x0b, 0x33, 0xf4,
	0x12, 0x61, 0xc3, 0xb2, 0x30, 0x53, 0xf2, 0xed, 0xf9, 0x64, 0x3c, 0xbd, 0x45, 0xf7, 0x88, 0x4b,
	0xb2, 0xea, 0xa0, 0x9f, 0xb3, 0xec, 0xd8, 0xaa, 0x94, 0x4d, 0xec, 0x9b, 0x99, 0x9a, 0x83, 0xff,
	0x6e, 0x22, 0xfc, 0xad, 0x50, 0x26, 0xa7, 0xc9, 0xa1, 0xd4, 0xa6, 0x68, 0x70, 0xba, 0xeb, 0xad,
	0x25, 0xbb, 0xde, 0x47, 0x5b, 0x90, 0x80, 0x40, 0xf7, 0xef, 0x92, 0x32, 0x21, 0xa9, 0xb3, 0x33,
	0xe0, 0x46, 0x9d, 0x1f, 0xcb, 0x44, 0xb0, 0xf3, 0xa0, 0xd0, 0xc4, 0x9f, 0xa3, 0x0f, 0x5c, 0xac,
	0x6f, 0x23, 0x07, 0xf1, 0x23, 0x02, 0x91, 0xbf, 0x76, 0x0c, 0xed, 0xa7, 0xc0, 0xcb, 0x63, 0x8a,
	0x3e, 0xf4, 0x51, 0xcd, 0x7a, 0xa0, 0xc8, 0xf2, 0xc4, 0xad, 0x5d, 0xf0, 0xbe, 0x4f, 0x49, 0x19,
	0xf1, 0xe6, 0xf8, 0xc2, 0x90, 0xab, 0x67, 0x15, 0xbd, 0x00, 0xc7, 0x17, 0xea, 0xf0, 0x03, 0xb4,
	0x61, 0xb7, 0x46, 0x30, 0x03, 0x3f, 0x26, 0x7e, 0x9f, 0x54, 0x07, 0xd8, 0x97, 0x4a, 0x43, 0xcf,
	0x9c, 0x0a, 0x7e, 0x89, 0xf6, 0xa6, 0xf3, 0x02, 0x0d, 0x9e, 0x4a, 0x88, 0x23, 0x27, 0x42, 0x33,
	0x41, 0xde, 0x74, 0xc9, 0x48, 0x24, 0x86, 0x2b, 0x62, 0x7d, 0x9e, 0x04, 0x32, 0x37, 0xfc, 0xf9,
	0xb4, 0x56, 0x30, 0x0b, 0x83, 0x5f, 0xa1, 0xbd, 0x32, 0x46, 0x84, 0x03, 0xaa, 0x05, 0x6b, 0x6f,
	0x42, 0x9f, 0x2b, 0xb1, 0xa3, 0xce, 0xc8, 0xdf, 0xa6, 0x91, 0xe2, 0x5a, 0x07, 0xd4, 0xf0, 0x23,
	0x2b, 0x15, 0x5c, 0x2b, 0x15, 0x7a, 0x16, 0x07, 0x7f, 0x83, 0xb6, 0xcb, 0x9a, 0xf6, 0x16, 0x2c,
	0xe3, 0xf7, 0x80, 0x96, 0x68, 0xdf, 0xda, 0xf8, 0x5d, 0x7a, 0x4b, 0x30, 0x41, 0xc2, 0x0f, 0xfc,
	0x12, 0xb9, 0xe2, 0x00, 0xef, 0xcc, 0x5f, 0x22, 0x0e, 0x61, 0x6a, 0x9d, 0xe0, 0x2f, 0xd0, 0xfa,
	0xeb, 0xb1, 0x69, 0x6f, 0x3b, 0xd5, 0x4f, 0x88, 0x8b, 0xb8, 0x73, 0x55, 0x27, 0x8d, 0x5b, 0x25,
	0xfc, 0x08, 0x6d, 0xd8, 0xb0, 0xd7, 0xde, 0x71, 0xca, 0x3f, 0x25, 0x3e, 0x06, 0xd6, 0x69, 0x97,
	0x8a, 0x65, 0xe3, 0x4e, 0xd3, 0x3a, 0x38, 0xa4, 0x0d, 0xed, 0x5d, 0x70, 0xf0, 0x49, 0x3c, 0xbc,
	0x00, 0xf1, 0x38, 0x37, 0xf1, 0xc4, 0x84, 0x42, 0xf3, 0xe0, 0x1f, 0x08, 0xed, 0xba, 0x99, 0x9d,
	0xac, 0xf2, 0x0b, 0xae, 0xd1, 0xba, 0x1c, 0xd7, 0xf8, 0x35, 0xda, 0x74, 0x29, 0x63, 0xc1, 0xc1,
	0x77, 0x08, 0x64, 0x90, 0xb5, 0x13, 0x67, 0x21, 0xbf, 0x74, 0xe2, 0x01, 0xa8, 0xe1, 0x57, 0xe8,
	0xda, 0x74, 0x9e, 0x0c, 0xae, 0xdf, 0x25, 0xb3, 0x49, 0x6e, 0x1d, 0xe2, 0xb1, 0x53, 0x0d, 0xbc,
	0x66, 0x70, 0x35, 0xab, 0xbe, 0xe2, 0x07, 0x68, 0xcb, 0x88, 0x33, 0x2e, 0x73, 0x03, 0x0b, 0xe1,
	0x7b, 0xc4, 0xc7, 0x5f, 0x52, 0xc4, 0x5f, 0xf2, 0x04, 0xe2, 0x6f, 0x6f, 0xe3, 0xcf, 0xff, 0xfe,
	0xa8, 0x15, 0x14, 0xf2, 0x97, 0xc3, 0x33, 0xd3, 0x54, 0xb7, 0xb9, 0x24, 0xd5, 0x1d, 0xa1, 0x2d,
	0xd8, 0x9b, 0xc2, 0xba, 0x70, 0x23, 0xe2, 0xf7, 0xaa, 0x73, 0x07, 0xf7, 0xb9, 0x97, 0x28, 0x9d,
	0xaa, 0x80, 0xc0, 0x47, 0x68, 0xbb, 0xdc, 0x7b, 0xc3, 0xb2, 0x20, 0xa4, 0xb2, 0x1b, 0x9f, 0x8b,
	0x78, 0x52, 0xc8, 0x04, 0x13, 0x80, 0x79, 0x44, 0xb8, 0x7d, 0x89, 0x44, 0x68, 0x83, 0xae, 0xd4,
	0xa6, 0xf4, 0x0a, 0x54, 0x04, 0xdd, 0x6a, 0xca, 0x5e, 0x8b, 0x2f, 0xb5, 0x29, 0x1c, 0x62, 0x27,
	0x9e, 0xbc, 0x94, 0xd4, 0xba, 0xb3, 0x3c, 0xb5, 0x7e, 0x85, 0xb6, 0x92, 0x41, 0x18, 0x53, 0x5d,
	0xac, 0xca, 0x2e, 0x29, 0x8e, 0x45, 0xe6, 0x0e, 0xdc, 0x63, 0x97, 0x4b, 0x1c, 0x52, 0x1d, 0xf7,
	0x65, 0x3a, 0x12, 0x51, 0xb0, 0x99, 0x0c, 0xec, 0x5b, 0x1d, 0x9b, 0x5e, 0xfd, 0x7f, 0xb0, 0xe9,
	0xb5, 0x25, 0xd9, 0xd4, 0x59, 0xfd, 0x2e, 0x36, 0xdd, 0x7b, 0x1f, 0x9b, 0x7a, 0x87, 0xa9, 0x63,
	0xd3, 0xfd, 0xf7, 0xb1, 0xe9, 0x4c, 0xe3, 0x53, 0x6c, 0x7a, 0xfd, 0x32, 0xd8, 0x14, 0xaf, 0xcc,
	0xa6, 0x7f, 0x5b, 0x43, 0x7b, 0x4f, 0xb8, 0x36, 0x22, 0x75, 0x9e, 0x79, 0x92, 0x71, 0x86, 0x1f,
	0xa2, 0x75, 0x3a, 0x2e, 0x48, 0xf4, 0x2e, 0x71, 0xc7, 0xab, 0x75, 0x86, 0xcd, 0xe8, 0x1d, 0x7e,
	0x27, 0xb0, 0x7a, 0xb8, 0x8f, 0x3e, 0x70, 0xa7, 0x45, 0x40, 0x9a, 0x3f, 0x21, 0x70, 0x76, 0xb4,
	0x18, 0x84, 0xd7, 0x75, 0xc3, 0xc3, 0xb5, 0x29, 0x93, 0x35, 0x7f, 0x18, 0xba, 0x18, 0x84, 0xd3,
	0xb4, 0x08, 0x36, 0xcd, 0x06, 0x76, 0xbc, 0x47, 0xfc, 0x41, 0xe8, 0x82, 0x08, 0x56, 0xb8, 0x87,
	0xd1, 0xfe, 0x70, 0xf2, 0x29, 0x34, 0xe7, 0x19, 0x3f, 0xf8, 0xd7, 0x1a, 0xba, 0xf9, 0x82, 0x8b,
	0x28, 0x36, 0x7c, 0x58, 0xd1, 0x2b, 0x62, 0xd1, 0x1c, 0xee, 0x68, 0x5d, 0x22, 0x77, 0xd4, 0x84,
	0xbb, 0xb5, 0xcb, 0x09, 0x77, 0xcd, 0x12, 0xf7, 0x8a, 0x3b, 0x6e, 0xac, 0xec, 0x8e, 0xff, 0xdc,
	0x42, 0xbb, 0xdf, 0x64, 0x96, 0x04, 0xe9, 0x99, 0xf3, 0xc5, 0x5f, 0x21, 0xa4, 0x75, 0x62, 0xf7,
	0x47, 0x23, 0x11, 0xc1, 0x38, 0x7e, 0x34, 0x8d, 0x56, 0xca, 0xeb, 0x04, 0xc8, 0x68, 0x5b, 0x17,
	0x45, 0xfc, 0x0c, 0xed, 0xcf, 0xfc, 0xef, 0x28, 0x86, 0xeb, 0x60, 0x86, 0x16, 0xbd, 0x54, 0xcf,
	0x0b, 0x01, 0xd0, 0x1e, 0x9b, 0xaa, 0xd5, 0x38, 0x40, 0x37, 0xa6, 0x7e, 0x7d, 0x14, 0x86, 0xf9,
	0xc1, 0xba, 0x3d, 0x0d, 0x79, 0x24, 0xe9, 0xb0, 0x07, 0x82, 0x00, 0x88, 0x93, 0x0b, 0x75, 0xf8,
	0x2b, 0x74, 0xbd, 0xb2, 0xfd, 0x03, 0x40, 0x3f, 0x84, 0xb7, 0x66, 0xa9, 0xbb, 0x10, 0x03, 0xb8,
	0x7d, 0x36, 0x53, 0x83, 0xfb, 0xe8, 0x6a, 0x75, 0x3b, 0x67, 0x23, 0xfc, 0xba, 0x03, 0x9a, 0xf2,
	0x0d, 0xbb, 0x85, 0x9f, 0xda, 0xc0, 0xed, 0x56, 0x36, 0x70, 0x1a, 0x9f, 0xa0, 0xeb, 0x17, 0x4e,
	0x0f, 0x20, 0xc4, 0x7f, 0x3c, 0x03, 0xe4, 0x0f, 0x1b, 0xc8, 0xd7, 0x5e, 0xfc, 0x49, 0x21, 0x1d,
	0xec, 0xcb, 0x99, 0x1a, 0xfc, 0x7d, 0xb4, 0x9d, 0x6b, 0x1e, 0x5a, 0x7f, 0xec, 0xba, 0xa0, 0x7f,
	0x25, 0xb8, 0x92, 0x6b, 0x6e, 0x37, 0xaf, 0x5d, 0xdc, 0x47, 0x1b, 0xa7, 0xf9, 0x80, 0x43, 0xf0,
	0xbe, 0x4f, 0xaa, 0xe7, 0xba, 0x75, 0x6b, 0xa5, 0xea, 0x23, 0x76, 0xbd, 0x5a, 0x79, 0xdc, 0x47,
	0x9b, 0xfe, 0xd4, 0x15, 0x62, 0xf5, 0x5d, 0x52, 0x1c, 0xc2, 0x2e, 0x00, 0x01, 0xaa, 0xf8, 0x21,
	0xda, 0xc8, 0x44, 0x56, 0x84, 0xe4, 0x3b, 0xc4, 0x9f, 0xbf, 0x2e, 0x62, 0x83, 0x95, 0xb4, 0x21,
	0xc1, 0x72, 0xe7, 0x0e, 0x0c, 0xd6, 0x5c, 0xee, 0x9c, 0x51, 0x76, 0xc4, 0xf9, 0xa8, 0x20, 0xce,
	0x5d, 0x08, 0x28, 0xef, 0x20, 0xce, 0x19, 0x7d, 0x60, 0xcd, 0x3e, 0xda, 0xf4, 0xe7, 0xeb, 0x10,
	0x74, 0xef, 0x92, 0xe2, 0xb8, 0x7d, 0x91, 0x11, 0xf0, 0xb2, 0xf8, 0x29, 0xda, 0x82, 0x3f, 0x61,
	0x10, 0x65, 0xef, 0x91, 0xf2, 0xcf, 0xd8, 0x22, 0x30, 0x74, 0xac, 0x9f, 0xb2, 0x6e, 0x6f, 0x0f,
	0x5d, 0xcd, 0xe1, 0x8b, 0xa3, 0xce, 0xde, 0x67, 0x7f, 0xfd, 0xcf, 0xad, 0xd6, 0x1f, 0x3e, 0x5d,
	0xec, 0xf8, 0x29, 0x3b, 0x8d, 0xe0, 0xc8, 0x6c, 0xb0, 0xe9, 0x12, 0xda, 0x9f, 0xff, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0xc6, 0x6e, 0xbd, 0x1f, 0xdb, 0x1d, 0x00, 0x00,
}

func (this *ListenerPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerPlugins)
	if !ok {
		that2, ok := that.(ListenerPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AccessLoggingService.Equal(that1.AccessLoggingService) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpListenerPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpListenerPlugins)
	if !ok {
		that2, ok := that.(HttpListenerPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcWeb.Equal(that1.GrpcWeb) {
		return false
	}
	if !this.HttpConnectionManagerSettings.Equal(that1.HttpConnectionManagerSettings) {
		return false
	}
	if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TcpListenerPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpListenerPlugins)
	if !ok {
		that2, ok := that.(TcpListenerPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpProxySettings.Equal(that1.TcpProxySettings) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualHostPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostPlugins)
	if !ok {
		that2, ok := that.(VirtualHostPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.RatelimitBasic.Equal(that1.RatelimitBasic) {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RoutePlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutePlugins)
	if !ok {
		that2, ok := that.(RoutePlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.Faults.Equal(that1.Faults) {
		return false
	}
	if !this.PrefixRewrite.Equal(that1.PrefixRewrite) {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Tracing.Equal(that1.Tracing) {
		return false
	}
	if !this.Shadowing.Equal(that1.Shadowing) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.HostRewrite.Equal(that1.HostRewrite) {
		return false
	}
	if !this.Cors.Equal(that1.Cors) {
		return false
	}
	if !this.LbHash.Equal(that1.LbHash) {
		return false
	}
	if !this.RatelimitBasic.Equal(that1.RatelimitBasic) {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DestinationSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Aws)
	if !ok {
		that2, ok := that.(DestinationSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *DestinationSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Azure)
	if !ok {
		that2, ok := that.(DestinationSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *DestinationSpec_Rest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Rest)
	if !ok {
		that2, ok := that.(DestinationSpec_Rest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rest.Equal(that1.Rest) {
		return false
	}
	return true
}
func (this *DestinationSpec_Grpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Grpc)
	if !ok {
		that2, ok := that.(DestinationSpec_Grpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Grpc.Equal(that1.Grpc) {
		return false
	}
	return true
}
func (this *WeightedDestinationPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedDestinationPlugins)
	if !ok {
		that2, ok := that.(WeightedDestinationPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.Transformations.Equal(that1.Transformations) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SslConfig.Equal(that1.SslConfig) {
		return false
	}
	if !this.CircuitBreakers.Equal(that1.CircuitBreakers) {
		return false
	}
	if !this.LoadBalancerConfig.Equal(that1.LoadBalancerConfig) {
		return false
	}
	if !this.ConnectionConfig.Equal(that1.ConnectionConfig) {
		return false
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if this.UseHttp2 != that1.UseHttp2 {
		return false
	}
	if that1.UpstreamType == nil {
		if this.UpstreamType != nil {
			return false
		}
	} else if this.UpstreamType == nil {
		return false
	} else if !this.UpstreamType.Equal(that1.UpstreamType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Kube) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Kube)
	if !ok {
		that2, ok := that.(UpstreamSpec_Kube)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kube.Equal(that1.Kube) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Static) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Static)
	if !ok {
		that2, ok := that.(UpstreamSpec_Static)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Static.Equal(that1.Static) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Pipe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Pipe)
	if !ok {
		that2, ok := that.(UpstreamSpec_Pipe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pipe.Equal(that1.Pipe) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Aws)
	if !ok {
		that2, ok := that.(UpstreamSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Azure)
	if !ok {
		that2, ok := that.(UpstreamSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Consul) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Consul)
	if !ok {
		that2, ok := that.(UpstreamSpec_Consul)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consul.Equal(that1.Consul) {
		return false
	}
	return true
}
func (this *UpstreamSpec_AwsEc2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_AwsEc2)
	if !ok {
		that2, ok := that.(UpstreamSpec_AwsEc2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsEc2.Equal(that1.AwsEc2) {
		return false
	}
	return true
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/health_check.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Envoy cluster health check configuration
//
//See [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.11.0/intro/arch_overview/upstream/health_checking#arch-overview-health-checking) for more information on how health checks work in envoy
//Or examine the [config definition](https://www.envoyproxy.io/docs/envoy/v1.11.0/api-v2/api/v2/core/health_check.proto#envoy-api-msg-core-healthcheck).
type HealthCheckConfig struct {
	Timeout  *time.Duration `protobuf:"bytes,1,opt,name=timeout,proto3,stdduration" json:"timeout,omitempty"`
	Interval *time.Duration `protobuf:"bytes,2,opt,name=interval,proto3,stdduration" json:"interval,omitempty"`
	// The number of unhealthy health checks required before a host is marked
	// unhealthy. Note that for *http* health checking if a host responds with 503
	// this threshold is ignored and the host is considered unhealthy immediately.
	UnhealthyThreshold *types.UInt32Value `protobuf:"bytes,4,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// The number of healthy health checks required before a host is marked
	// healthy. Note that during startup, only a single successful health check is
	// required to mark a host healthy.
	HealthyThreshold *types.UInt32Value `protobuf:"bytes,5,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// Types that are valid to be assigned to HealthChecker:
	//	*HealthCheckConfig_HttpHealthCheck_
	//	*HealthCheckConfig_GrpcHealthCheck_
	HealthChecker        isHealthCheckConfig_HealthChecker `protobuf_oneof:"health_checker"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HealthCheckConfig) Reset()         { *m = HealthCheckConfig{} }
func (m *HealthCheckConfig) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig) ProtoMessage()    {}
func (*HealthCheckConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0}
}
func (m *HealthCheckConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig.Unmarshal(m, b)
}
func (m *HealthCheckConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig.Merge(m, src)
}
func (m *HealthCheckConfig) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig.Size(m)
}
func (m *HealthCheckConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig proto.InternalMessageInfo

type isHealthCheckConfig_HealthChecker interface {
	isHealthCheckConfig_HealthChecker()
	Equal(interface{}) bool
}

type HealthCheckConfig_HttpHealthCheck_ struct {
	HttpHealthCheck *HealthCheckConfig_HttpHealthCheck `protobuf:"bytes,8,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof"`
}
type HealthCheckConfig_GrpcHealthCheck_ struct {
	GrpcHealthCheck *HealthCheckConfig_GrpcHealthCheck `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3,oneof"`
}

func (*HealthCheckConfig_HttpHealthCheck_) isHealthCheckConfig_HealthChecker() {}
func (*HealthCheckConfig_GrpcHealthCheck_) isHealthCheckConfig_HealthChecker() {}

func (m *HealthCheckConfig) GetHealthChecker() isHealthCheckConfig_HealthChecker {
	if m != nil {
		return m.HealthChecker
	}
	return nil
}

func (m *HealthCheckConfig) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheckConfig) GetInterval() *time.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheckConfig) GetUnhealthyThreshold() *types.UInt32Value {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return nil
}

func (m *HealthCheckConfig) GetHealthyThreshold() *types.UInt32Value {
	if m != nil {
		return m.HealthyThreshold
	}
	return nil
}

func (m *HealthCheckConfig) GetHttpHealthCheck() *HealthCheckConfig_HttpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_HttpHealthCheck_); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *HealthCheckConfig) GetGrpcHealthCheck() *HealthCheckConfig_GrpcHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_GrpcHealthCheck_); ok {
		return x.GrpcHealthCheck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheckConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheckConfig_HttpHealthCheck_)(nil),
		(*HealthCheckConfig_GrpcHealthCheck_)(nil),
	}
}

type HealthCheckConfig_HttpHealthCheck struct {
	// The value of the host header in the HTTP health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Specifies the HTTP path that will be requested during health checking. For example
	// */healthcheck*.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// An optional service name parameter which is used to validate the identity of
	// the health checked cluster. See the :ref:`architecture overview
	// <arch_overview_health_checking_identity>` for more information.
	ServiceName string `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// If set, health checks will be made using http/2.
	UseHttp2             bool     `protobuf:"varint,7,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_HttpHealthCheck) Reset()         { *m = HealthCheckConfig_HttpHealthCheck{} }
func (m *HealthCheckConfig_HttpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_HttpHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 0}
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Size(m)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_HttpHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_HttpHealthCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetUseHttp2() bool {
	if m != nil {
		return m.UseHttp2
	}
	return false
}

// `grpc.health.v1.Health
// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
// healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
// for details.
type HealthCheckConfig_GrpcHealthCheck struct {
	// An optional service name parameter which will be sent to gRPC service in
	// `grpc.health.v1.HealthCheckRequest
	// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
	// message. See `gRPC health-checking overview
	// <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The value of the :authority header in the gRPC health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_GrpcHealthCheck) Reset()         { *m = HealthCheckConfig_GrpcHealthCheck{} }
func (m *HealthCheckConfig_GrpcHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_GrpcHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_GrpcHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 1}
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Size(m)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_GrpcHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheckConfig_GrpcHealthCheck) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

//
//Envoy cluster health check configuration
//
//See [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.11.0/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection) for more information on how health checks work in envoy
//Or examine the [config definition](https://github.com/envoyproxy/envoy/blob/v1.11.0/api/envoy/api/v2/cluster/outlier_detection.proto#L22).
type OutlierDetection struct {
	// The number of consecutive 5xx responses or local origin errors that are mapped
	// to 5xx error codes before a consecutive 5xx ejection
	// occurs. Defaults to 5.
	Consecutive_5Xx *types.UInt32Value `protobuf:"bytes,1,opt,name=consecutive_5xx,json=consecutive5xx,proto3" json:"consecutive_5xx,omitempty"`
	// The time interval between ejection analysis sweeps. This can result in
	// both new ejections as well as hosts being returned to service. Defaults
	// to 10000ms or 10s.
	Interval *types.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// The base time that a host is ejected for. The real time is equal to the
	// base time multiplied by the number of times the host has been ejected.
	// Defaults to 30000ms or 30s.
	BaseEjectionTime *types.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// The minimum number of total requests that must be collected in one
	// interval (as defined by the interval duration above) to include this host
	// in success rate based outlier detection. If the volume is lower than this
	// setting, outlier detection via success rate statistics is not performed
	// for that host. Defaults to 100.
	SuccessRateRequestVolume *types.UInt32Value `protobuf:"bytes,8,opt,name=success_rate_request_volume,json=successRateRequestVolume,proto3" json:"success_rate_request_volume,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}           `json:"-"`
	XXX_unrecognized         []byte             `json:"-"`
	XXX_sizecache            int32              `json:"-"`
}

func (m *OutlierDetection) Reset()         { *m = OutlierDetection{} }
func (m *OutlierDetection) String() string { return proto.CompactTextString(m) }
func (*OutlierDetection) ProtoMessage()    {}
func (*OutlierDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{1}
}
func (m *OutlierDetection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutlierDetection.Unmarshal(m, b)
}
func (m *OutlierDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutlierDetection.Marshal(b, m, deterministic)
}
func (m *OutlierDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierDetection.Merge(m, src)
}
func (m *OutlierDetection) XXX_Size() int {
	return xxx_messageInfo_OutlierDetection.Size(m)
}
func (m *OutlierDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierDetection.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierDetection proto.InternalMessageInfo

func (m *OutlierDetection) GetConsecutive_5Xx() *types.UInt32Value {
	if m != nil {
		return m.Consecutive_5Xx
	}
	return nil
}

func (m *OutlierDetection) GetInterval() *types.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *OutlierDetection) GetBaseEjectionTime() *types.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateRequestVolume() *types.UInt32Value {
	if m != nil {
		return m.SuccessRateRequestVolume
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheckConfig)(nil), "gloo.solo.io.HealthCheckConfig")
	proto.RegisterType((*HealthCheckConfig_HttpHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.HttpHealthCheck")
	proto.RegisterType((*HealthCheckConfig_GrpcHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.GrpcHealthCheck")
	proto.RegisterType((*OutlierDetection)(nil), "gloo.solo.io.OutlierDetection")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/health_check.proto", fileDescriptor_17ca67440953dae5)
}

var fileDescriptor_17ca67440953dae5 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x4e, 0x14, 0x41,
	0x10, 0xc6, 0x99, 0x65, 0x57, 0x76, 0x1b, 0xc2, 0x42, 0x6b, 0xc2, 0xb8, 0x20, 0x22, 0x27, 0x62,
	0xe2, 0x8c, 0x2e, 0xc1, 0xc4, 0x78, 0x30, 0x2e, 0x10, 0xe1, 0xa0, 0x26, 0x23, 0x72, 0xd0, 0x98,
	0x49, 0x6f, 0x53, 0xcc, 0x34, 0xcc, 0x4e, 0x8f, 0xdd, 0xd5, 0xeb, 0x72, 0xf7, 0x21, 0x7c, 0x04,
	0xe3, 0x13, 0x18, 0x4f, 0x3c, 0x81, 0x57, 0x8f, 0x26, 0xde, 0x78, 0x0b, 0x33, 0x7f, 0x16, 0x17,
	0x26, 0x92, 0xe5, 0x56, 0xf3, 0x75, 0x7f, 0xbf, 0xae, 0xae, 0xaa, 0x69, 0xf2, 0x2c, 0x10, 0x18,
	0x9a, 0xae, 0xc3, 0x65, 0xcf, 0xd5, 0x32, 0x92, 0x0f, 0x84, 0x74, 0x83, 0x48, 0x4a, 0x37, 0x51,
	0xf2, 0x08, 0x38, 0xea, 0xfc, 0x8b, 0x25, 0xc2, 0xed, 0x3f, 0x72, 0x43, 0x60, 0x11, 0x86, 0x3e,
	0x0f, 0x81, 0x1f, 0x3b, 0x89, 0x92, 0x28, 0xe9, 0x4c, 0xba, 0xee, 0xa4, 0x56, 0x47, 0xc8, 0xd6,
	0x42, 0x9f, 0x45, 0xe2, 0x80, 0x21, 0xb8, 0xc3, 0x20, 0xdf, 0xd6, 0xba, 0x15, 0xc8, 0x40, 0x66,
	0xa1, 0x9b, 0x46, 0x85, 0xba, 0x1c, 0x48, 0x19, 0x44, 0xe0, 0x66, 0x5f, 0x5d, 0x73, 0xe8, 0x7e,
	0x52, 0x2c, 0x49, 0x40, 0xe9, 0xff, 0xad, 0x1f, 0x18, 0xc5, 0x50, 0xc8, 0x38, 0x5f, 0x5f, 0xfd,
	0x55, 0x23, 0xf3, 0x3b, 0x59, 0x4e, 0x9b, 0x69, 0x4a, 0x9b, 0x32, 0x3e, 0x14, 0x01, 0x7d, 0x42,
	0xa6, 0x50, 0xf4, 0x40, 0x1a, 0xb4, 0xad, 0x15, 0x6b, 0x6d, 0xba, 0x7d, 0xdb, 0xc9, 0x39, 0xce,
	0x90, 0xe3, 0x6c, 0x15, 0x9c, 0x4e, 0xf5, 0xcb, 0xef, 0xbb, 0x96, 0x37, 0xdc, 0x4f, 0x9f, 0x92,
	0xba, 0x88, 0x11, 0x54, 0x9f, 0x45, 0x76, 0x65, 0x3c, 0xef, 0xb9, 0x81, 0xbe, 0x24, 0x37, 0x4d,
	0x9c, 0x97, 0xe8, 0xc4, 0xc7, 0x50, 0x81, 0x0e, 0x65, 0x74, 0x60, 0x57, 0x33, 0xce, 0x52, 0x89,
	0xf3, 0x76, 0x37, 0xc6, 0xf5, 0xf6, 0x3e, 0x8b, 0x0c, 0x78, 0xf4, 0xdc, 0xb8, 0x37, 0xf4, 0xd1,
	0x5d, 0x32, 0x5f, 0x86, 0xd5, 0xc6, 0x80, 0xcd, 0x95, 0x50, 0x1f, 0xc8, 0x7c, 0x88, 0x98, 0xf8,
	0xa3, 0xfd, 0xb3, 0xeb, 0x19, 0xca, 0x75, 0x46, 0x1b, 0xe8, 0x94, 0xaa, 0xe9, 0xec, 0x20, 0x26,
	0x23, 0xea, 0xce, 0x84, 0xd7, 0x0c, 0x2f, 0x4a, 0x29, 0x3e, 0x50, 0x09, 0xbf, 0x88, 0x9f, 0x1e,
	0x0f, 0xff, 0x42, 0x25, 0xfc, 0x12, 0x3e, 0xb8, 0x28, 0xb5, 0x3e, 0x5b, 0xa4, 0x79, 0x29, 0x0b,
	0x4a, 0x49, 0x35, 0x94, 0x3a, 0x6f, 0x70, 0xc3, 0xcb, 0x62, 0x7a, 0x87, 0x54, 0x13, 0x86, 0x61,
	0xd6, 0xb8, 0x46, 0xa7, 0xf1, 0xe3, 0xec, 0x74, 0xb2, 0xaa, 0x2a, 0x2b, 0x96, 0x97, 0xc9, 0xf4,
	0x1e, 0x99, 0xd1, 0xa0, 0xfa, 0x82, 0x83, 0x1f, 0xb3, 0x1e, 0x64, 0xa5, 0x6c, 0x78, 0xd3, 0x85,
	0xf6, 0x8a, 0xf5, 0x80, 0x2e, 0x92, 0x86, 0xd1, 0xe0, 0xa7, 0xf7, 0x6b, 0xdb, 0x53, 0x2b, 0xd6,
	0x5a, 0xdd, 0xab, 0x1b, 0x0d, 0xe9, 0xe1, 0xed, 0x96, 0x47, 0x9a, 0x97, 0x92, 0x2d, 0x21, 0xad,
	0x32, 0x72, 0x89, 0x34, 0x98, 0xc1, 0x50, 0x2a, 0x81, 0x27, 0x79, 0x66, 0xde, 0x3f, 0xa1, 0xb3,
	0x40, 0x66, 0x47, 0x8b, 0x06, 0x8a, 0xd6, 0xbe, 0x9f, 0x9d, 0x4e, 0x5a, 0xab, 0x3f, 0x2b, 0x64,
	0xee, 0xb5, 0xc1, 0x48, 0x80, 0xda, 0x02, 0x04, 0x9e, 0x0e, 0x1c, 0xdd, 0x26, 0x4d, 0x2e, 0x63,
	0x0d, 0xdc, 0xa0, 0xe8, 0x83, 0xbf, 0x31, 0x18, 0x14, 0x03, 0x7e, 0xf5, 0x3c, 0xcc, 0x8e, 0x98,
	0x36, 0x06, 0x03, 0xfa, 0xfc, 0x3a, 0x43, 0x4e, 0xd2, 0x32, 0xd6, 0xbe, 0x59, 0x95, 0xfb, 0x13,
	0x23, 0xa3, 0xfe, 0x86, 0xd0, 0x2e, 0xd3, 0xe0, 0xc3, 0x51, 0x9e, 0x9a, 0x9f, 0xfe, 0x40, 0xf6,
	0xe4, 0x75, 0x60, 0x73, 0x29, 0x60, 0xbb, 0xf0, 0xef, 0x89, 0x1e, 0xd0, 0xf7, 0x64, 0x51, 0x1b,
	0xce, 0x41, 0x6b, 0x5f, 0x31, 0x04, 0x5f, 0xc1, 0x47, 0x03, 0x1a, 0xfd, 0xbe, 0x8c, 0x4c, 0x0f,
	0x8a, 0x79, 0xbd, 0xfa, 0xaa, 0x76, 0x01, 0xf0, 0x18, 0x82, 0x97, 0xdb, 0xf7, 0x33, 0x77, 0xe7,
	0xf1, 0xd7, 0x3f, 0xcb, 0xd6, 0xbb, 0x87, 0xe3, 0x3d, 0x77, 0xc9, 0x71, 0x50, 0x3c, 0x79, 0xdd,
	0x1b, 0xd9, 0x39, 0xeb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xac, 0x4e, 0x49, 0x29, 0x05,
	0x00, 0x00,
}

func (this *HealthCheckConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig)
	if !ok {
		that2, ok := that.(HealthCheckConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if this.Interval != nil && that1.Interval != nil {
		if *this.Interval != *that1.Interval {
			return false
		}
	} else if this.Interval != nil {
		return false
	} else if that1.Interval != nil {
		return false
	}
	if !this.UnhealthyThreshold.Equal(that1.UnhealthyThreshold) {
		return false
	}
	if !this.HealthyThreshold.Equal(that1.HealthyThreshold) {
		return false
	}
	if that1.HealthChecker == nil {
		if this.HealthChecker != nil {
			return false
		}
	} else if this.HealthChecker == nil {
		return false
	} else if !this.HealthChecker.Equal(that1.HealthChecker) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_HttpHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_HttpHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_HttpHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_GrpcHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_GrpcHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_GrpcHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcHealthCheck.Equal(that1.GrpcHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_HttpHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.UseHttp2 != that1.UseHttp2 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_GrpcHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_GrpcHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_GrpcHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OutlierDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierDetection)
	if !ok {
		that2, ok := that.(OutlierDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consecutive_5Xx.Equal(that1.Consecutive_5Xx) {
		return false
	}
	if !this.Interval.Equal(that1.Interval) {
		return false
	}
	if !this.BaseEjectionTime.Equal(that1.BaseEjectionTime) {
		return false
	}
	if !this.SuccessRateRequestVolume.Equal(that1.SuccessRateRequestVolume) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/health_check.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Envoy cluster health check configuration
//
//See [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.11.0/intro/arch_overview/upstream/health_checking#arch-overview-health-checking) for more information on how health checks work in envoy
//Or examine the [config definition](https://www.envoyproxy.io/docs/envoy/v1.11.0/api-v2/api/v2/core/health_check.proto#envoy-api-msg-core-healthcheck).
type HealthCheckConfig struct {
	Timeout  *time.Duration `protobuf:"bytes,1,opt,name=timeout,proto3,stdduration" json:"timeout,omitempty"`
	Interval *time.Duration `protobuf:"bytes,2,opt,name=interval,proto3,stdduration" json:"interval,omitempty"`
	// The number of unhealthy health checks required before a host is marked
	// unhealthy. Note that for *http* health checking if a host responds with 503
	// this threshold is ignored and the host is considered unhealthy immediately.
	UnhealthyThreshold *types.UInt32Value `protobuf:"bytes,4,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// The number of healthy health checks required before a host is marked
	// healthy. Note that during startup, only a single successful health check is
	// required to mark a host healthy.
	HealthyThreshold *types.UInt32Value `protobuf:"bytes,5,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// Types that are valid to be assigned to HealthChecker:
	//	*HealthCheckConfig_HttpHealthCheck_
	//	*HealthCheckConfig_GrpcHealthCheck_
	HealthChecker        isHealthCheckConfig_HealthChecker `protobuf_oneof:"health_checker"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HealthCheckConfig) Reset()         { *m = HealthCheckConfig{} }
func (m *HealthCheckConfig) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig) ProtoMessage()    {}
func (*HealthCheckConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0}
}
func (m *HealthCheckConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig.Unmarshal(m, b)
}
func (m *HealthCheckConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig.Merge(m, src)
}
func (m *HealthCheckConfig) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig.Size(m)
}
func (m *HealthCheckConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig proto.InternalMessageInfo

type isHealthCheckConfig_HealthChecker interface {
	isHealthCheckConfig_HealthChecker()
	Equal(interface{}) bool
}

type HealthCheckConfig_HttpHealthCheck_ struct {
	HttpHealthCheck *HealthCheckConfig_HttpHealthCheck `protobuf:"bytes,8,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof"`
}
type HealthCheckConfig_GrpcHealthCheck_ struct {
	GrpcHealthCheck *HealthCheckConfig_GrpcHealthCheck `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3,oneof"`
}

func (*HealthCheckConfig_HttpHealthCheck_) isHealthCheckConfig_HealthChecker() {}
func (*HealthCheckConfig_GrpcHealthCheck_) isHealthCheckConfig_HealthChecker() {}

func (m *HealthCheckConfig) GetHealthChecker() isHealthCheckConfig_HealthChecker {
	if m != nil {
		return m.HealthChecker
	}
	return nil
}

func (m *HealthCheckConfig) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheckConfig) GetInterval() *time.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheckConfig) GetUnhealthyThreshold() *types.UInt32Value {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return nil
}

func (m *HealthCheckConfig) GetHealthyThreshold() *types.UInt32Value {
	if m != nil {
		return m.HealthyThreshold
	}
	return nil
}

func (m *HealthCheckConfig) GetHttpHealthCheck() *HealthCheckConfig_HttpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_HttpHealthCheck_); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *HealthCheckConfig) GetGrpcHealthCheck() *HealthCheckConfig_GrpcHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_GrpcHealthCheck_); ok {
		return x.GrpcHealthCheck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheckConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheckConfig_HttpHealthCheck_)(nil),
		(*HealthCheckConfig_GrpcHealthCheck_)(nil),
	}
}

type HealthCheckConfig_HttpHealthCheck struct {
	// The value of the host header in the HTTP health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Specifies the HTTP path that will be requested during health checking. For example
	// */healthcheck*.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// An optional service name parameter which is used to validate the identity of
	// the health checked cluster. See the :ref:`architecture overview
	// <arch_overview_health_checking_identity>` for more information.
	ServiceName string `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// If set, health checks will be made using http/2.
	UseHttp2             bool     `protobuf:"varint,7,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_HttpHealthCheck) Reset()         { *m = HealthCheckConfig_HttpHealthCheck{} }
func (m *HealthCheckConfig_HttpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_HttpHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 0}
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Size(m)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_HttpHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_HttpHealthCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetUseHttp2() bool {
	if m != nil {
		return m.UseHttp2
	}
	return false
}

// `grpc.health.v1.Health
// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
// healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
// for details.
type HealthCheckConfig_GrpcHealthCheck struct {
	// An optional service name parameter which will be sent to gRPC service in
	// `grpc.health.v1.HealthCheckRequest
	// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
	// message. See `gRPC health-checking overview
	// <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The value of the :authority header in the gRPC health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_GrpcHealthCheck) Reset()         { *m = HealthCheckConfig_GrpcHealthCheck{} }
func (m *HealthCheckConfig_GrpcHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_GrpcHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_GrpcHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 1}
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Size(m)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_GrpcHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheckConfig_GrpcHealthCheck) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

//
//Envoy cluster health check configuration
//
//See [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.11.0/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection) for more information on how health checks work in envoy
//Or examine the [config definition](https://github.com/envoyproxy/envoy/blob/v1.11.0/api/envoy/api/v2/cluster/outlier_detection.proto#L22).
type OutlierDetection struct {
	// The number of consecutive 5xx responses or local origin errors that are mapped
	// to 5xx error codes before a consecutive 5xx ejection
	// occurs. Defaults to 5.
	Consecutive_5Xx *types.UInt32Value `protobuf:"bytes,1,opt,name=consecutive_5xx,json=consecutive5xx,proto3" json:"consecutive_5xx,omitempty"`
	// The time interval between ejection analysis sweeps. This can result in
	// both new ejections as well as hosts being returned to service. Defaults
	// to 10000ms or 10s.
	Interval *types.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// The base time that a host is ejected for. The real time is equal to the
	// base time multiplied by the number of times the host has been ejected.
	// Defaults to 30000ms or 30s.
	BaseEjectionTime *types.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// The maximum % of an upstream cluster that can be ejected due to outlier
	// detection. Defaults to 10% but will eject at least one host regardless of the value.
	MaxEjectionPercent *types.UInt32Value `protobuf:"bytes,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	// The % chance that a host will be actually ejected when an outlier status
	// is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutive_5Xx *types.UInt32Value `protobuf:"bytes,5,opt,name=enforcing_consecutive_5xx,json=enforcingConsecutive5xx,proto3" json:"enforcing_consecutive_5xx,omitempty"`
	// The % chance that a host will be actually ejected when an outlier status
	// is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate *types.UInt32Value `protobuf:"bytes,6,opt,name=enforcing_success_rate,json=enforcingSuccessRate,proto3" json:"enforcing_success_rate,omitempty"`
	// The number of hosts in a cluster that must have enough request volume to
	// detect success rate outliers. If the number of hosts is less than this
	// setting, outlier detection via success rate statistics is not performed
	// for any host in the cluster. Defaults to 5.
	SuccessRateMinimumHosts *types.UInt32Value `protobuf:"bytes,7,opt,name=success_rate_minimum_hosts,json=successRateMinimumHosts,proto3" json:"success_rate_minimum_hosts,omitempty"`
	// The minimum number of total requests that must be collected in one
	// interval (as defined by the interval duration above) to include this host
	// in success rate based outlier detection. If the volume is lower than this
	// setting, outlier detection via success rate statistics is not performed
	// for that host. Defaults to 100.
	SuccessRateRequestVolume *types.UInt32Value `protobuf:"bytes,8,opt,name=success_rate_request_volume,json=successRateRequestVolume,proto3" json:"success_rate_request_volume,omitempty"`
	// This factor is used to determine the ejection threshold for success rate
	// outlier ejection. The ejection threshold is the difference between the
	// mean success rate, and the product of this factor and the standard
	// deviation of the mean success rate: mean - (stdev *
	// success_rate_stdev_factor). This factor is divided by a thousand to get a
	// double. That is, if the desired factor is 1.9, the runtime value should
	// be 1900. Defaults to 1900.
	SuccessRateStdevFactor *types.UInt32Value `protobuf:"bytes,9,opt,name=success_rate_stdev_factor,json=successRateStdevFactor,proto3" json:"success_rate_stdev_factor,omitempty"`
	// The number of consecutive gateway failures (502, 503, 504 status codes)
	// before a consecutive gateway failure ejection occurs. Defaults to 5.
	ConsecutiveGatewayFailure *types.UInt32Value `protobuf:"bytes,10,opt,name=consecutive_gateway_failure,json=consecutiveGatewayFailure,proto3" json:"consecutive_gateway_failure,omitempty"`
	// The % chance that a host will be actually ejected when an outlier status
	// is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveGatewayFailure *types.UInt32Value `protobuf:"bytes,11,opt,name=enforcing_consecutive_gateway_failure,json=enforcingConsecutiveGatewayFailure,proto3" json:"enforcing_consecutive_gateway_failure,omitempty"`
	// Determines whether to distinguish local origin failures from external errors. If set to true
	// the following configuration parameters are taken into account:
	// :ref:`consecutive_local_origin_failure<envoy_api_field_cluster.OutlierDetection.consecutive_local_origin_failure>`,
	// :ref:`enforcing_consecutive_local_origin_failure<envoy_api_field_cluster.OutlierDetection.enforcing_consecutive_local_origin_failure>`
	// and
	// :ref:`enforcing_local_origin_success_rate<envoy_api_field_cluster.OutlierDetection.enforcing_local_origin_success_rate>`.
	// Defaults to false.
	SplitExternalLocalOriginErrors bool `protobuf:"varint,12,opt,name=split_external_local_origin_errors,json=splitExternalLocalOriginErrors,proto3" json:"split_external_local_origin_errors,omitempty"`
	// The number of consecutive locally originated failures before ejection
	// occurs. Defaults to 5. Parameter takes effect only when
	// :ref:`split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is set to true.
	ConsecutiveLocalOriginFailure *types.UInt32Value `protobuf:"bytes,13,opt,name=consecutive_local_origin_failure,json=consecutiveLocalOriginFailure,proto3" json:"consecutive_local_origin_failure,omitempty"`
	// The % chance that a host will be actually ejected when an outlier status
	// is detected through consecutive locally originated failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 100.
	// Parameter takes effect only when
	// :ref:`split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is set to true.
	EnforcingConsecutiveLocalOriginFailure *types.UInt32Value `protobuf:"bytes,14,opt,name=enforcing_consecutive_local_origin_failure,json=enforcingConsecutiveLocalOriginFailure,proto3" json:"enforcing_consecutive_local_origin_failure,omitempty"`
	// The % chance that a host will be actually ejected when an outlier status
	// is detected through success rate statistics for locally originated errors.
	// This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	// Parameter takes effect only when
	// :ref:`split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is set to true.
	EnforcingLocalOriginSuccessRate *types.UInt32Value `protobuf:"bytes,15,opt,name=enforcing_local_origin_success_rate,json=enforcingLocalOriginSuccessRate,proto3" json:"enforcing_local_origin_success_rate,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}           `json:"-"`
	XXX_unrecognized                []byte             `json:"-"`
	XXX_sizecache                   int32              `json:"-"`
}

func (m *OutlierDetection) Reset()         { *m = OutlierDetection{} }
func (m *OutlierDetection) String() string { return proto.CompactTextString(m) }
func (*OutlierDetection) ProtoMessage()    {}
func (*OutlierDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{1}
}
func (m *OutlierDetection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutlierDetection.Unmarshal(m, b)
}
func (m *OutlierDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutlierDetection.Marshal(b, m, deterministic)
}
func (m *OutlierDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierDetection.Merge(m, src)
}
func (m *OutlierDetection) XXX_Size() int {
	return xxx_messageInfo_OutlierDetection.Size(m)
}
func (m *OutlierDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierDetection.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierDetection proto.InternalMessageInfo

func (m *OutlierDetection) GetConsecutive_5Xx() *types.UInt32Value {
	if m != nil {
		return m.Consecutive_5Xx
	}
	return nil
}

func (m *OutlierDetection) GetInterval() *types.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *OutlierDetection) GetBaseEjectionTime() *types.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *OutlierDetection) GetMaxEjectionPercent() *types.UInt32Value {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingConsecutive_5Xx() *types.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutive_5Xx
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingSuccessRate() *types.UInt32Value {
	if m != nil {
		return m.EnforcingSuccessRate
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateMinimumHosts() *types.UInt32Value {
	if m != nil {
		return m.SuccessRateMinimumHosts
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateRequestVolume() *types.UInt32Value {
	if m != nil {
		return m.SuccessRateRequestVolume
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateStdevFactor() *types.UInt32Value {
	if m != nil {
		return m.SuccessRateStdevFactor
	}
	return nil
}

func (m *OutlierDetection) GetConsecutiveGatewayFailure() *types.UInt32Value {
	if m != nil {
		return m.ConsecutiveGatewayFailure
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingConsecutiveGatewayFailure() *types.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutiveGatewayFailure
	}
	return nil
}

func (m *OutlierDetection) GetSplitExternalLocalOriginErrors() bool {
	if m != nil {
		return m.SplitExternalLocalOriginErrors
	}
	return false
}

func (m *OutlierDetection) GetConsecutiveLocalOriginFailure() *types.UInt32Value {
	if m != nil {
		return m.ConsecutiveLocalOriginFailure
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingConsecutiveLocalOriginFailure() *types.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutiveLocalOriginFailure
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingLocalOriginSuccessRate() *types.UInt32Value {
	if m != nil {
		return m.EnforcingLocalOriginSuccessRate
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheckConfig)(nil), "gloo.solo.io.HealthCheckConfig")
	proto.RegisterType((*HealthCheckConfig_HttpHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.HttpHealthCheck")
	proto.RegisterType((*HealthCheckConfig_GrpcHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.GrpcHealthCheck")
	proto.RegisterType((*OutlierDetection)(nil), "gloo.solo.io.OutlierDetection")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/health_check.proto", fileDescriptor_17ca67440953dae5)
}

var fileDescriptor_17ca67440953dae5 = []byte{
	// 888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc7, 0xbb, 0x89, 0xdd, 0xc6, 0xe3, 0x10, 0x27, 0x43, 0xd4, 0x6c, 0x9c, 0x36, 0x0d, 0x41,
	0xa0, 0x2a, 0x12, 0xbb, 0x90, 0xaa, 0x48, 0x88, 0x0b, 0x44, 0xd2, 0xb4, 0x29, 0xa2, 0x14, 0x6d,
	0x4a, 0x11, 0x1f, 0xd5, 0x68, 0x32, 0x3e, 0xde, 0x9d, 0x76, 0x77, 0x67, 0x99, 0x0f, 0xd7, 0xe1,
	0x16, 0x1e, 0x82, 0x47, 0x40, 0xf0, 0x02, 0x88, 0xab, 0xbe, 0x05, 0x97, 0x48, 0xdc, 0xf5, 0x2d,
	0xd0, 0xce, 0xfa, 0x63, 0xd7, 0x36, 0xc1, 0xbe, 0x1b, 0x9f, 0x3d, 0xff, 0xdf, 0x39, 0xfe, 0x9f,
	0x33, 0xab, 0x45, 0x9f, 0x84, 0x5c, 0x47, 0xe6, 0xdc, 0x63, 0x22, 0xf1, 0x95, 0x88, 0xc5, 0x7b,
	0x5c, 0xf8, 0x61, 0x2c, 0x84, 0x9f, 0x49, 0xf1, 0x1c, 0x98, 0x56, 0xc5, 0x2f, 0x9a, 0x71, 0xbf,
	0xf7, 0x81, 0x1f, 0x01, 0x8d, 0x75, 0x44, 0x58, 0x04, 0xec, 0x85, 0x97, 0x49, 0xa1, 0x05, 0x5e,
	0xcd, 0x9f, 0x7b, 0xb9, 0xd4, 0xe3, 0xa2, 0xbd, 0xd5, 0xa3, 0x31, 0xef, 0x50, 0x0d, 0xfe, 0xf0,
	0x50, 0xa4, 0xb5, 0x37, 0x43, 0x11, 0x0a, 0x7b, 0xf4, 0xf3, 0xd3, 0x20, 0xba, 0x1b, 0x0a, 0x11,
	0xc6, 0xe0, 0xdb, 0x5f, 0xe7, 0xa6, 0xeb, 0xbf, 0x94, 0x34, 0xcb, 0x40, 0xaa, 0xff, 0x7a, 0xde,
	0x31, 0x92, 0x6a, 0x2e, 0xd2, 0xe2, 0xf9, 0xfe, 0x5f, 0x75, 0xb4, 0x71, 0x6a, 0x7b, 0x3a, 0xce,
	0x5b, 0x3a, 0x16, 0x69, 0x97, 0x87, 0xf8, 0x23, 0x74, 0x4d, 0xf3, 0x04, 0x84, 0xd1, 0xae, 0xb3,
	0xe7, 0xdc, 0x6e, 0x1e, 0x6e, 0x7b, 0x05, 0xc7, 0x1b, 0x72, 0xbc, 0x7b, 0x03, 0xce, 0x51, 0xed,
	0x97, 0xbf, 0x6f, 0x39, 0xc1, 0x30, 0x1f, 0x7f, 0x8c, 0x56, 0x78, 0xaa, 0x41, 0xf6, 0x68, 0xec,
	0x2e, 0xcd, 0xa7, 0x1d, 0x09, 0xf0, 0x23, 0xf4, 0xa6, 0x49, 0x0b, 0x8b, 0x2e, 0x88, 0x8e, 0x24,
	0xa8, 0x48, 0xc4, 0x1d, 0xb7, 0x66, 0x39, 0x37, 0xa6, 0x38, 0x5f, 0x3d, 0x4c, 0xf5, 0x9d, 0xc3,
	0xa7, 0x34, 0x36, 0x10, 0xe0, 0x91, 0xf0, 0xc9, 0x50, 0x87, 0x1f, 0xa2, 0x8d, 0x69, 0x58, 0x7d,
	0x0e, 0xd8, 0xfa, 0x14, 0xea, 0x19, 0xda, 0x88, 0xb4, 0xce, 0x48, 0x79, 0x7e, 0xee, 0x8a, 0x45,
	0xf9, 0x5e, 0x79, 0x80, 0xde, 0x94, 0x9b, 0xde, 0xa9, 0xd6, 0x59, 0x29, 0x7a, 0x7a, 0x25, 0x68,
	0x45, 0xd5, 0x50, 0x8e, 0x0f, 0x65, 0xc6, 0xaa, 0xf8, 0xe6, 0x7c, 0xf8, 0x07, 0x32, 0x63, 0x13,
	0xf8, 0xb0, 0x1a, 0x6a, 0xff, 0xec, 0xa0, 0xd6, 0x44, 0x17, 0x18, 0xa3, 0x5a, 0x24, 0x54, 0x31,
	0xe0, 0x46, 0x60, 0xcf, 0xf8, 0x26, 0xaa, 0x65, 0x54, 0x47, 0x76, 0x70, 0x8d, 0xa3, 0xc6, 0x9f,
	0xaf, 0x5f, 0x2d, 0xd7, 0xe4, 0xd2, 0x9e, 0x13, 0xd8, 0x30, 0x7e, 0x0b, 0xad, 0x2a, 0x90, 0x3d,
	0xce, 0x80, 0xa4, 0x34, 0x01, 0x6b, 0x65, 0x23, 0x68, 0x0e, 0x62, 0x5f, 0xd0, 0x04, 0xf0, 0x0e,
	0x6a, 0x18, 0x05, 0x24, 0xff, 0x7f, 0x87, 0xee, 0xb5, 0x3d, 0xe7, 0xf6, 0x4a, 0xb0, 0x62, 0x14,
	0xe4, 0xc5, 0x0f, 0xdb, 0x01, 0x6a, 0x4d, 0x34, 0x3b, 0x85, 0x74, 0xa6, 0x91, 0x37, 0x50, 0x83,
	0x1a, 0x1d, 0x09, 0xc9, 0xf5, 0x45, 0xd1, 0x59, 0x30, 0x0e, 0x1c, 0x6d, 0xa1, 0xb5, 0xb2, 0x69,
	0x20, 0x71, 0xfd, 0x8f, 0xd7, 0xaf, 0x96, 0x9d, 0xfd, 0xdf, 0x9b, 0x68, 0xfd, 0xb1, 0xd1, 0x31,
	0x07, 0x79, 0x0f, 0x34, 0xb0, 0x7c, 0xe1, 0xf0, 0x09, 0x6a, 0x31, 0x91, 0x2a, 0x60, 0x46, 0xf3,
	0x1e, 0x90, 0xbb, 0xfd, 0xfe, 0x60, 0xc1, 0x2f, 0xdf, 0x87, 0xb5, 0x92, 0xe8, 0x6e, 0xbf, 0x8f,
	0x3f, 0x5d, 0x64, 0xc9, 0x51, 0x6e, 0x63, 0xfd, 0x37, 0x67, 0xe9, 0xe0, 0x4a, 0x69, 0xd5, 0xcf,
	0x10, 0x3e, 0xa7, 0x0a, 0x08, 0x3c, 0x2f, 0x5a, 0x23, 0xf9, 0x05, 0x72, 0x97, 0x17, 0x81, 0xad,
	0xe7, 0x80, 0x93, 0x81, 0xfe, 0x09, 0x4f, 0x00, 0x7f, 0x83, 0x36, 0x13, 0xda, 0x1f, 0x33, 0x33,
	0x90, 0x0c, 0x52, 0x3d, 0xcf, 0x05, 0x1a, 0x4c, 0xfb, 0x60, 0xc9, 0xed, 0x04, 0x38, 0xa1, 0xfd,
	0x21, 0xf7, 0xcb, 0x02, 0x81, 0x19, 0xda, 0x86, 0xb4, 0x2b, 0x24, 0xe3, 0x69, 0x48, 0x26, 0x3d,
	0xac, 0x2f, 0xc6, 0xdf, 0x1a, 0x91, 0x8e, 0xab, 0xbe, 0x3e, 0x43, 0xd7, 0xc7, 0x45, 0x94, 0x61,
	0x0c, 0x94, 0x22, 0x92, 0x6a, 0x70, 0xaf, 0x2e, 0x56, 0x61, 0x73, 0x84, 0x39, 0x2b, 0x28, 0x01,
	0xd5, 0xb9, 0x3d, 0xed, 0x32, 0x94, 0x24, 0x3c, 0xe5, 0x89, 0x49, 0x48, 0xbe, 0xfb, 0xca, 0x6e,
	0xeb, 0xff, 0x2d, 0xc2, 0x96, 0x1a, 0xe3, 0x1e, 0x15, 0xea, 0xd3, 0x5c, 0x8c, 0xbf, 0x43, 0x3b,
	0x15, 0xb4, 0x84, 0x1f, 0x0c, 0x28, 0x4d, 0x7a, 0x22, 0x36, 0x09, 0x0c, 0xde, 0x14, 0x97, 0xb3,
	0xdd, 0x12, 0x3b, 0x28, 0xe4, 0x4f, 0xad, 0x1a, 0x7f, 0x8d, 0xb6, 0x2b, 0x70, 0xa5, 0x3b, 0xd0,
	0x23, 0x5d, 0xca, 0xb4, 0x90, 0x6e, 0x63, 0x0e, 0xf4, 0xf5, 0x12, 0xfa, 0x2c, 0x17, 0xdf, 0xb7,
	0x5a, 0xfc, 0x3d, 0xda, 0x29, 0x8f, 0x32, 0xa4, 0x1a, 0x5e, 0xd2, 0x0b, 0xd2, 0xa5, 0x3c, 0x36,
	0x12, 0x5c, 0x34, 0x07, 0x7a, 0xbb, 0x04, 0x78, 0x50, 0xe8, 0xef, 0x17, 0x72, 0xfc, 0x23, 0x7a,
	0x67, 0xf6, 0xca, 0x4c, 0xd6, 0x69, 0x2e, 0x36, 0xdc, 0xfd, 0x59, 0xeb, 0x33, 0x51, 0xfb, 0x33,
	0xb4, 0xaf, 0xb2, 0x98, 0x6b, 0x02, 0x7d, 0x0d, 0x32, 0xa5, 0x31, 0x89, 0x05, 0xa3, 0x31, 0x11,
	0x92, 0x87, 0x3c, 0x25, 0x20, 0xa5, 0x90, 0xca, 0x5d, 0xb5, 0x2f, 0xa8, 0x5d, 0x9b, 0x79, 0x32,
	0x48, 0xfc, 0x3c, 0xcf, 0x7b, 0x6c, 0xd3, 0x4e, 0x6c, 0x16, 0x06, 0xb4, 0x57, 0xee, 0xbe, 0x02,
	0x1a, 0xfe, 0x85, 0x37, 0xe6, 0xb0, 0xea, 0x66, 0x89, 0x52, 0xaa, 0x32, 0x6c, 0xf9, 0x27, 0x07,
	0x1d, 0xcc, 0xf6, 0x6b, 0x66, 0xc5, 0xb5, 0xc5, 0x4c, 0x7b, 0x77, 0x96, 0x69, 0x33, 0xba, 0x30,
	0xe8, 0xed, 0x71, 0x13, 0x95, 0xc2, 0x95, 0xfb, 0xd8, 0x5a, 0xac, 0xfa, 0xad, 0x11, 0xb3, 0x54,
	0xb2, 0x74, 0x35, 0x8f, 0x3e, 0xfc, 0xf5, 0x9f, 0x5d, 0xe7, 0xdb, 0xf7, 0xe7, 0xfb, 0x96, 0xca,
	0x5e, 0x84, 0x83, 0xef, 0xa9, 0xf3, 0xab, 0xb6, 0xf2, 0x9d, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x9f, 0xe4, 0x5e, 0x88, 0x86, 0x09, 0x00, 0x00,
}

func (this *HealthCheckConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig)
	if !ok {
		that2, ok := that.(HealthCheckConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if this.Interval != nil && that1.Interval != nil {
		if *this.Interval != *that1.Interval {
			return false
		}
	} else if this.Interval != nil {
		return false
	} else if that1.Interval != nil {
		return false
	}
	if !this.UnhealthyThreshold.Equal(that1.UnhealthyThreshold) {
		return false
	}
	if !this.HealthyThreshold.Equal(that1.HealthyThreshold) {
		return false
	}
	if that1.HealthChecker == nil {
		if this.HealthChecker != nil {
			return false
		}
	} else if this.HealthChecker == nil {
		return false
	} else if !this.HealthChecker.Equal(that1.HealthChecker) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_HttpHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_HttpHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_HttpHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_GrpcHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_GrpcHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_GrpcHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcHealthCheck.Equal(that1.GrpcHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_HttpHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.UseHttp2 != that1.UseHttp2 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_GrpcHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_GrpcHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_GrpcHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OutlierDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierDetection)
	if !ok {
		that2, ok := that.(OutlierDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consecutive_5Xx.Equal(that1.Consecutive_5Xx) {
		return false
	}
	if !this.Interval.Equal(that1.Interval) {
		return false
	}
	if !this.BaseEjectionTime.Equal(that1.BaseEjectionTime) {
		return false
	}
	if !this.MaxEjectionPercent.Equal(that1.MaxEjectionPercent) {
		return false
	}
	if !this.EnforcingConsecutive_5Xx.Equal(that1.EnforcingConsecutive_5Xx) {
		return false
	}
	if !this.EnforcingSuccessRate.Equal(that1.EnforcingSuccessRate) {
		return false
	}
	if !this.SuccessRateMinimumHosts.Equal(that1.SuccessRateMinimumHosts) {
		return false
	}
	if !this.SuccessRateRequestVolume.Equal(that1.SuccessRateRequestVolume) {
		return false
	}
	if !this.SuccessRateStdevFactor.Equal(that1.SuccessRateStdevFactor) {
		return false
	}
	if !this.ConsecutiveGatewayFailure.Equal(that1.ConsecutiveGatewayFailure) {
		return false
	}
	if !this.EnforcingConsecutiveGatewayFailure.Equal(that1.EnforcingConsecutiveGatewayFailure) {
		return false
	}
	if this.SplitExternalLocalOriginErrors != that1.SplitExternalLocalOriginErrors {
		return false
	}
	if !this.ConsecutiveLocalOriginFailure.Equal(that1.ConsecutiveLocalOriginFailure) {
		return false
	}
	if !this.EnforcingConsecutiveLocalOriginFailure.Equal(that1.EnforcingConsecutiveLocalOriginFailure) {
		return false
	}
	if !this.EnforcingLocalOriginSuccessRate.Equal(that1.EnforcingLocalOriginSuccessRate) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/health_check.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//Envoy cluster health check configuration
//
//See [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.11.0/intro/arch_overview/upstream/health_checking#arch-overview-health-checking) for more information on how health checks work in envoy
//Or examine the [config definition](https://www.envoyproxy.io/docs/envoy/v1.11.0/api-v2/api/v2/core/health_check.proto#envoy-api-msg-core-healthcheck).
type HealthCheckConfig struct {
	Timeout  *time.Duration `protobuf:"bytes,1,opt,name=timeout,proto3,stdduration" json:"timeout,omitempty"`
	Interval *time.Duration `protobuf:"bytes,2,opt,name=interval,proto3,stdduration" json:"interval,omitempty"`
	// Types that are valid to be assigned to HealthChecker:
	//	*HealthCheckConfig_HttpHealthCheck_
	//	*HealthCheckConfig_TcpHealthCheck_
	//	*HealthCheckConfig_GrpcHealthCheck_
	HealthChecker        isHealthCheckConfig_HealthChecker `protobuf_oneof:"health_checker"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HealthCheckConfig) Reset()         { *m = HealthCheckConfig{} }
func (m *HealthCheckConfig) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig) ProtoMessage()    {}
func (*HealthCheckConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0}
}
func (m *HealthCheckConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig.Unmarshal(m, b)
}
func (m *HealthCheckConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig.Merge(m, src)
}
func (m *HealthCheckConfig) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig.Size(m)
}
func (m *HealthCheckConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig proto.InternalMessageInfo

type isHealthCheckConfig_HealthChecker interface {
	isHealthCheckConfig_HealthChecker()
	Equal(interface{}) bool
}

type HealthCheckConfig_HttpHealthCheck_ struct {
	HttpHealthCheck *HealthCheckConfig_HttpHealthCheck `protobuf:"bytes,8,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof"`
}
type HealthCheckConfig_TcpHealthCheck_ struct {
	TcpHealthCheck *HealthCheckConfig_TcpHealthCheck `protobuf:"bytes,9,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof"`
}
type HealthCheckConfig_GrpcHealthCheck_ struct {
	GrpcHealthCheck *HealthCheckConfig_GrpcHealthCheck `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3,oneof"`
}

func (*HealthCheckConfig_HttpHealthCheck_) isHealthCheckConfig_HealthChecker() {}
func (*HealthCheckConfig_TcpHealthCheck_) isHealthCheckConfig_HealthChecker()  {}
func (*HealthCheckConfig_GrpcHealthCheck_) isHealthCheckConfig_HealthChecker() {}

func (m *HealthCheckConfig) GetHealthChecker() isHealthCheckConfig_HealthChecker {
	if m != nil {
		return m.HealthChecker
	}
	return nil
}

func (m *HealthCheckConfig) GetTimeout() *time.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheckConfig) GetInterval() *time.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheckConfig) GetHttpHealthCheck() *HealthCheckConfig_HttpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_HttpHealthCheck_); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *HealthCheckConfig) GetTcpHealthCheck() *HealthCheckConfig_TcpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_TcpHealthCheck_); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *HealthCheckConfig) GetGrpcHealthCheck() *HealthCheckConfig_GrpcHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheckConfig_GrpcHealthCheck_); ok {
		return x.GrpcHealthCheck
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HealthCheckConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HealthCheckConfig_OneofMarshaler, _HealthCheckConfig_OneofUnmarshaler, _HealthCheckConfig_OneofSizer, []interface{}{
		(*HealthCheckConfig_HttpHealthCheck_)(nil),
		(*HealthCheckConfig_TcpHealthCheck_)(nil),
		(*HealthCheckConfig_GrpcHealthCheck_)(nil),
	}
}

func _HealthCheckConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HealthCheckConfig)
	// health_checker
	switch x := m.HealthChecker.(type) {
	case *HealthCheckConfig_HttpHealthCheck_:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpHealthCheck); err != nil {
			return err
		}
	case *HealthCheckConfig_TcpHealthCheck_:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpHealthCheck); err != nil {
			return err
		}
	case *HealthCheckConfig_GrpcHealthCheck_:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GrpcHealthCheck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HealthCheckConfig.HealthChecker has unexpected type %T", x)
	}
	return nil
}

func _HealthCheckConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HealthCheckConfig)
	switch tag {
	case 8: // health_checker.http_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HealthCheckConfig_HttpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthChecker = &HealthCheckConfig_HttpHealthCheck_{msg}
		return true, err
	case 9: // health_checker.tcp_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HealthCheckConfig_TcpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthChecker = &HealthCheckConfig_TcpHealthCheck_{msg}
		return true, err
	case 11: // health_checker.grpc_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HealthCheckConfig_GrpcHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthChecker = &HealthCheckConfig_GrpcHealthCheck_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HealthCheckConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HealthCheckConfig)
	// health_checker
	switch x := m.HealthChecker.(type) {
	case *HealthCheckConfig_HttpHealthCheck_:
		s := proto.Size(x.HttpHealthCheck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HealthCheckConfig_TcpHealthCheck_:
		s := proto.Size(x.TcpHealthCheck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HealthCheckConfig_GrpcHealthCheck_:
		s := proto.Size(x.GrpcHealthCheck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HealthCheckConfig_HttpHealthCheck struct {
	// The value of the host header in the HTTP health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Specifies the HTTP path that will be requested during health checking. For example
	// */healthcheck*.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// If set, health checks will be made using http/2.
	UseHttp2             bool     `protobuf:"varint,7,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_HttpHealthCheck) Reset()         { *m = HealthCheckConfig_HttpHealthCheck{} }
func (m *HealthCheckConfig_HttpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_HttpHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 0}
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.Size(m)
}
func (m *HealthCheckConfig_HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_HttpHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_HttpHealthCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HealthCheckConfig_HttpHealthCheck) GetUseHttp2() bool {
	if m != nil {
		return m.UseHttp2
	}
	return false
}

type HealthCheckConfig_Payload struct {
	// Types that are valid to be assigned to Payload:
	//	*HealthCheckConfig_Payload_Text
	//	*HealthCheckConfig_Payload_Binary
	Payload              isHealthCheckConfig_Payload_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *HealthCheckConfig_Payload) Reset()         { *m = HealthCheckConfig_Payload{} }
func (m *HealthCheckConfig_Payload) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_Payload) ProtoMessage()    {}
func (*HealthCheckConfig_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 1}
}
func (m *HealthCheckConfig_Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_Payload.Unmarshal(m, b)
}
func (m *HealthCheckConfig_Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_Payload.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_Payload.Merge(m, src)
}
func (m *HealthCheckConfig_Payload) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_Payload.Size(m)
}
func (m *HealthCheckConfig_Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_Payload proto.InternalMessageInfo

type isHealthCheckConfig_Payload_Payload interface {
	isHealthCheckConfig_Payload_Payload()
	Equal(interface{}) bool
}

type HealthCheckConfig_Payload_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}
type HealthCheckConfig_Payload_Binary struct {
	Binary []byte `protobuf:"bytes,2,opt,name=binary,proto3,oneof"`
}

func (*HealthCheckConfig_Payload_Text) isHealthCheckConfig_Payload_Payload()   {}
func (*HealthCheckConfig_Payload_Binary) isHealthCheckConfig_Payload_Payload() {}

func (m *HealthCheckConfig_Payload) GetPayload() isHealthCheckConfig_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HealthCheckConfig_Payload) GetText() string {
	if x, ok := m.GetPayload().(*HealthCheckConfig_Payload_Text); ok {
		return x.Text
	}
	return ""
}

func (m *HealthCheckConfig_Payload) GetBinary() []byte {
	if x, ok := m.GetPayload().(*HealthCheckConfig_Payload_Binary); ok {
		return x.Binary
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HealthCheckConfig_Payload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HealthCheckConfig_Payload_OneofMarshaler, _HealthCheckConfig_Payload_OneofUnmarshaler, _HealthCheckConfig_Payload_OneofSizer, []interface{}{
		(*HealthCheckConfig_Payload_Text)(nil),
		(*HealthCheckConfig_Payload_Binary)(nil),
	}
}

func _HealthCheckConfig_Payload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HealthCheckConfig_Payload)
	// payload
	switch x := m.Payload.(type) {
	case *HealthCheckConfig_Payload_Text:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Text)
	case *HealthCheckConfig_Payload_Binary:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Binary)
	case nil:
	default:
		return fmt.Errorf("HealthCheckConfig_Payload.Payload has unexpected type %T", x)
	}
	return nil
}

func _HealthCheckConfig_Payload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HealthCheckConfig_Payload)
	switch tag {
	case 1: // payload.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Payload = &HealthCheckConfig_Payload_Text{x}
		return true, err
	case 2: // payload.binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Payload = &HealthCheckConfig_Payload_Binary{x}
		return true, err
	default:
		return false, nil
	}
}

func _HealthCheckConfig_Payload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HealthCheckConfig_Payload)
	// payload
	switch x := m.Payload.(type) {
	case *HealthCheckConfig_Payload_Text:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Text)))
		n += len(x.Text)
	case *HealthCheckConfig_Payload_Binary:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Binary)))
		n += len(x.Binary)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HealthCheckConfig_TcpHealthCheck struct {
	// Empty payloads imply a connect-only health check.
	Send *HealthCheckConfig_Payload `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// When checking the response, “fuzzy” matching is performed such that each
	// binary block must be found, and in the order specified, but not
	// necessarily contiguous.
	Receive              []*HealthCheckConfig_Payload `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *HealthCheckConfig_TcpHealthCheck) Reset()         { *m = HealthCheckConfig_TcpHealthCheck{} }
func (m *HealthCheckConfig_TcpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_TcpHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_TcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 2}
}
func (m *HealthCheckConfig_TcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_TcpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_TcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_TcpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_TcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_TcpHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_TcpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_TcpHealthCheck.Size(m)
}
func (m *HealthCheckConfig_TcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_TcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_TcpHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_TcpHealthCheck) GetSend() *HealthCheckConfig_Payload {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *HealthCheckConfig_TcpHealthCheck) GetReceive() []*HealthCheckConfig_Payload {
	if m != nil {
		return m.Receive
	}
	return nil
}

// `grpc.health.v1.Health
// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
// healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
// for details.
type HealthCheckConfig_GrpcHealthCheck struct {
	// An optional service name parameter which will be sent to gRPC service in
	// `grpc.health.v1.HealthCheckRequest
	// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
	// message. See `gRPC health-checking overview
	// <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The value of the :authority header in the gRPC health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_GrpcHealthCheck) Reset()         { *m = HealthCheckConfig_GrpcHealthCheck{} }
func (m *HealthCheckConfig_GrpcHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_GrpcHealthCheck) ProtoMessage()    {}
func (*HealthCheckConfig_GrpcHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ca67440953dae5, []int{0, 3}
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Merge(m, src)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.Size(m)
}
func (m *HealthCheckConfig_GrpcHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_GrpcHealthCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_GrpcHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheckConfig_GrpcHealthCheck) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func init() {
	proto.RegisterType((*HealthCheckConfig)(nil), "gloo.solo.io.HealthCheckConfig")
	proto.RegisterType((*HealthCheckConfig_HttpHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.HttpHealthCheck")
	proto.RegisterType((*HealthCheckConfig_Payload)(nil), "gloo.solo.io.HealthCheckConfig.Payload")
	proto.RegisterType((*HealthCheckConfig_TcpHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.TcpHealthCheck")
	proto.RegisterType((*HealthCheckConfig_GrpcHealthCheck)(nil), "gloo.solo.io.HealthCheckConfig.GrpcHealthCheck")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/health_check.proto", fileDescriptor_17ca67440953dae5)
}

var fileDescriptor_17ca67440953dae5 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0x36, 0xb4, 0xcd, 0xd7, 0xaa, 0xdd, 0x2c, 0xa4, 0x85, 0x00, 0x5b, 0xe1, 0xc2,
	0x2e, 0x38, 0x50, 0x24, 0x24, 0xb4, 0x03, 0xa2, 0x43, 0xa2, 0x27, 0x84, 0x22, 0xc4, 0x61, 0x12,
	0xaa, 0xdc, 0xd4, 0x73, 0xcc, 0xd2, 0xd8, 0x72, 0x9c, 0xc2, 0xde, 0x82, 0x23, 0x8f, 0xc0, 0x23,
	0x20, 0x4e, 0x7b, 0x13, 0x10, 0xb7, 0xbd, 0x05, 0x8a, 0xe3, 0x42, 0x5b, 0x84, 0xd6, 0xdd, 0x3e,
	0xff, 0x3f, 0x7f, 0xbf, 0xfe, 0xfd, 0x77, 0x63, 0x78, 0xce, 0xb8, 0x4e, 0x8a, 0x29, 0x8e, 0xc5,
	0x3c, 0xcc, 0x45, 0x2a, 0x1e, 0x72, 0x11, 0xb2, 0x54, 0x88, 0x50, 0x2a, 0xf1, 0x81, 0xc6, 0x3a,
	0xaf, 0x56, 0x44, 0xf2, 0x70, 0xf1, 0x38, 0x4c, 0x28, 0x49, 0x75, 0x32, 0x89, 0x13, 0x1a, 0x9f,
	0x61, 0xa9, 0x84, 0x16, 0xa8, 0x5b, 0xf6, 0x71, 0x39, 0x8a, 0xb9, 0x08, 0xf6, 0x16, 0x24, 0xe5,
	0x33, 0xa2, 0x69, 0xb8, 0x2c, 0xaa, 0x6d, 0xc1, 0x4d, 0x26, 0x98, 0x30, 0x65, 0x58, 0x56, 0x56,
	0xdd, 0x67, 0x42, 0xb0, 0x94, 0x86, 0x66, 0x35, 0x2d, 0x4e, 0xc3, 0x8f, 0x8a, 0x48, 0x49, 0x55,
	0xfe, 0xbf, 0xfe, 0xac, 0x50, 0x44, 0x73, 0x91, 0x55, 0xfd, 0xfb, 0x3f, 0x9b, 0xb0, 0x3b, 0x36,
	0x9e, 0x8e, 0x4b, 0x4b, 0xc7, 0x22, 0x3b, 0xe5, 0x0c, 0x3d, 0x83, 0x96, 0xe6, 0x73, 0x2a, 0x0a,
	0xed, 0x3b, 0x03, 0xe7, 0xb0, 0x33, 0xbc, 0x85, 0x2b, 0x0e, 0x5e, 0x72, 0xf0, 0x4b, 0xcb, 0x19,
	0xb9, 0x5f, 0x7e, 0x1c, 0x38, 0xd1, 0x72, 0x3f, 0x3a, 0x82, 0x36, 0xcf, 0x34, 0x55, 0x0b, 0x92,
	0xfa, 0xf5, 0xed, 0x66, 0xff, 0x0c, 0xa0, 0xf7, 0xb0, 0x9b, 0x68, 0x2d, 0x27, 0xab, 0x29, 0xf9,
	0x6d, 0x43, 0x09, 0xf1, 0x6a, 0x4c, 0xf8, 0x1f, 0xcf, 0x78, 0xac, 0xb5, 0x5c, 0x51, 0xc7, 0xb5,
	0xa8, 0x9f, 0xac, 0x4b, 0xe8, 0x04, 0x76, 0x74, 0xbc, 0x41, 0xf7, 0x0c, 0x1d, 0x5f, 0x45, 0x7f,
	0x1b, 0x6f, 0xc0, 0x7b, 0x7a, 0x4d, 0x29, 0xad, 0x33, 0x25, 0xe3, 0x75, 0x78, 0x67, 0x3b, 0xeb,
	0xaf, 0x94, 0x8c, 0x37, 0xac, 0xb3, 0x75, 0x29, 0x20, 0xd0, 0xdf, 0x38, 0x20, 0x42, 0xe0, 0x26,
	0x22, 0xaf, 0x6e, 0xc8, 0x8b, 0x4c, 0x8d, 0xee, 0x82, 0x2b, 0x89, 0x4e, 0x4c, 0xf2, 0xde, 0xc8,
	0xfb, 0x7e, 0x79, 0xd1, 0x70, 0x55, 0x7d, 0xe0, 0x44, 0x46, 0x46, 0xb7, 0xc1, 0x2b, 0x72, 0x3a,
	0x29, 0x73, 0x19, 0xfa, 0xad, 0x81, 0x73, 0xd8, 0x8e, 0xda, 0x45, 0x4e, 0x4b, 0xf2, 0x30, 0x78,
	0x07, 0xad, 0x37, 0xe4, 0x3c, 0x15, 0x64, 0x86, 0x0e, 0xc0, 0xd5, 0xf4, 0x93, 0x45, 0xaf, 0x60,
	0xc6, 0xb5, 0xc8, 0x34, 0x90, 0x0f, 0xcd, 0x29, 0xcf, 0x88, 0x3a, 0x37, 0xbf, 0xd4, 0x1d, 0xd7,
	0x22, 0xbb, 0x1e, 0xed, 0x40, 0x4b, 0x5a, 0xca, 0x8d, 0x6f, 0x97, 0x17, 0x0d, 0x27, 0xf8, 0xec,
	0x40, 0x6f, 0x3d, 0x3e, 0x74, 0x04, 0x6e, 0x4e, 0xb3, 0x99, 0xfd, 0x73, 0x3d, 0xb8, 0x2a, 0x1f,
	0x6b, 0x2b, 0x32, 0x43, 0xe8, 0x05, 0xb4, 0x14, 0x8d, 0x29, 0x5f, 0x50, 0xbf, 0x3e, 0x68, 0x5c,
	0x67, 0x7e, 0x39, 0x17, 0x44, 0xd0, 0xdf, 0xc8, 0x1c, 0xdd, 0x83, 0x6e, 0x4e, 0xd5, 0x82, 0xc7,
	0x74, 0x92, 0x91, 0x39, 0xb5, 0xa9, 0x76, 0xac, 0xf6, 0x9a, 0xcc, 0x29, 0xba, 0x03, 0x1e, 0x29,
	0x74, 0x22, 0x14, 0xd7, 0xd5, 0xb9, 0xbd, 0xe8, 0xaf, 0x30, 0xda, 0x83, 0xde, 0xea, 0xdd, 0x53,
	0x65, 0xcf, 0x3f, 0x7a, 0xfa, 0xf5, 0xd7, 0xbe, 0x73, 0xf2, 0x68, 0xbb, 0x67, 0x42, 0x9e, 0x31,
	0xfb, 0x54, 0x4c, 0x9b, 0xe6, 0x7b, 0x79, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x2c, 0x32,
	0xb9, 0x61, 0x04, 0x00, 0x00,
}

func (this *HealthCheckConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig)
	if !ok {
		that2, ok := that.(HealthCheckConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if this.Interval != nil && that1.Interval != nil {
		if *this.Interval != *that1.Interval {
			return false
		}
	} else if this.Interval != nil {
		return false
	} else if that1.Interval != nil {
		return false
	}
	if that1.HealthChecker == nil {
		if this.HealthChecker != nil {
			return false
		}
	} else if this.HealthChecker == nil {
		return false
	} else if !this.HealthChecker.Equal(that1.HealthChecker) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_HttpHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_HttpHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_HttpHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_TcpHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_TcpHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_TcpHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_GrpcHealthCheck_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_GrpcHealthCheck_)
	if !ok {
		that2, ok := that.(HealthCheckConfig_GrpcHealthCheck_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcHealthCheck.Equal(that1.GrpcHealthCheck) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_HttpHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.UseHttp2 != that1.UseHttp2 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_Payload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_Payload)
	if !ok {
		that2, ok := that.(HealthCheckConfig_Payload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_Payload_Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_Payload_Text)
	if !ok {
		that2, ok := that.(HealthCheckConfig_Payload_Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *HealthCheckConfig_Payload_Binary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_Payload_Binary)
	if !ok {
		that2, ok := that.(HealthCheckConfig_Payload_Binary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Binary, that1.Binary) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_TcpHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Send.Equal(that1.Send) {
		return false
	}
	if len(this.Receive) != len(that1.Receive) {
		return false
	}
	for i := range this.Receive {
		if !this.Receive[i].Equal(that1.Receive[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheckConfig_GrpcHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckConfig_GrpcHealthCheck)
	if !ok {
		that2, ok := that.(HealthCheckConfig_GrpcHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

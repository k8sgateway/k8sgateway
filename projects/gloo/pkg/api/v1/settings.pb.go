// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Possible modes for running the function discovery service (FDS). FDS polls services in-cluster for Swagger
// and gRPC endpoints. This behavior can be controlled with the use of annotations.
// FdsMode specifies what policy FDS will use when determining which services to poll.
type Settings_DiscoveryOptions_FdsMode int32

const (
	// In BLACKLIST mode (default), FDS will poll all services in cluster except those services labeled with
	// `discovery.solo.io/function_discovery=disabled`. This label can also be used on namespaces to apply to
	// all services within a namespace **which are not explicitly whitelisted**.
	// Note that `kube-system` and `kube-public` namespaces must be explicitly whitelisted even in blacklist mode.
	Settings_DiscoveryOptions_BLACKLIST Settings_DiscoveryOptions_FdsMode = 0
	// In WHITELIST mode, FDS will poll only services in cluster labeled with
	// `discovery.solo.io/function_discovery=enabled`. This label can also be used on namespaces to apply to all
	// services **which are not explicitly blacklisted** within a namespace.
	Settings_DiscoveryOptions_WHITELIST Settings_DiscoveryOptions_FdsMode = 1
	// In DISABLED mode, FDS will not run.
	Settings_DiscoveryOptions_DISABLED Settings_DiscoveryOptions_FdsMode = 2
)

var Settings_DiscoveryOptions_FdsMode_name = map[int32]string{
	0: "BLACKLIST",
	1: "WHITELIST",
	2: "DISABLED",
}

var Settings_DiscoveryOptions_FdsMode_value = map[string]int32{
	"BLACKLIST": 0,
	"WHITELIST": 1,
	"DISABLED":  2,
}

func (x Settings_DiscoveryOptions_FdsMode) String() string {
	return proto.EnumName(Settings_DiscoveryOptions_FdsMode_name, int32(x))
}

func (Settings_DiscoveryOptions_FdsMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 7, 0}
}

// Represents global settings for all the Gloo components.
type Settings struct {
	// This is the namespace to which Gloo will write its own resources, e.g. discovered Upstreams or default Gateways.
	// If empty, this will default to "gloo-system".
	DiscoveryNamespace string `protobuf:"bytes,1,opt,name=discovery_namespace,json=discoveryNamespace,proto3" json:"discovery_namespace,omitempty"`
	// Use this setting to restrict the namespaces that Gloo takes into consideration when watching for resources.In a
	// usual production scenario, RBAC policies will limit the namespaces that Gloo has access to. If `watch_namespaces`
	// contains namespaces outside of this whitelist, Gloo will fail to start.
	//
	// If not set, this defaults to all available namespaces. Please note that, the `discovery_namespace` will always
	// be included in this list.
	WatchNamespaces []string `protobuf:"bytes,2,rep,name=watch_namespaces,json=watchNamespaces,proto3" json:"watch_namespaces,omitempty"`
	// This setting determines where Gloo will store its resources
	//
	// Types that are valid to be assigned to ConfigSource:
	//	*Settings_KubernetesConfigSource
	//	*Settings_DirectoryConfigSource
	//	*Settings_ConsulKvSource
	ConfigSource isSettings_ConfigSource `protobuf_oneof:"config_source"`
	// Determines where Gloo will read/write secrets from/to.
	//
	// Types that are valid to be assigned to SecretSource:
	//	*Settings_KubernetesSecretSource
	//	*Settings_VaultSecretSource
	//	*Settings_DirectorySecretSource
	SecretSource isSettings_SecretSource `protobuf_oneof:"secret_source"`
	// Where to read artifacts from.
	//
	// Types that are valid to be assigned to ArtifactSource:
	//	*Settings_KubernetesArtifactSource
	//	*Settings_DirectoryArtifactSource
	//	*Settings_ConsulKvArtifactSource
	ArtifactSource isSettings_ArtifactSource `protobuf_oneof:"artifact_source"`
	// Where the gloo xDS server should bind (should not need configuration by user)
	BindAddr string `protobuf:"bytes,11,opt,name=bind_addr,json=bindAddr,proto3" json:"bind_addr,omitempty"`
	// How frequently to resync watches, etc
	RefreshRate *types.Duration `protobuf:"bytes,12,opt,name=refresh_rate,json=refreshRate,proto3" json:"refresh_rate,omitempty"`
	// Enable serving debug data on port 9090
	DevMode bool `protobuf:"varint,13,opt,name=dev_mode,json=devMode,proto3" json:"dev_mode,omitempty"`
	// Enable automatic linkerd upstream header addition for easier routing to linkerd services
	Linkerd bool `protobuf:"varint,17,opt,name=linkerd,proto3" json:"linkerd,omitempty"`
	// Default circuit breakers when not set in a specific upstream.
	CircuitBreakers *CircuitBreakerConfig `protobuf:"bytes,3,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	// Configuration options for the Clusteringress Controller (for Knative).
	Knative *Settings_KnativeOptions `protobuf:"bytes,18,opt,name=knative,proto3" json:"knative,omitempty"`
	// Options for configuring Gloo's Discovery service
	Discovery *Settings_DiscoveryOptions `protobuf:"bytes,19,opt,name=discovery,proto3" json:"discovery,omitempty"`
	// Options to configure Gloo's integration with [HashiCorp Consul](https://www.consul.io/).
	Consul *Settings_ConsulConfiguration `protobuf:"bytes,20,opt,name=consul,proto3" json:"consul,omitempty"`
	// Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
	Kubernetes *Settings_KubernetesConfiguration `protobuf:"bytes,22,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// Settings for extensions
	Extensions *Extensions `protobuf:"bytes,16,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status               core.Status `protobuf:"bytes,15,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings.Unmarshal(m, b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return xxx_messageInfo_Settings.Size(m)
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

type isSettings_ConfigSource interface {
	isSettings_ConfigSource()
	Equal(interface{}) bool
}
type isSettings_SecretSource interface {
	isSettings_SecretSource()
	Equal(interface{}) bool
}
type isSettings_ArtifactSource interface {
	isSettings_ArtifactSource()
	Equal(interface{}) bool
}

type Settings_KubernetesConfigSource struct {
	KubernetesConfigSource *Settings_KubernetesCrds `protobuf:"bytes,4,opt,name=kubernetes_config_source,json=kubernetesConfigSource,proto3,oneof" json:"kubernetes_config_source,omitempty"`
}
type Settings_DirectoryConfigSource struct {
	DirectoryConfigSource *Settings_Directory `protobuf:"bytes,5,opt,name=directory_config_source,json=directoryConfigSource,proto3,oneof" json:"directory_config_source,omitempty"`
}
type Settings_ConsulKvSource struct {
	ConsulKvSource *Settings_ConsulKv `protobuf:"bytes,21,opt,name=consul_kv_source,json=consulKvSource,proto3,oneof" json:"consul_kv_source,omitempty"`
}
type Settings_KubernetesSecretSource struct {
	KubernetesSecretSource *Settings_KubernetesSecrets `protobuf:"bytes,6,opt,name=kubernetes_secret_source,json=kubernetesSecretSource,proto3,oneof" json:"kubernetes_secret_source,omitempty"`
}
type Settings_VaultSecretSource struct {
	VaultSecretSource *Settings_VaultSecrets `protobuf:"bytes,7,opt,name=vault_secret_source,json=vaultSecretSource,proto3,oneof" json:"vault_secret_source,omitempty"`
}
type Settings_DirectorySecretSource struct {
	DirectorySecretSource *Settings_Directory `protobuf:"bytes,8,opt,name=directory_secret_source,json=directorySecretSource,proto3,oneof" json:"directory_secret_source,omitempty"`
}
type Settings_KubernetesArtifactSource struct {
	KubernetesArtifactSource *Settings_KubernetesConfigmaps `protobuf:"bytes,9,opt,name=kubernetes_artifact_source,json=kubernetesArtifactSource,proto3,oneof" json:"kubernetes_artifact_source,omitempty"`
}
type Settings_DirectoryArtifactSource struct {
	DirectoryArtifactSource *Settings_Directory `protobuf:"bytes,10,opt,name=directory_artifact_source,json=directoryArtifactSource,proto3,oneof" json:"directory_artifact_source,omitempty"`
}
type Settings_ConsulKvArtifactSource struct {
	ConsulKvArtifactSource *Settings_ConsulKv `protobuf:"bytes,23,opt,name=consul_kv_artifact_source,json=consulKvArtifactSource,proto3,oneof" json:"consul_kv_artifact_source,omitempty"`
}

func (*Settings_KubernetesConfigSource) isSettings_ConfigSource()     {}
func (*Settings_DirectoryConfigSource) isSettings_ConfigSource()      {}
func (*Settings_ConsulKvSource) isSettings_ConfigSource()             {}
func (*Settings_KubernetesSecretSource) isSettings_SecretSource()     {}
func (*Settings_VaultSecretSource) isSettings_SecretSource()          {}
func (*Settings_DirectorySecretSource) isSettings_SecretSource()      {}
func (*Settings_KubernetesArtifactSource) isSettings_ArtifactSource() {}
func (*Settings_DirectoryArtifactSource) isSettings_ArtifactSource()  {}
func (*Settings_ConsulKvArtifactSource) isSettings_ArtifactSource()   {}

func (m *Settings) GetConfigSource() isSettings_ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}
func (m *Settings) GetSecretSource() isSettings_SecretSource {
	if m != nil {
		return m.SecretSource
	}
	return nil
}
func (m *Settings) GetArtifactSource() isSettings_ArtifactSource {
	if m != nil {
		return m.ArtifactSource
	}
	return nil
}

func (m *Settings) GetDiscoveryNamespace() string {
	if m != nil {
		return m.DiscoveryNamespace
	}
	return ""
}

func (m *Settings) GetWatchNamespaces() []string {
	if m != nil {
		return m.WatchNamespaces
	}
	return nil
}

func (m *Settings) GetKubernetesConfigSource() *Settings_KubernetesCrds {
	if x, ok := m.GetConfigSource().(*Settings_KubernetesConfigSource); ok {
		return x.KubernetesConfigSource
	}
	return nil
}

func (m *Settings) GetDirectoryConfigSource() *Settings_Directory {
	if x, ok := m.GetConfigSource().(*Settings_DirectoryConfigSource); ok {
		return x.DirectoryConfigSource
	}
	return nil
}

func (m *Settings) GetConsulKvSource() *Settings_ConsulKv {
	if x, ok := m.GetConfigSource().(*Settings_ConsulKvSource); ok {
		return x.ConsulKvSource
	}
	return nil
}

func (m *Settings) GetKubernetesSecretSource() *Settings_KubernetesSecrets {
	if x, ok := m.GetSecretSource().(*Settings_KubernetesSecretSource); ok {
		return x.KubernetesSecretSource
	}
	return nil
}

func (m *Settings) GetVaultSecretSource() *Settings_VaultSecrets {
	if x, ok := m.GetSecretSource().(*Settings_VaultSecretSource); ok {
		return x.VaultSecretSource
	}
	return nil
}

func (m *Settings) GetDirectorySecretSource() *Settings_Directory {
	if x, ok := m.GetSecretSource().(*Settings_DirectorySecretSource); ok {
		return x.DirectorySecretSource
	}
	return nil
}

func (m *Settings) GetKubernetesArtifactSource() *Settings_KubernetesConfigmaps {
	if x, ok := m.GetArtifactSource().(*Settings_KubernetesArtifactSource); ok {
		return x.KubernetesArtifactSource
	}
	return nil
}

func (m *Settings) GetDirectoryArtifactSource() *Settings_Directory {
	if x, ok := m.GetArtifactSource().(*Settings_DirectoryArtifactSource); ok {
		return x.DirectoryArtifactSource
	}
	return nil
}

func (m *Settings) GetConsulKvArtifactSource() *Settings_ConsulKv {
	if x, ok := m.GetArtifactSource().(*Settings_ConsulKvArtifactSource); ok {
		return x.ConsulKvArtifactSource
	}
	return nil
}

func (m *Settings) GetBindAddr() string {
	if m != nil {
		return m.BindAddr
	}
	return ""
}

func (m *Settings) GetRefreshRate() *types.Duration {
	if m != nil {
		return m.RefreshRate
	}
	return nil
}

func (m *Settings) GetDevMode() bool {
	if m != nil {
		return m.DevMode
	}
	return false
}

func (m *Settings) GetLinkerd() bool {
	if m != nil {
		return m.Linkerd
	}
	return false
}

func (m *Settings) GetCircuitBreakers() *CircuitBreakerConfig {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

func (m *Settings) GetKnative() *Settings_KnativeOptions {
	if m != nil {
		return m.Knative
	}
	return nil
}

func (m *Settings) GetDiscovery() *Settings_DiscoveryOptions {
	if m != nil {
		return m.Discovery
	}
	return nil
}

func (m *Settings) GetConsul() *Settings_ConsulConfiguration {
	if m != nil {
		return m.Consul
	}
	return nil
}

func (m *Settings) GetKubernetes() *Settings_KubernetesConfiguration {
	if m != nil {
		return m.Kubernetes
	}
	return nil
}

func (m *Settings) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *Settings) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *Settings) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Settings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Settings_KubernetesConfigSource)(nil),
		(*Settings_DirectoryConfigSource)(nil),
		(*Settings_ConsulKvSource)(nil),
		(*Settings_KubernetesSecretSource)(nil),
		(*Settings_VaultSecretSource)(nil),
		(*Settings_DirectorySecretSource)(nil),
		(*Settings_KubernetesArtifactSource)(nil),
		(*Settings_DirectoryArtifactSource)(nil),
		(*Settings_ConsulKvArtifactSource)(nil),
	}
}

// Use Kubernetes CRDs as storage.
type Settings_KubernetesCrds struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_KubernetesCrds) Reset()         { *m = Settings_KubernetesCrds{} }
func (m *Settings_KubernetesCrds) String() string { return proto.CompactTextString(m) }
func (*Settings_KubernetesCrds) ProtoMessage()    {}
func (*Settings_KubernetesCrds) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 0}
}
func (m *Settings_KubernetesCrds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_KubernetesCrds.Unmarshal(m, b)
}
func (m *Settings_KubernetesCrds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_KubernetesCrds.Marshal(b, m, deterministic)
}
func (m *Settings_KubernetesCrds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_KubernetesCrds.Merge(m, src)
}
func (m *Settings_KubernetesCrds) XXX_Size() int {
	return xxx_messageInfo_Settings_KubernetesCrds.Size(m)
}
func (m *Settings_KubernetesCrds) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_KubernetesCrds.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_KubernetesCrds proto.InternalMessageInfo

// Use Kubernetes as storage for secret data.
type Settings_KubernetesSecrets struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_KubernetesSecrets) Reset()         { *m = Settings_KubernetesSecrets{} }
func (m *Settings_KubernetesSecrets) String() string { return proto.CompactTextString(m) }
func (*Settings_KubernetesSecrets) ProtoMessage()    {}
func (*Settings_KubernetesSecrets) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 1}
}
func (m *Settings_KubernetesSecrets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_KubernetesSecrets.Unmarshal(m, b)
}
func (m *Settings_KubernetesSecrets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_KubernetesSecrets.Marshal(b, m, deterministic)
}
func (m *Settings_KubernetesSecrets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_KubernetesSecrets.Merge(m, src)
}
func (m *Settings_KubernetesSecrets) XXX_Size() int {
	return xxx_messageInfo_Settings_KubernetesSecrets.Size(m)
}
func (m *Settings_KubernetesSecrets) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_KubernetesSecrets.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_KubernetesSecrets proto.InternalMessageInfo

// Use [HashiCorp Vault](https://www.vaultproject.io/) as storage for secret data.
type Settings_VaultSecrets struct {
	// the Token used to authenticate to Vault
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// address is the address of the Vault server. This should be a complete
	// URL such as "http://vault.example.com".
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// caCert is the path to a PEM-encoded CA cert file to use to verify the
	// Vault server SSL certificate.
	CaCert string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// caPath is the path to a directory of PEM-encoded CA cert files to verify
	// the Vault server SSL certificate.
	CaPath string `protobuf:"bytes,4,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// clientCert is the path to the certificate for Vault communication
	ClientCert string `protobuf:"bytes,5,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// clientKey is the path to the private key for Vault communication
	ClientKey string `protobuf:"bytes,6,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// tlsServerName, if set, is used to set the SNI host when connecting via
	// TLS.
	TlsServerName string `protobuf:"bytes,7,opt,name=tls_server_name,json=tlsServerName,proto3" json:"tls_server_name,omitempty"`
	// Insecure enables or disables SSL verification
	Insecure *types.BoolValue `protobuf:"bytes,8,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// all keys stored in Vault will begin with this Vault
	// this can be used to run multiple instances of Gloo against the same Consul cluster
	// defaults to `gloo`
	RootKey              string   `protobuf:"bytes,9,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_VaultSecrets) Reset()         { *m = Settings_VaultSecrets{} }
func (m *Settings_VaultSecrets) String() string { return proto.CompactTextString(m) }
func (*Settings_VaultSecrets) ProtoMessage()    {}
func (*Settings_VaultSecrets) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 2}
}
func (m *Settings_VaultSecrets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_VaultSecrets.Unmarshal(m, b)
}
func (m *Settings_VaultSecrets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_VaultSecrets.Marshal(b, m, deterministic)
}
func (m *Settings_VaultSecrets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_VaultSecrets.Merge(m, src)
}
func (m *Settings_VaultSecrets) XXX_Size() int {
	return xxx_messageInfo_Settings_VaultSecrets.Size(m)
}
func (m *Settings_VaultSecrets) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_VaultSecrets.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_VaultSecrets proto.InternalMessageInfo

func (m *Settings_VaultSecrets) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Settings_VaultSecrets) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Settings_VaultSecrets) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *Settings_VaultSecrets) GetCaPath() string {
	if m != nil {
		return m.CaPath
	}
	return ""
}

func (m *Settings_VaultSecrets) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *Settings_VaultSecrets) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *Settings_VaultSecrets) GetTlsServerName() string {
	if m != nil {
		return m.TlsServerName
	}
	return ""
}

func (m *Settings_VaultSecrets) GetInsecure() *types.BoolValue {
	if m != nil {
		return m.Insecure
	}
	return nil
}

func (m *Settings_VaultSecrets) GetRootKey() string {
	if m != nil {
		return m.RootKey
	}
	return ""
}

// Use [HashiCorp Consul Key-Value](https://www.consul.io/api/kv.html/) as storage for config data.
// Configuration options for connecting to Consul can be configured in the Settings' root
// `consul` field
type Settings_ConsulKv struct {
	// all keys stored in Consul will begin with this prefix
	// this can be used to run multiple instances of Gloo against the same Consul cluster
	// defaults to `gloo`
	RootKey              string   `protobuf:"bytes,1,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_ConsulKv) Reset()         { *m = Settings_ConsulKv{} }
func (m *Settings_ConsulKv) String() string { return proto.CompactTextString(m) }
func (*Settings_ConsulKv) ProtoMessage()    {}
func (*Settings_ConsulKv) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 3}
}
func (m *Settings_ConsulKv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_ConsulKv.Unmarshal(m, b)
}
func (m *Settings_ConsulKv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_ConsulKv.Marshal(b, m, deterministic)
}
func (m *Settings_ConsulKv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_ConsulKv.Merge(m, src)
}
func (m *Settings_ConsulKv) XXX_Size() int {
	return xxx_messageInfo_Settings_ConsulKv.Size(m)
}
func (m *Settings_ConsulKv) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_ConsulKv.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_ConsulKv proto.InternalMessageInfo

func (m *Settings_ConsulKv) GetRootKey() string {
	if m != nil {
		return m.RootKey
	}
	return ""
}

// Use Kubernetes ConfigMaps as storage.
type Settings_KubernetesConfigmaps struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_KubernetesConfigmaps) Reset()         { *m = Settings_KubernetesConfigmaps{} }
func (m *Settings_KubernetesConfigmaps) String() string { return proto.CompactTextString(m) }
func (*Settings_KubernetesConfigmaps) ProtoMessage()    {}
func (*Settings_KubernetesConfigmaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 4}
}
func (m *Settings_KubernetesConfigmaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_KubernetesConfigmaps.Unmarshal(m, b)
}
func (m *Settings_KubernetesConfigmaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_KubernetesConfigmaps.Marshal(b, m, deterministic)
}
func (m *Settings_KubernetesConfigmaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_KubernetesConfigmaps.Merge(m, src)
}
func (m *Settings_KubernetesConfigmaps) XXX_Size() int {
	return xxx_messageInfo_Settings_KubernetesConfigmaps.Size(m)
}
func (m *Settings_KubernetesConfigmaps) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_KubernetesConfigmaps.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_KubernetesConfigmaps proto.InternalMessageInfo

// As an alternative to Kubernetes CRDs, Gloo is able to store resources in a local file system.
// This option determines the root of the directory tree used to this end.
type Settings_Directory struct {
	Directory            string   `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_Directory) Reset()         { *m = Settings_Directory{} }
func (m *Settings_Directory) String() string { return proto.CompactTextString(m) }
func (*Settings_Directory) ProtoMessage()    {}
func (*Settings_Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 5}
}
func (m *Settings_Directory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_Directory.Unmarshal(m, b)
}
func (m *Settings_Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_Directory.Marshal(b, m, deterministic)
}
func (m *Settings_Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_Directory.Merge(m, src)
}
func (m *Settings_Directory) XXX_Size() int {
	return xxx_messageInfo_Settings_Directory.Size(m)
}
func (m *Settings_Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_Directory proto.InternalMessageInfo

func (m *Settings_Directory) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

type Settings_KnativeOptions struct {
	// Address of the clusteringress proxy.
	// If empty, it will default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.7.X or less
	ClusterIngressProxyAddress string `protobuf:"bytes,1,opt,name=cluster_ingress_proxy_address,json=clusterIngressProxyAddress,proto3" json:"cluster_ingress_proxy_address,omitempty"`
	// Address of the externally-facing knative proxy.
	// If empty, it will default to knative-external-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.8.X or higher
	KnativeExternalProxyAddress string `protobuf:"bytes,2,opt,name=knative_external_proxy_address,json=knativeExternalProxyAddress,proto3" json:"knative_external_proxy_address,omitempty"`
	// Address of the internally-facing knative proxy.
	// If empty, it will default to knative-internal-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.8.X or higher
	KnativeInternalProxyAddress string   `protobuf:"bytes,3,opt,name=knative_internal_proxy_address,json=knativeInternalProxyAddress,proto3" json:"knative_internal_proxy_address,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *Settings_KnativeOptions) Reset()         { *m = Settings_KnativeOptions{} }
func (m *Settings_KnativeOptions) String() string { return proto.CompactTextString(m) }
func (*Settings_KnativeOptions) ProtoMessage()    {}
func (*Settings_KnativeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 6}
}
func (m *Settings_KnativeOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_KnativeOptions.Unmarshal(m, b)
}
func (m *Settings_KnativeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_KnativeOptions.Marshal(b, m, deterministic)
}
func (m *Settings_KnativeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_KnativeOptions.Merge(m, src)
}
func (m *Settings_KnativeOptions) XXX_Size() int {
	return xxx_messageInfo_Settings_KnativeOptions.Size(m)
}
func (m *Settings_KnativeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_KnativeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_KnativeOptions proto.InternalMessageInfo

func (m *Settings_KnativeOptions) GetClusterIngressProxyAddress() string {
	if m != nil {
		return m.ClusterIngressProxyAddress
	}
	return ""
}

func (m *Settings_KnativeOptions) GetKnativeExternalProxyAddress() string {
	if m != nil {
		return m.KnativeExternalProxyAddress
	}
	return ""
}

func (m *Settings_KnativeOptions) GetKnativeInternalProxyAddress() string {
	if m != nil {
		return m.KnativeInternalProxyAddress
	}
	return ""
}

type Settings_DiscoveryOptions struct {
	FdsMode              Settings_DiscoveryOptions_FdsMode `protobuf:"varint,1,opt,name=fds_mode,json=fdsMode,proto3,enum=gloo.solo.io.Settings_DiscoveryOptions_FdsMode" json:"fds_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *Settings_DiscoveryOptions) Reset()         { *m = Settings_DiscoveryOptions{} }
func (m *Settings_DiscoveryOptions) String() string { return proto.CompactTextString(m) }
func (*Settings_DiscoveryOptions) ProtoMessage()    {}
func (*Settings_DiscoveryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 7}
}
func (m *Settings_DiscoveryOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_DiscoveryOptions.Unmarshal(m, b)
}
func (m *Settings_DiscoveryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_DiscoveryOptions.Marshal(b, m, deterministic)
}
func (m *Settings_DiscoveryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_DiscoveryOptions.Merge(m, src)
}
func (m *Settings_DiscoveryOptions) XXX_Size() int {
	return xxx_messageInfo_Settings_DiscoveryOptions.Size(m)
}
func (m *Settings_DiscoveryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_DiscoveryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_DiscoveryOptions proto.InternalMessageInfo

func (m *Settings_DiscoveryOptions) GetFdsMode() Settings_DiscoveryOptions_FdsMode {
	if m != nil {
		return m.FdsMode
	}
	return Settings_DiscoveryOptions_BLACKLIST
}

// Provides overrides for the default configuration parameters used to connect to Consul.
//
// Note: It is also possible to configure the Consul client Gloo uses via the environment variables
// described [here](https://www.consul.io/docs/commands/index.html#environment-variables). These
// need to be set on the Gloo container.
type Settings_ConsulConfiguration struct {
	// The address of the Consul server.
	// Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Datacenter to use. If not provided, the default agent datacenter is used.
	Datacenter string `protobuf:"bytes,2,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	// Username to use for HTTP Basic Authentication
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Password to use for HTTP Basic Authentication
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Token is used to provide a per-request ACL token
	// which overrides the agent's default token.
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// caFile is the optional path to the CA certificate used for Consul
	// communication, defaults to the system bundle if not specified.
	CaFile string `protobuf:"bytes,6,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	// caPath is the optional path to a directory of CA certificates to use for
	// Consul communication, defaults to the system bundle if not specified.
	CaPath string `protobuf:"bytes,7,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// CertFile is the optional path to the certificate for Consul
	// communication. If this is set then you need to also set KeyFile.
	CertFile string `protobuf:"bytes,8,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// KeyFile is the optional path to the private key for Consul communication.
	// If this is set then you need to also set CertFile.
	KeyFile string `protobuf:"bytes,9,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// InsecureSkipVerify if set to true will disable TLS host verification.
	InsecureSkipVerify *types.BoolValue `protobuf:"bytes,10,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	// WaitTime limits how long a watches for Consul resources will block.
	// If not provided, the agent default values will be used.
	WaitTime *types.Duration `protobuf:"bytes,11,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	// Enable Service Discovery via Consul with this field
	// set to empty struct `{}` to enable with defaults
	ServiceDiscovery     *Settings_ConsulConfiguration_ServiceDiscoveryOptions `protobuf:"bytes,12,opt,name=service_discovery,json=serviceDiscovery,proto3" json:"service_discovery,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *Settings_ConsulConfiguration) Reset()         { *m = Settings_ConsulConfiguration{} }
func (m *Settings_ConsulConfiguration) String() string { return proto.CompactTextString(m) }
func (*Settings_ConsulConfiguration) ProtoMessage()    {}
func (*Settings_ConsulConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 8}
}
func (m *Settings_ConsulConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_ConsulConfiguration.Unmarshal(m, b)
}
func (m *Settings_ConsulConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_ConsulConfiguration.Marshal(b, m, deterministic)
}
func (m *Settings_ConsulConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_ConsulConfiguration.Merge(m, src)
}
func (m *Settings_ConsulConfiguration) XXX_Size() int {
	return xxx_messageInfo_Settings_ConsulConfiguration.Size(m)
}
func (m *Settings_ConsulConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_ConsulConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_ConsulConfiguration proto.InternalMessageInfo

func (m *Settings_ConsulConfiguration) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetCaFile() string {
	if m != nil {
		return m.CaFile
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetCaPath() string {
	if m != nil {
		return m.CaPath
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *Settings_ConsulConfiguration) GetInsecureSkipVerify() *types.BoolValue {
	if m != nil {
		return m.InsecureSkipVerify
	}
	return nil
}

func (m *Settings_ConsulConfiguration) GetWaitTime() *types.Duration {
	if m != nil {
		return m.WaitTime
	}
	return nil
}

func (m *Settings_ConsulConfiguration) GetServiceDiscovery() *Settings_ConsulConfiguration_ServiceDiscoveryOptions {
	if m != nil {
		return m.ServiceDiscovery
	}
	return nil
}

// service discovery options for Consul
type Settings_ConsulConfiguration_ServiceDiscoveryOptions struct {
	// Use this parameter to restrict the data centers that will be considered when discovering and routing to
	// services. If not provided, Gloo will use all available data centers.
	DataCenters          []string `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) Reset() {
	*m = Settings_ConsulConfiguration_ServiceDiscoveryOptions{}
}
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) String() string {
	return proto.CompactTextString(m)
}
func (*Settings_ConsulConfiguration_ServiceDiscoveryOptions) ProtoMessage() {}
func (*Settings_ConsulConfiguration_ServiceDiscoveryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 8, 0}
}
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_ConsulConfiguration_ServiceDiscoveryOptions.Unmarshal(m, b)
}
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_ConsulConfiguration_ServiceDiscoveryOptions.Marshal(b, m, deterministic)
}
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_ConsulConfiguration_ServiceDiscoveryOptions.Merge(m, src)
}
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Size() int {
	return xxx_messageInfo_Settings_ConsulConfiguration_ServiceDiscoveryOptions.Size(m)
}
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_ConsulConfiguration_ServiceDiscoveryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_ConsulConfiguration_ServiceDiscoveryOptions proto.InternalMessageInfo

func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) GetDataCenters() []string {
	if m != nil {
		return m.DataCenters
	}
	return nil
}

// Provides overrides for the default configuration parameters used to interact with Kubernetes.
type Settings_KubernetesConfiguration struct {
	// Rate limits for the kuberentes clients
	RateLimits           *Settings_KubernetesConfiguration_RateLimits `protobuf:"bytes,1,opt,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *Settings_KubernetesConfiguration) Reset()         { *m = Settings_KubernetesConfiguration{} }
func (m *Settings_KubernetesConfiguration) String() string { return proto.CompactTextString(m) }
func (*Settings_KubernetesConfiguration) ProtoMessage()    {}
func (*Settings_KubernetesConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 9}
}
func (m *Settings_KubernetesConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_KubernetesConfiguration.Unmarshal(m, b)
}
func (m *Settings_KubernetesConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_KubernetesConfiguration.Marshal(b, m, deterministic)
}
func (m *Settings_KubernetesConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_KubernetesConfiguration.Merge(m, src)
}
func (m *Settings_KubernetesConfiguration) XXX_Size() int {
	return xxx_messageInfo_Settings_KubernetesConfiguration.Size(m)
}
func (m *Settings_KubernetesConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_KubernetesConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_KubernetesConfiguration proto.InternalMessageInfo

func (m *Settings_KubernetesConfiguration) GetRateLimits() *Settings_KubernetesConfiguration_RateLimits {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

type Settings_KubernetesConfiguration_RateLimits struct {
	// The maximum queries-per-second Gloo can make to the Kubernetes API Server.
	QPS float32 `protobuf:"fixed32,1,opt,name=QPS,proto3" json:"QPS,omitempty"`
	// Maximum burst for throttle. When a steady state of QPS requests per second,
	// this is an additional number of allowed, to allow for short bursts.
	Burst                uint32   `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings_KubernetesConfiguration_RateLimits) Reset() {
	*m = Settings_KubernetesConfiguration_RateLimits{}
}
func (m *Settings_KubernetesConfiguration_RateLimits) String() string {
	return proto.CompactTextString(m)
}
func (*Settings_KubernetesConfiguration_RateLimits) ProtoMessage() {}
func (*Settings_KubernetesConfiguration_RateLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7533c2495e1752, []int{0, 9, 0}
}
func (m *Settings_KubernetesConfiguration_RateLimits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings_KubernetesConfiguration_RateLimits.Unmarshal(m, b)
}
func (m *Settings_KubernetesConfiguration_RateLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings_KubernetesConfiguration_RateLimits.Marshal(b, m, deterministic)
}
func (m *Settings_KubernetesConfiguration_RateLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_KubernetesConfiguration_RateLimits.Merge(m, src)
}
func (m *Settings_KubernetesConfiguration_RateLimits) XXX_Size() int {
	return xxx_messageInfo_Settings_KubernetesConfiguration_RateLimits.Size(m)
}
func (m *Settings_KubernetesConfiguration_RateLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_KubernetesConfiguration_RateLimits.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_KubernetesConfiguration_RateLimits proto.InternalMessageInfo

func (m *Settings_KubernetesConfiguration_RateLimits) GetQPS() float32 {
	if m != nil {
		return m.QPS
	}
	return 0
}

func (m *Settings_KubernetesConfiguration_RateLimits) GetBurst() uint32 {
	if m != nil {
		return m.Burst
	}
	return 0
}

func init() {
	proto.RegisterEnum("gloo.solo.io.Settings_DiscoveryOptions_FdsMode", Settings_DiscoveryOptions_FdsMode_name, Settings_DiscoveryOptions_FdsMode_value)
	proto.RegisterType((*Settings)(nil), "gloo.solo.io.Settings")
	proto.RegisterType((*Settings_KubernetesCrds)(nil), "gloo.solo.io.Settings.KubernetesCrds")
	proto.RegisterType((*Settings_KubernetesSecrets)(nil), "gloo.solo.io.Settings.KubernetesSecrets")
	proto.RegisterType((*Settings_VaultSecrets)(nil), "gloo.solo.io.Settings.VaultSecrets")
	proto.RegisterType((*Settings_ConsulKv)(nil), "gloo.solo.io.Settings.ConsulKv")
	proto.RegisterType((*Settings_KubernetesConfigmaps)(nil), "gloo.solo.io.Settings.KubernetesConfigmaps")
	proto.RegisterType((*Settings_Directory)(nil), "gloo.solo.io.Settings.Directory")
	proto.RegisterType((*Settings_KnativeOptions)(nil), "gloo.solo.io.Settings.KnativeOptions")
	proto.RegisterType((*Settings_DiscoveryOptions)(nil), "gloo.solo.io.Settings.DiscoveryOptions")
	proto.RegisterType((*Settings_ConsulConfiguration)(nil), "gloo.solo.io.Settings.ConsulConfiguration")
	proto.RegisterType((*Settings_ConsulConfiguration_ServiceDiscoveryOptions)(nil), "gloo.solo.io.Settings.ConsulConfiguration.ServiceDiscoveryOptions")
	proto.RegisterType((*Settings_KubernetesConfiguration)(nil), "gloo.solo.io.Settings.KubernetesConfiguration")
	proto.RegisterType((*Settings_KubernetesConfiguration_RateLimits)(nil), "gloo.solo.io.Settings.KubernetesConfiguration.RateLimits")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto", fileDescriptor_bd7533c2495e1752)
}

var fileDescriptor_bd7533c2495e1752 = []byte{
	// 1457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xeb, 0x52, 0x1b, 0x47,
	0x16, 0x46, 0xe2, 0xa2, 0xd1, 0xe1, 0x26, 0x1a, 0x0c, 0xc3, 0x78, 0x0d, 0x2c, 0x5b, 0xde, 0xc5,
	0xbb, 0xb5, 0xa3, 0xb5, 0x77, 0xd7, 0xe5, 0x38, 0x4e, 0xa5, 0x90, 0xc0, 0x81, 0x80, 0x1d, 0x67,
	0xe4, 0x38, 0x55, 0xae, 0x54, 0xa6, 0x86, 0x99, 0x96, 0xe8, 0x68, 0x34, 0xad, 0xea, 0x6e, 0x09,
	0xeb, 0xaf, 0xdf, 0x21, 0xef, 0x90, 0x2a, 0xbf, 0x42, 0x1e, 0x20, 0x2f, 0x11, 0xa7, 0x2a, 0x6f,
	0xe0, 0x3c, 0x41, 0xaa, 0x2f, 0x23, 0x69, 0x04, 0xc2, 0xe2, 0x17, 0x73, 0x2e, 0xdf, 0x77, 0xe8,
	0xd3, 0xe7, 0xd2, 0x82, 0x4f, 0x1b, 0x44, 0x9c, 0x77, 0xce, 0xdc, 0x90, 0xb6, 0xca, 0x9c, 0xc6,
	0xf4, 0xdf, 0x84, 0x96, 0x1b, 0x31, 0xa5, 0xe5, 0x36, 0xa3, 0x3f, 0xe0, 0x50, 0x70, 0x2d, 0x05,
	0x6d, 0x52, 0xee, 0xde, 0x2f, 0x73, 0x2c, 0x04, 0x49, 0x1a, 0xdc, 0x6d, 0x33, 0x2a, 0x28, 0x5a,
	0x90, 0x36, 0x57, 0xc2, 0x5c, 0x42, 0x9d, 0xb5, 0x06, 0x6d, 0x50, 0x65, 0x28, 0xcb, 0x2f, 0xed,
	0xe3, 0xdc, 0xbf, 0x22, 0x80, 0xfa, 0xdb, 0x24, 0x22, 0xa5, 0x6d, 0x61, 0x11, 0x44, 0x81, 0x08,
	0x0c, 0xa4, 0x3c, 0x01, 0x84, 0x8b, 0x40, 0x74, 0xf8, 0x0d, 0x62, 0xa4, 0xb2, 0x81, 0x7c, 0x76,
	0xa3, 0x73, 0xe3, 0x37, 0x02, 0x27, 0x9c, 0xd0, 0x24, 0x8d, 0x58, 0xb9, 0x11, 0x3c, 0x24, 0x2c,
	0xec, 0x10, 0xe1, 0x9f, 0x31, 0x1c, 0x34, 0x31, 0x33, 0x1c, 0x5b, 0x0d, 0x4a, 0x1b, 0x31, 0x2e,
	0x2b, 0xe9, 0xac, 0x53, 0x2f, 0x47, 0x1d, 0x16, 0x08, 0x42, 0x93, 0x71, 0xf6, 0x0b, 0x16, 0xb4,
	0xdb, 0x98, 0x99, 0xff, 0x61, 0xf7, 0xb7, 0x4d, 0xb0, 0x6a, 0xe6, 0x42, 0x50, 0x19, 0x56, 0x23,
	0xc2, 0x43, 0xda, 0xc5, 0xac, 0xe7, 0x27, 0x41, 0x0b, 0xf3, 0x76, 0x10, 0x62, 0x3b, 0xb7, 0x93,
	0xdb, 0x2b, 0x7a, 0xa8, 0x6f, 0x7a, 0x9e, 0x5a, 0xd0, 0x3d, 0x28, 0x5d, 0x04, 0x22, 0x3c, 0x1f,
	0x38, 0x73, 0x3b, 0xbf, 0x33, 0xbd, 0x57, 0xf4, 0x96, 0x95, 0xbe, 0xef, 0xc9, 0x51, 0x00, 0x76,
	0xb3, 0x73, 0x86, 0x59, 0x82, 0x05, 0xe6, 0x7e, 0x48, 0x93, 0x3a, 0x69, 0xf8, 0x9c, 0x76, 0x58,
	0x88, 0xed, 0x99, 0x9d, 0xdc, 0xde, 0xfc, 0x83, 0xbb, 0xee, 0x70, 0x25, 0xb8, 0xe9, 0x7f, 0xe5,
	0x9e, 0xf4, 0x61, 0x55, 0x16, 0xf1, 0xa3, 0x29, 0x6f, 0x7d, 0x40, 0x54, 0x55, 0x3c, 0x35, 0x45,
	0x83, 0x5e, 0xc3, 0x46, 0x44, 0x18, 0x0e, 0x05, 0x65, 0xbd, 0x91, 0x08, 0xb3, 0x2a, 0xc2, 0xce,
	0x98, 0x08, 0x07, 0x29, 0xea, 0x68, 0xca, 0xbb, 0xd5, 0xa7, 0xc8, 0x70, 0x9f, 0x40, 0x29, 0xa4,
	0x09, 0xef, 0xc4, 0x7e, 0xb3, 0x9b, 0x92, 0xde, 0x52, 0xa4, 0xdb, 0x63, 0x48, 0xab, 0xca, 0xfd,
	0xa4, 0x7b, 0x34, 0xe5, 0x2d, 0x85, 0xe6, 0xdb, 0x90, 0x45, 0x99, 0x5c, 0x70, 0x1c, 0x32, 0x2c,
	0x52, 0xd2, 0x39, 0x45, 0xba, 0xf7, 0xd1, 0x5c, 0xd4, 0x14, 0x8a, 0x1f, 0xe5, 0x86, 0xd3, 0xa1,
	0x95, 0x26, 0xca, 0x37, 0xb0, 0xda, 0x0d, 0x3a, 0xb1, 0x18, 0x09, 0x50, 0x50, 0x01, 0xfe, 0x36,
	0x26, 0xc0, 0x2b, 0x89, 0x18, 0x70, 0xaf, 0x74, 0x07, 0xf2, 0x55, 0x59, 0xce, 0x52, 0x5b, 0x13,
	0x66, 0x39, 0x37, 0x94, 0xe5, 0x0c, 0x77, 0x13, 0x9c, 0xa1, 0xc4, 0x04, 0x4c, 0x90, 0x7a, 0x10,
	0xf6, 0xe9, 0x8b, 0x8a, 0xfe, 0x5f, 0x1f, 0x2f, 0x13, 0x75, 0x71, 0xad, 0xa0, 0xcd, 0x8f, 0xf2,
	0xde, 0x50, 0xa6, 0xf7, 0x0d, 0x9f, 0x09, 0xf6, 0x3d, 0x6c, 0x0e, 0x0e, 0x32, 0x1a, 0x0b, 0x26,
	0x3c, 0x4a, 0xde, 0x1b, 0x64, 0x63, 0x84, 0xff, 0x3b, 0xd8, 0x1c, 0x94, 0xcc, 0x28, 0xff, 0xc6,
	0x64, 0xb5, 0x93, 0xf7, 0xd6, 0xd3, 0xda, 0x19, 0x61, 0xbf, 0x0d, 0xc5, 0x33, 0x92, 0x44, 0x7e,
	0x10, 0x45, 0xcc, 0x9e, 0x57, 0x1d, 0x6a, 0x49, 0xc5, 0x7e, 0x14, 0x31, 0xf4, 0x04, 0x16, 0x18,
	0xae, 0x33, 0xcc, 0xcf, 0x7d, 0x16, 0x08, 0x6c, 0x2f, 0xa8, 0x68, 0x9b, 0xae, 0x1e, 0x06, 0x6e,
	0x3a, 0x0c, 0xdc, 0x03, 0x33, 0x2c, 0xbc, 0x79, 0xe3, 0xee, 0x05, 0x02, 0xa3, 0x4d, 0xb0, 0x22,
	0xdc, 0xf5, 0x5b, 0x34, 0xc2, 0xf6, 0xe2, 0x4e, 0x6e, 0xcf, 0xf2, 0x0a, 0x11, 0xee, 0x3e, 0xa3,
	0x11, 0x46, 0x36, 0x14, 0x62, 0x92, 0x34, 0x31, 0x8b, 0xec, 0x15, 0x6d, 0x31, 0x22, 0x7a, 0x06,
	0xa5, 0x91, 0x09, 0xc5, 0xed, 0x69, 0x15, 0x76, 0x37, 0x7b, 0xc8, 0xaa, 0xf6, 0xaa, 0x68, 0x27,
	0x7d, 0x57, 0xde, 0x72, 0x98, 0xd1, 0x72, 0xf4, 0x39, 0x14, 0x9a, 0x49, 0x20, 0x48, 0x17, 0xdb,
	0xe8, 0xfa, 0xe9, 0xa0, 0xbd, 0xbe, 0x6a, 0xcb, 0x73, 0x70, 0x2f, 0x45, 0xa1, 0x43, 0x28, 0xf6,
	0x07, 0x96, 0xbd, 0xaa, 0x28, 0xfe, 0x31, 0xf6, 0x36, 0x8d, 0x5f, 0x4a, 0x32, 0x40, 0xa2, 0x0a,
	0xcc, 0xe9, 0x0b, 0xb0, 0xd7, 0x14, 0xc7, 0x3f, 0xaf, 0xbd, 0x31, 0x7d, 0x9a, 0x34, 0xa9, 0x06,
	0x89, 0x9e, 0x03, 0x0c, 0x8a, 0xd0, 0x5e, 0x57, 0x3c, 0xee, 0x84, 0x55, 0x9c, 0x72, 0x0d, 0x31,
	0xa0, 0x47, 0x00, 0x83, 0x5d, 0x62, 0x97, 0x14, 0x9f, 0x9d, 0xe5, 0x3b, 0xec, 0xdb, 0xbd, 0x21,
	0x5f, 0xf4, 0x08, 0xac, 0x74, 0x4d, 0xda, 0x4b, 0x0a, 0xb7, 0xee, 0x86, 0x94, 0xe1, 0x3e, 0xee,
	0x99, 0xb1, 0x56, 0x66, 0x7e, 0x79, 0xbf, 0x3d, 0xe5, 0xf5, 0xbd, 0xd1, 0x17, 0x30, 0xa7, 0xb7,
	0xa5, 0xbd, 0xac, 0x70, 0x6b, 0x59, 0x5c, 0x4d, 0xd9, 0x2a, 0x9b, 0x12, 0xf5, 0xc7, 0xfb, 0xed,
	0x15, 0x81, 0xb9, 0x88, 0x48, 0xbd, 0xfe, 0x78, 0x97, 0x34, 0x12, 0xca, 0xf0, 0xae, 0x67, 0xe0,
	0x4e, 0x09, 0x96, 0xb2, 0x03, 0xdd, 0x59, 0x85, 0x95, 0x4b, 0x63, 0xcd, 0x79, 0x97, 0x87, 0x85,
	0xe1, 0x59, 0x84, 0xd6, 0x60, 0x56, 0xd0, 0x26, 0x4e, 0xcc, 0x36, 0xd2, 0x82, 0xac, 0x47, 0xd9,
	0x00, 0x98, 0xcb, 0xbd, 0x23, 0xf5, 0xa9, 0x88, 0x36, 0xa0, 0x10, 0x06, 0x7e, 0x88, 0x99, 0x50,
	0x65, 0x58, 0xf4, 0xe6, 0xc2, 0xa0, 0x8a, 0x99, 0x30, 0x86, 0x76, 0x20, 0xce, 0xd5, 0xde, 0x51,
	0x86, 0x17, 0x81, 0x38, 0x47, 0xdb, 0x30, 0x1f, 0xc6, 0x04, 0x27, 0x42, 0xa3, 0x66, 0x95, 0x11,
	0xb4, 0x4a, 0x21, 0xef, 0x80, 0x91, 0xfc, 0x26, 0xee, 0xa9, 0x41, 0x5d, 0xf4, 0x8a, 0x5a, 0x73,
	0x82, 0x7b, 0xe8, 0xef, 0xb0, 0x2c, 0x62, 0x39, 0xce, 0x59, 0x17, 0x33, 0xb5, 0x11, 0xd5, 0xac,
	0x2d, 0x7a, 0x8b, 0x22, 0xe6, 0x35, 0xa5, 0x95, 0xfb, 0x10, 0x3d, 0x04, 0x8b, 0x24, 0x1c, 0x87,
	0x1d, 0x96, 0x4e, 0x4c, 0xe7, 0x52, 0x63, 0x56, 0x28, 0x8d, 0x5f, 0x05, 0x71, 0x07, 0x7b, 0x7d,
	0x5f, 0xd9, 0x96, 0x8c, 0x52, 0x1d, 0xbc, 0xa8, 0x0f, 0x2b, 0xe5, 0x13, 0xdc, 0x73, 0xee, 0x82,
	0x95, 0x8e, 0x8c, 0x8c, 0x5b, 0x2e, 0xeb, 0xb6, 0x0e, 0x6b, 0x57, 0x4d, 0x49, 0xe7, 0x1e, 0x14,
	0xfb, 0x13, 0x0d, 0xfd, 0x45, 0x36, 0x8e, 0x11, 0x0c, 0xc1, 0x40, 0xe1, 0xfc, 0x9a, 0x83, 0xa5,
	0x6c, 0xcb, 0xa1, 0x7d, 0xb8, 0x13, 0xc6, 0x1d, 0x2e, 0x30, 0xf3, 0x49, 0xd2, 0x90, 0xc9, 0xf7,
	0xdb, 0x8c, 0xbe, 0xe9, 0xf9, 0xe9, 0xcd, 0x68, 0x12, 0xc7, 0x38, 0x1d, 0x6b, 0x9f, 0x17, 0xd2,
	0x65, 0xdf, 0x5c, 0x56, 0x15, 0xb6, 0x4c, 0xdf, 0xfa, 0xb2, 0x5a, 0x59, 0x12, 0xc4, 0x23, 0x1c,
	0xfa, 0x76, 0x6f, 0x1b, 0xaf, 0x43, 0xe3, 0x34, 0x8e, 0x84, 0x24, 0x57, 0x92, 0x4c, 0x67, 0x48,
	0x8e, 0x93, 0xcb, 0x24, 0xce, 0x8f, 0x39, 0x28, 0x8d, 0xce, 0x03, 0xf4, 0x25, 0x58, 0xf5, 0x88,
	0xeb, 0x81, 0x28, 0x0f, 0xb3, 0xf4, 0xa0, 0x3c, 0xe1, 0x28, 0x71, 0x9f, 0x46, 0x5c, 0x0e, 0x4e,
	0xaf, 0x50, 0xd7, 0x1f, 0xbb, 0xff, 0x87, 0x82, 0xd1, 0xa1, 0x45, 0x28, 0x56, 0x4e, 0xf7, 0xab,
	0x27, 0xa7, 0xc7, 0xb5, 0x97, 0xa5, 0x29, 0x29, 0x7e, 0x7b, 0x74, 0xfc, 0xf2, 0x50, 0x89, 0x39,
	0xb4, 0x00, 0xd6, 0xc1, 0x71, 0x6d, 0xbf, 0x72, 0x7a, 0x78, 0x50, 0xca, 0x3b, 0x3f, 0xcf, 0xc0,
	0xea, 0x15, 0x33, 0x66, 0xb8, 0x01, 0x72, 0xd9, 0x06, 0xd8, 0x02, 0x90, 0x9d, 0x1b, 0x62, 0x79,
	0x4c, 0x93, 0xbf, 0x21, 0x0d, 0x72, 0xc0, 0xea, 0x70, 0x99, 0x80, 0x16, 0x36, 0x89, 0xe9, 0xcb,
	0xd2, 0xd6, 0x0e, 0x38, 0xbf, 0xa0, 0x2c, 0x32, 0x4d, 0xd2, 0x97, 0x07, 0x8d, 0x38, 0x3b, 0xdc,
	0x88, 0xba, 0xab, 0xea, 0x24, 0xc6, 0xa6, 0x31, 0xe6, 0xc2, 0xe0, 0x29, 0x89, 0xf1, 0x70, 0xbb,
	0x15, 0x32, 0xed, 0x76, 0x1b, 0x8a, 0xb2, 0xcf, 0x34, 0xc6, 0xd2, 0x41, 0xa4, 0x42, 0xa1, 0x36,
	0xc1, 0x6a, 0xe2, 0x9e, 0xb6, 0x99, 0x5a, 0x6f, 0xe2, 0x9e, 0x32, 0x9d, 0xc2, 0x5a, 0xda, 0x12,
	0x3e, 0x6f, 0x92, 0xb6, 0xdf, 0xc5, 0x8c, 0xd4, 0x7b, 0x66, 0x63, 0x5f, 0xd7, 0x4a, 0x28, 0xc5,
	0xd5, 0x9a, 0xa4, 0xfd, 0x4a, 0xa1, 0xd0, 0x43, 0x28, 0x5e, 0x04, 0x44, 0xf8, 0x82, 0xb4, 0xb0,
	0x5a, 0xa3, 0xd7, 0xae, 0x49, 0x4b, 0xfa, 0xbe, 0x24, 0x2d, 0x8c, 0x28, 0xac, 0xc8, 0x46, 0x27,
	0x21, 0xf6, 0x07, 0x6b, 0x46, 0xaf, 0xd9, 0xca, 0xe4, 0x2b, 0xc2, 0xad, 0x69, 0x8e, 0x4b, 0x1b,
	0xa8, 0xc4, 0x47, 0x0c, 0xce, 0x13, 0xd8, 0x18, 0xe3, 0x8c, 0xfe, 0x0a, 0x0b, 0xf2, 0x5e, 0x7d,
	0x7d, 0xb1, 0xb2, 0x10, 0xe4, 0x0b, 0x7c, 0x5e, 0xea, 0xaa, 0x5a, 0xe5, 0xbc, 0xcb, 0xc1, 0xc6,
	0x98, 0xd5, 0x82, 0x5e, 0xc3, 0xbc, 0x7c, 0x24, 0xf8, 0x31, 0x69, 0x11, 0xa1, 0xcb, 0x68, 0xfe,
	0xc1, 0x27, 0x37, 0xdb, 0x4f, 0xae, 0x7c, 0x38, 0x9c, 0x2a, 0x02, 0x0f, 0x58, 0xff, 0xdb, 0xf9,
	0x1f, 0xc0, 0xc0, 0x82, 0x4a, 0x30, 0xfd, 0xf5, 0x8b, 0x9a, 0x8a, 0x90, 0xf7, 0xe4, 0xa7, 0x2c,
	0xa6, 0xb3, 0x0e, 0xe3, 0x42, 0xd5, 0xe7, 0xa2, 0xa7, 0x85, 0xc7, 0xeb, 0x6f, 0x3f, 0xcc, 0xcc,
	0x40, 0x9e, 0x8b, 0xb7, 0x1f, 0x66, 0x00, 0x59, 0xe9, 0x0f, 0xc6, 0xca, 0x32, 0x2c, 0x66, 0x9e,
	0xf5, 0x52, 0x91, 0x79, 0x81, 0x56, 0x56, 0x60, 0x79, 0xe4, 0xa5, 0x55, 0x79, 0xf8, 0xd3, 0xef,
	0x5b, 0xb9, 0xd7, 0xff, 0x99, 0xec, 0xb7, 0x56, 0xbb, 0xd9, 0x30, 0xbf, 0xb7, 0xce, 0xe6, 0xd4,
	0xf5, 0xff, 0xf7, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x3c, 0x7c, 0xd8, 0xdd, 0x0e, 0x00,
	0x00,
}

func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DiscoveryNamespace != that1.DiscoveryNamespace {
		return false
	}
	if len(this.WatchNamespaces) != len(that1.WatchNamespaces) {
		return false
	}
	for i := range this.WatchNamespaces {
		if this.WatchNamespaces[i] != that1.WatchNamespaces[i] {
			return false
		}
	}
	if that1.ConfigSource == nil {
		if this.ConfigSource != nil {
			return false
		}
	} else if this.ConfigSource == nil {
		return false
	} else if !this.ConfigSource.Equal(that1.ConfigSource) {
		return false
	}
	if that1.SecretSource == nil {
		if this.SecretSource != nil {
			return false
		}
	} else if this.SecretSource == nil {
		return false
	} else if !this.SecretSource.Equal(that1.SecretSource) {
		return false
	}
	if that1.ArtifactSource == nil {
		if this.ArtifactSource != nil {
			return false
		}
	} else if this.ArtifactSource == nil {
		return false
	} else if !this.ArtifactSource.Equal(that1.ArtifactSource) {
		return false
	}
	if this.BindAddr != that1.BindAddr {
		return false
	}
	if !this.RefreshRate.Equal(that1.RefreshRate) {
		return false
	}
	if this.DevMode != that1.DevMode {
		return false
	}
	if this.Linkerd != that1.Linkerd {
		return false
	}
	if !this.CircuitBreakers.Equal(that1.CircuitBreakers) {
		return false
	}
	if !this.Knative.Equal(that1.Knative) {
		return false
	}
	if !this.Discovery.Equal(that1.Discovery) {
		return false
	}
	if !this.Consul.Equal(that1.Consul) {
		return false
	}
	if !this.Kubernetes.Equal(that1.Kubernetes) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_KubernetesConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesConfigSource)
	if !ok {
		that2, ok := that.(Settings_KubernetesConfigSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesConfigSource.Equal(that1.KubernetesConfigSource) {
		return false
	}
	return true
}
func (this *Settings_DirectoryConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_DirectoryConfigSource)
	if !ok {
		that2, ok := that.(Settings_DirectoryConfigSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectoryConfigSource.Equal(that1.DirectoryConfigSource) {
		return false
	}
	return true
}
func (this *Settings_ConsulKvSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_ConsulKvSource)
	if !ok {
		that2, ok := that.(Settings_ConsulKvSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsulKvSource.Equal(that1.ConsulKvSource) {
		return false
	}
	return true
}
func (this *Settings_KubernetesSecretSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesSecretSource)
	if !ok {
		that2, ok := that.(Settings_KubernetesSecretSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesSecretSource.Equal(that1.KubernetesSecretSource) {
		return false
	}
	return true
}
func (this *Settings_VaultSecretSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_VaultSecretSource)
	if !ok {
		that2, ok := that.(Settings_VaultSecretSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VaultSecretSource.Equal(that1.VaultSecretSource) {
		return false
	}
	return true
}
func (this *Settings_DirectorySecretSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_DirectorySecretSource)
	if !ok {
		that2, ok := that.(Settings_DirectorySecretSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectorySecretSource.Equal(that1.DirectorySecretSource) {
		return false
	}
	return true
}
func (this *Settings_KubernetesArtifactSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesArtifactSource)
	if !ok {
		that2, ok := that.(Settings_KubernetesArtifactSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesArtifactSource.Equal(that1.KubernetesArtifactSource) {
		return false
	}
	return true
}
func (this *Settings_DirectoryArtifactSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_DirectoryArtifactSource)
	if !ok {
		that2, ok := that.(Settings_DirectoryArtifactSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectoryArtifactSource.Equal(that1.DirectoryArtifactSource) {
		return false
	}
	return true
}
func (this *Settings_ConsulKvArtifactSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_ConsulKvArtifactSource)
	if !ok {
		that2, ok := that.(Settings_ConsulKvArtifactSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsulKvArtifactSource.Equal(that1.ConsulKvArtifactSource) {
		return false
	}
	return true
}
func (this *Settings_KubernetesCrds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesCrds)
	if !ok {
		that2, ok := that.(Settings_KubernetesCrds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_KubernetesSecrets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesSecrets)
	if !ok {
		that2, ok := that.(Settings_KubernetesSecrets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_VaultSecrets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_VaultSecrets)
	if !ok {
		that2, ok := that.(Settings_VaultSecrets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.CaCert != that1.CaCert {
		return false
	}
	if this.CaPath != that1.CaPath {
		return false
	}
	if this.ClientCert != that1.ClientCert {
		return false
	}
	if this.ClientKey != that1.ClientKey {
		return false
	}
	if this.TlsServerName != that1.TlsServerName {
		return false
	}
	if !this.Insecure.Equal(that1.Insecure) {
		return false
	}
	if this.RootKey != that1.RootKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_ConsulKv) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_ConsulKv)
	if !ok {
		that2, ok := that.(Settings_ConsulKv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RootKey != that1.RootKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_KubernetesConfigmaps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesConfigmaps)
	if !ok {
		that2, ok := that.(Settings_KubernetesConfigmaps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_Directory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_Directory)
	if !ok {
		that2, ok := that.(Settings_Directory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Directory != that1.Directory {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_KnativeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KnativeOptions)
	if !ok {
		that2, ok := that.(Settings_KnativeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterIngressProxyAddress != that1.ClusterIngressProxyAddress {
		return false
	}
	if this.KnativeExternalProxyAddress != that1.KnativeExternalProxyAddress {
		return false
	}
	if this.KnativeInternalProxyAddress != that1.KnativeInternalProxyAddress {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_DiscoveryOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_DiscoveryOptions)
	if !ok {
		that2, ok := that.(Settings_DiscoveryOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FdsMode != that1.FdsMode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_ConsulConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_ConsulConfiguration)
	if !ok {
		that2, ok := that.(Settings_ConsulConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Datacenter != that1.Datacenter {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.CaFile != that1.CaFile {
		return false
	}
	if this.CaPath != that1.CaPath {
		return false
	}
	if this.CertFile != that1.CertFile {
		return false
	}
	if this.KeyFile != that1.KeyFile {
		return false
	}
	if !this.InsecureSkipVerify.Equal(that1.InsecureSkipVerify) {
		return false
	}
	if !this.WaitTime.Equal(that1.WaitTime) {
		return false
	}
	if !this.ServiceDiscovery.Equal(that1.ServiceDiscovery) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_ConsulConfiguration_ServiceDiscoveryOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_ConsulConfiguration_ServiceDiscoveryOptions)
	if !ok {
		that2, ok := that.(Settings_ConsulConfiguration_ServiceDiscoveryOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DataCenters) != len(that1.DataCenters) {
		return false
	}
	for i := range this.DataCenters {
		if this.DataCenters[i] != that1.DataCenters[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_KubernetesConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesConfiguration)
	if !ok {
		that2, ok := that.(Settings_KubernetesConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimits.Equal(that1.RateLimits) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_KubernetesConfiguration_RateLimits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_KubernetesConfiguration_RateLimits)
	if !ok {
		that2, ok := that.(Settings_KubernetesConfiguration_RateLimits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QPS != that1.QPS {
		return false
	}
	if this.Burst != that1.Burst {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

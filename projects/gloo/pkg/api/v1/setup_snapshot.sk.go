// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	"github.com/solo-io/go-utils/errors"
	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type SetupSnapshot struct {
	Settings SettingsList
}

func (s SetupSnapshot) Clone() SetupSnapshot {
	return SetupSnapshot{
		Settings: s.Settings.Clone(),
	}
}

func (s SetupSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashSettings(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s SetupSnapshot) hashSettings(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Settings.AsInterfaces()...)
}

func (s SetupSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	SettingsHash, err := s.hashSettings(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("settings", SettingsHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type SetupSnapshotStringer struct {
	Version  uint64
	Settings []string
}

func (ss SetupSnapshotStringer) String() string {
	s := fmt.Sprintf("SetupSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Settings %v\n", len(ss.Settings))
	for _, name := range ss.Settings {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s SetupSnapshot) Stringer() SetupSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	return SetupSnapshotStringer{
		Version:  snapshotHash,
		Settings: s.Settings.NamespacesDotNames(),
	}
}

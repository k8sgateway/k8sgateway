// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/static/static.proto

package static

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	options "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Static upstreams are used to route request to services listening at fixed IP/Host & Port pairs.
// Static upstreams can be used to proxy any kind of service, and therefore contain a ServiceSpec
// for additional service-specific configuration.
// Unlike upstreams created by service discovery, Static Upstreams must be created manually by users
type UpstreamSpec struct {
	// A list of addresses and ports
	// at least one must be specified
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Attempt to use outbound TLS
	// Gloo will automatically set this to true for port 443
	UseTls bool `protobuf:"varint,3,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// An optional Service Spec describing the service listening at this address
	ServiceSpec          *options.ServiceSpec `protobuf:"bytes,5,opt,name=service_spec,json=serviceSpec,proto3" json:"service_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c08b3c87c0f36512, []int{0}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (m *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(m, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

func (m *UpstreamSpec) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *UpstreamSpec) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *UpstreamSpec) GetServiceSpec() *options.ServiceSpec {
	if m != nil {
		return m.ServiceSpec
	}
	return nil
}

// Represents a single instance of an upstream
type Host struct {
	// Address (hostname or IP)
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Port the instance is listening on
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Address to use for SNI if using ssl.
	SniAddr string `protobuf:"bytes,4,opt,name=sni_addr,json=sniAddr,proto3" json:"sni_addr,omitempty"`
	// (Enterprise Only): Host specific health checking configuration.
	HealthCheckConfig    *Host_HealthCheckConfig `protobuf:"bytes,3,opt,name=health_check_config,json=healthCheckConfig,proto3" json:"health_check_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_c08b3c87c0f36512, []int{1}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Host.Unmarshal(m, b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Host.Marshal(b, m, deterministic)
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return xxx_messageInfo_Host.Size(m)
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Host) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Host) GetSniAddr() string {
	if m != nil {
		return m.SniAddr
	}
	return ""
}

func (m *Host) GetHealthCheckConfig() *Host_HealthCheckConfig {
	if m != nil {
		return m.HealthCheckConfig
	}
	return nil
}

type Host_HealthCheckConfig struct {
	// (Enterprise Only): Path to use when health checking this specific host.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Host_HealthCheckConfig) Reset()         { *m = Host_HealthCheckConfig{} }
func (m *Host_HealthCheckConfig) String() string { return proto.CompactTextString(m) }
func (*Host_HealthCheckConfig) ProtoMessage()    {}
func (*Host_HealthCheckConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c08b3c87c0f36512, []int{1, 0}
}
func (m *Host_HealthCheckConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Host_HealthCheckConfig.Unmarshal(m, b)
}
func (m *Host_HealthCheckConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Host_HealthCheckConfig.Marshal(b, m, deterministic)
}
func (m *Host_HealthCheckConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host_HealthCheckConfig.Merge(m, src)
}
func (m *Host_HealthCheckConfig) XXX_Size() int {
	return xxx_messageInfo_Host_HealthCheckConfig.Size(m)
}
func (m *Host_HealthCheckConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Host_HealthCheckConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Host_HealthCheckConfig proto.InternalMessageInfo

func (m *Host_HealthCheckConfig) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "static.options.gloo.solo.io.UpstreamSpec")
	proto.RegisterType((*Host)(nil), "static.options.gloo.solo.io.Host")
	proto.RegisterType((*Host_HealthCheckConfig)(nil), "static.options.gloo.solo.io.Host.HealthCheckConfig")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/options/static/static.proto", fileDescriptor_c08b3c87c0f36512)
}

var fileDescriptor_c08b3c87c0f36512 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0x65, 0x26, 0xf3, 0x83, 0x3b, 0x2c, 0xc6, 0x20, 0x11, 0x8a, 0x34, 0x0a, 0xb3, 0x21,
	0x1b, 0x6c, 0xd1, 0x22, 0xb1, 0x44, 0x50, 0x16, 0x65, 0x9b, 0xc2, 0x86, 0x4d, 0x94, 0xba, 0xae,
	0x63, 0x9a, 0xe6, 0x5a, 0xbe, 0x4e, 0xe9, 0x13, 0x21, 0x1e, 0x81, 0x37, 0x61, 0xcf, 0x3b, 0xb0,
	0x47, 0x76, 0x82, 0x40, 0x50, 0x41, 0x57, 0xb9, 0xe7, 0xe4, 0x3b, 0xd7, 0x27, 0x8a, 0xe9, 0x5c,
	0x1b, 0x5f, 0x77, 0x4b, 0x2e, 0x61, 0x2b, 0x10, 0x1a, 0x78, 0x62, 0x40, 0xe8, 0x06, 0x40, 0x58,
	0x07, 0x1f, 0x94, 0xf4, 0xd8, 0xab, 0xca, 0x1a, 0xb1, 0x7b, 0x2a, 0xc0, 0x7a, 0x03, 0x2d, 0x0a,
	0xf4, 0x95, 0x37, 0x72, 0x78, 0x70, 0xeb, 0xc0, 0x03, 0x7b, 0x38, 0xa8, 0x81, 0xe1, 0x21, 0xc7,
	0xc3, 0x4a, 0x6e, 0x60, 0x7c, 0x4f, 0x83, 0x86, 0xc8, 0x89, 0x30, 0xf5, 0x91, 0x31, 0x53, 0x7b,
	0xdf, 0x9b, 0x6a, 0xef, 0x07, 0xef, 0x5a, 0x03, 0xe8, 0x46, 0x89, 0xa8, 0x96, 0xdd, 0x5a, 0x7c,
	0x74, 0x95, 0xb5, 0xca, 0xe1, 0xf0, 0xfe, 0xd9, 0x11, 0xed, 0x94, 0xdb, 0x19, 0xa9, 0x4a, 0xb4,
	0x6a, 0x28, 0x77, 0xf3, 0x89, 0xd0, 0xcb, 0x77, 0x16, 0xbd, 0x53, 0xd5, 0x76, 0x61, 0x95, 0x64,
	0xcf, 0xe9, 0x69, 0x0d, 0xe8, 0x31, 0x25, 0xd9, 0x49, 0x3e, 0x9a, 0x3c, 0xe2, 0xff, 0x68, 0xcf,
	0xe7, 0x80, 0xbe, 0xe8, 0x79, 0x76, 0x9f, 0x9e, 0x77, 0xa8, 0x4a, 0xdf, 0x60, 0x7a, 0x92, 0x91,
	0xfc, 0xa2, 0x38, 0xeb, 0x50, 0xbd, 0x6d, 0x90, 0xbd, 0xa6, 0x97, 0xbf, 0x1f, 0x9c, 0x9e, 0x66,
	0x24, 0x2e, 0x3e, 0xb8, 0x71, 0xd1, 0x93, 0xa1, 0x4a, 0x31, 0xc2, 0x5f, 0xe2, 0xe6, 0x2b, 0xa1,
	0x49, 0x38, 0x8e, 0x31, 0x9a, 0x54, 0xab, 0x95, 0x4b, 0x49, 0x46, 0xf2, 0xdb, 0x45, 0x9c, 0x83,
	0x67, 0xc1, 0xf9, 0xf4, 0x56, 0x46, 0xf2, 0x3b, 0x45, 0x9c, 0xd9, 0x03, 0x7a, 0x81, 0xad, 0x29,
	0x23, 0x9b, 0x44, 0xf6, 0x1c, 0x5b, 0xf3, 0x32, 0xe0, 0x92, 0xde, 0xad, 0x55, 0xd5, 0xf8, 0xba,
	0x94, 0xb5, 0x92, 0x9b, 0x52, 0x42, 0xbb, 0x36, 0x3a, 0xd6, 0x1e, 0x4d, 0xa6, 0xff, 0xfd, 0x62,
	0x3e, 0x8f, 0xe1, 0x59, 0xc8, 0xce, 0x62, 0xb4, 0xb8, 0xaa, 0xff, 0xb4, 0xc6, 0x8f, 0xe9, 0xd5,
	0x5f, 0x5c, 0x2c, 0x5a, 0xf9, 0xfa, 0x67, 0xf9, 0x30, 0xbf, 0x7a, 0xf3, 0xe5, 0x7b, 0x42, 0x3e,
	0x7f, 0xbb, 0x26, 0xef, 0x5f, 0x1c, 0x77, 0xe7, 0xec, 0x46, 0x1f, 0xbe, 0x77, 0xcb, 0xb3, 0xf8,
	0x53, 0xa7, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x39, 0x6b, 0xb6, 0x38, 0xbd, 0x02, 0x00, 0x00,
}

func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hosts) != len(that1.Hosts) {
		return false
	}
	for i := range this.Hosts {
		if !this.Hosts[i].Equal(that1.Hosts[i]) {
			return false
		}
	}
	if this.UseTls != that1.UseTls {
		return false
	}
	if !this.ServiceSpec.Equal(that1.ServiceSpec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Host) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Host)
	if !ok {
		that2, ok := that.(Host)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.SniAddr != that1.SniAddr {
		return false
	}
	if !this.HealthCheckConfig.Equal(that1.HealthCheckConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Host_HealthCheckConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Host_HealthCheckConfig)
	if !ok {
		that2, ok := that.(Host_HealthCheckConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

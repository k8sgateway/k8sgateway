// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto

package hcm

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	protocol_upgrade "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol_upgrade"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracing"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HttpConnectionManagerSettings_ForwardClientCertDetails int32

const (
	HttpConnectionManagerSettings_SANITIZE            HttpConnectionManagerSettings_ForwardClientCertDetails = 0
	HttpConnectionManagerSettings_FORWARD_ONLY        HttpConnectionManagerSettings_ForwardClientCertDetails = 1
	HttpConnectionManagerSettings_APPEND_FORWARD      HttpConnectionManagerSettings_ForwardClientCertDetails = 2
	HttpConnectionManagerSettings_SANITIZE_SET        HttpConnectionManagerSettings_ForwardClientCertDetails = 3
	HttpConnectionManagerSettings_ALWAYS_FORWARD_ONLY HttpConnectionManagerSettings_ForwardClientCertDetails = 4
)

var HttpConnectionManagerSettings_ForwardClientCertDetails_name = map[int32]string{
	0: "SANITIZE",
	1: "FORWARD_ONLY",
	2: "APPEND_FORWARD",
	3: "SANITIZE_SET",
	4: "ALWAYS_FORWARD_ONLY",
}

var HttpConnectionManagerSettings_ForwardClientCertDetails_value = map[string]int32{
	"SANITIZE":            0,
	"FORWARD_ONLY":        1,
	"APPEND_FORWARD":      2,
	"SANITIZE_SET":        3,
	"ALWAYS_FORWARD_ONLY": 4,
}

func (x HttpConnectionManagerSettings_ForwardClientCertDetails) String() string {
	return proto.EnumName(HttpConnectionManagerSettings_ForwardClientCertDetails_name, int32(x))
}

func (HttpConnectionManagerSettings_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_08263ad65d35164d, []int{0, 0}
}

type HttpConnectionManagerSettings_ServerHeaderTransformation int32

const (
	// (DEFAULT) Overwrite any Server header with the contents of server_name.
	HttpConnectionManagerSettings_OVERWRITE HttpConnectionManagerSettings_ServerHeaderTransformation = 0
	// If no Server header is present, append Server server_name If a Server header is present, pass it through.
	HttpConnectionManagerSettings_APPEND_IF_ABSENT HttpConnectionManagerSettings_ServerHeaderTransformation = 1
	// Pass through the value of the server header, and do not append a header if none is present.
	HttpConnectionManagerSettings_PASS_THROUGH HttpConnectionManagerSettings_ServerHeaderTransformation = 2
)

var HttpConnectionManagerSettings_ServerHeaderTransformation_name = map[int32]string{
	0: "OVERWRITE",
	1: "APPEND_IF_ABSENT",
	2: "PASS_THROUGH",
}

var HttpConnectionManagerSettings_ServerHeaderTransformation_value = map[string]int32{
	"OVERWRITE":        0,
	"APPEND_IF_ABSENT": 1,
	"PASS_THROUGH":     2,
}

func (x HttpConnectionManagerSettings_ServerHeaderTransformation) String() string {
	return proto.EnumName(HttpConnectionManagerSettings_ServerHeaderTransformation_name, int32(x))
}

func (HttpConnectionManagerSettings_ServerHeaderTransformation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_08263ad65d35164d, []int{0, 1}
}

// Determines the action for request that contain %2F, %2f, %5C or %5c sequences in the URI path.
// This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
type HttpConnectionManagerSettings_PathWithEscapedSlashesAction int32

const (
	// Default behavior specific to implementation (i.e. Envoy) of this configuration option.
	// Envoy, by default, takes the KEEP_UNCHANGED action.
	// NOTE: the implementation may change the default behavior at-will.
	HttpConnectionManagerSettings_IMPLEMENTATION_SPECIFIC_DEFAULT HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 0
	// Keep escaped slashes.
	HttpConnectionManagerSettings_KEEP_UNCHANGED HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 1
	// Reject client request with the 400 status. gRPC requests will be rejected with the INTERNAL (13) error code.
	// The "httpN.downstream_rq_failed_path_normalization" counter is incremented for each rejected request.
	HttpConnectionManagerSettings_REJECT_REQUEST HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 2
	// Unescape %2F and %5C sequences and redirect request to the new path if these sequences were present.
	// Redirect occurs after path normalization and merge slashes transformations if they were configured.
	// NOTE: gRPC requests will be rejected with the INTERNAL (13) error code.
	// This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
	// traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
	// The "httpN.downstream_rq_redirected_with_normalized_path" counter is incremented for each
	// redirected request.
	HttpConnectionManagerSettings_UNESCAPE_AND_REDIRECT HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 3
	// Unescape %2F and %5C sequences.
	// Note: this option should not be enabled if intermediaries perform path based access control as
	// it may lead to path confusion vulnerabilities.
	HttpConnectionManagerSettings_UNESCAPE_AND_FORWARD HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 4
)

// Enum value maps for HttpConnectionManagerSettings_PathWithEscapedSlashesAction.
var (
	HttpConnectionManagerSettings_PathWithEscapedSlashesAction_name = map[int32]string{
		0: "IMPLEMENTATION_SPECIFIC_DEFAULT",
		1: "KEEP_UNCHANGED",
		2: "REJECT_REQUEST",
		3: "UNESCAPE_AND_REDIRECT",
		4: "UNESCAPE_AND_FORWARD",
	}
	HttpConnectionManagerSettings_PathWithEscapedSlashesAction_value = map[string]int32{
		"IMPLEMENTATION_SPECIFIC_DEFAULT": 0,
		"KEEP_UNCHANGED":                  1,
		"REJECT_REQUEST":                  2,
		"UNESCAPE_AND_REDIRECT":           3,
		"UNESCAPE_AND_FORWARD":            4,
	}
)

func (x HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Enum() *HttpConnectionManagerSettings_PathWithEscapedSlashesAction {
	p := new(HttpConnectionManagerSettings_PathWithEscapedSlashesAction)
	*p = x
	return p
}

func (x HttpConnectionManagerSettings_PathWithEscapedSlashesAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[2].Descriptor()
}

func (HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[2]
}

func (x HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpConnectionManagerSettings_PathWithEscapedSlashesAction.Descriptor instead.
func (HttpConnectionManagerSettings_PathWithEscapedSlashesAction) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 2}
}

// Contains various settings for Envoy's http connection manager.
// See here for more information: https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/http_conn_man/http_conn_man
type HttpConnectionManagerSettings struct {
	SkipXffAppend       bool               `protobuf:"varint,1,opt,name=skip_xff_append,json=skipXffAppend,proto3" json:"skip_xff_append,omitempty"`
	Via                 string             `protobuf:"bytes,2,opt,name=via,proto3" json:"via,omitempty"`
	XffNumTrustedHops   uint32             `protobuf:"varint,3,opt,name=xff_num_trusted_hops,json=xffNumTrustedHops,proto3" json:"xff_num_trusted_hops,omitempty"`
	UseRemoteAddress    *types.BoolValue   `protobuf:"bytes,4,opt,name=use_remote_address,json=useRemoteAddress,proto3" json:"use_remote_address,omitempty"`
	GenerateRequestId   *types.BoolValue   `protobuf:"bytes,5,opt,name=generate_request_id,json=generateRequestId,proto3" json:"generate_request_id,omitempty"`
	Proxy_100Continue   bool               `protobuf:"varint,6,opt,name=proxy_100_continue,json=proxy100Continue,proto3" json:"proxy_100_continue,omitempty"`
	StreamIdleTimeout   *time.Duration     `protobuf:"bytes,7,opt,name=stream_idle_timeout,json=streamIdleTimeout,proto3,stdduration" json:"stream_idle_timeout,omitempty"`
	IdleTimeout         *time.Duration     `protobuf:"bytes,8,opt,name=idle_timeout,json=idleTimeout,proto3,stdduration" json:"idle_timeout,omitempty"`
	MaxRequestHeadersKb *types.UInt32Value `protobuf:"bytes,9,opt,name=max_request_headers_kb,json=maxRequestHeadersKb,proto3" json:"max_request_headers_kb,omitempty"`
	RequestTimeout      *time.Duration     `protobuf:"bytes,10,opt,name=request_timeout,json=requestTimeout,proto3,stdduration" json:"request_timeout,omitempty"`
	DrainTimeout        *time.Duration     `protobuf:"bytes,12,opt,name=drain_timeout,json=drainTimeout,proto3,stdduration" json:"drain_timeout,omitempty"`
	DelayedCloseTimeout *time.Duration     `protobuf:"bytes,13,opt,name=delayed_close_timeout,json=delayedCloseTimeout,proto3,stdduration" json:"delayed_close_timeout,omitempty"`
	ServerName          string             `protobuf:"bytes,14,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// For explanation of these settings see: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/protocol.proto#envoy-api-msg-core-http1protocoloptions
	AcceptHttp_10               bool                                                       `protobuf:"varint,15,opt,name=accept_http_10,json=acceptHttp10,proto3" json:"accept_http_10,omitempty"`
	DefaultHostForHttp_10       string                                                     `protobuf:"bytes,16,opt,name=default_host_for_http_10,json=defaultHostForHttp10,proto3" json:"default_host_for_http_10,omitempty"`
	ProperCaseHeaderKeyFormat   bool                                                       `protobuf:"varint,22,opt,name=proper_case_header_key_format,json=properCaseHeaderKeyFormat,proto3" json:"proper_case_header_key_format,omitempty"`
	Tracing                     *tracing.ListenerTracingSettings                           `protobuf:"bytes,17,opt,name=tracing,proto3" json:"tracing,omitempty"`
	ForwardClientCertDetails    HttpConnectionManagerSettings_ForwardClientCertDetails     `protobuf:"varint,18,opt,name=forward_client_cert_details,json=forwardClientCertDetails,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	SetCurrentClientCertDetails *HttpConnectionManagerSettings_SetCurrentClientCertDetails `protobuf:"bytes,19,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails,proto3" json:"set_current_client_cert_details,omitempty"`
	PreserveExternalRequestId   bool                                                       `protobuf:"varint,20,opt,name=preserve_external_request_id,json=preserveExternalRequestId,proto3" json:"preserve_external_request_id,omitempty"`
	// HttpConnectionManager configuration for protocol upgrade requests.
	// Note: WebSocket upgrades are enabled by default on the HTTP Connection Manager and must be explicitly disabled.
	Upgrades []*protocol_upgrade.ProtocolUpgradeConfig `protobuf:"bytes,21,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	// For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
	MaxConnectionDuration *time.Duration `protobuf:"bytes,23,opt,name=max_connection_duration,json=maxConnectionDuration,proto3,stdduration" json:"max_connection_duration,omitempty"`
	MaxStreamDuration     *time.Duration `protobuf:"bytes,24,opt,name=max_stream_duration,json=maxStreamDuration,proto3,stdduration" json:"max_stream_duration,omitempty"`
	// For an explanation of the settings see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto.html#envoy-v3-api-enum-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-serverheadertransformation
	ServerHeaderTransformation HttpConnectionManagerSettings_ServerHeaderTransformation `protobuf:"varint,25,opt,name=server_header_transformation,json=serverHeaderTransformation,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_ServerHeaderTransformation" json:"server_header_transformation,omitempty"`
<<<<<<< HEAD
	XXX_NoUnkeyedLiteral       struct{}                                                 `json:"-"`
	XXX_unrecognized           []byte                                                   `json:"-"`
	XXX_sizecache              int32                                                    `json:"-"`
=======
	// Action to take when request URL path contains escaped slash sequences (%2F, %2f, %5C and %5c).
	// The default value can be overridden by the :ref:`http_connection_manager.path_with_escaped_slashes_action<config_http_conn_man_runtime_path_with_escaped_slashes_action>`
	// runtime variable.
	// The :ref:`http_connection_manager.path_with_escaped_slashes_action_sampling<config_http_conn_man_runtime_path_with_escaped_slashes_action_enabled>` runtime
	// variable can be used to apply the action to a portion of all requests.
	PathWithEscapedSlashesAction HttpConnectionManagerSettings_PathWithEscapedSlashesAction `protobuf:"varint,26,opt,name=path_with_escaped_slashes_action,json=pathWithEscapedSlashesAction,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_PathWithEscapedSlashesAction" json:"path_with_escaped_slashes_action,omitempty"`
>>>>>>> 47af9110d (Apply CVE changes 1.6 (#4731))
}

func (m *HttpConnectionManagerSettings) Reset()         { *m = HttpConnectionManagerSettings{} }
func (m *HttpConnectionManagerSettings) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManagerSettings) ProtoMessage()    {}
func (*HttpConnectionManagerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_08263ad65d35164d, []int{0}
}
func (m *HttpConnectionManagerSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManagerSettings.Unmarshal(m, b)
}
func (m *HttpConnectionManagerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManagerSettings.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManagerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManagerSettings.Merge(m, src)
}
func (m *HttpConnectionManagerSettings) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManagerSettings.Size(m)
}
func (m *HttpConnectionManagerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManagerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManagerSettings proto.InternalMessageInfo

func (m *HttpConnectionManagerSettings) GetSkipXffAppend() bool {
	if m != nil {
		return m.SkipXffAppend
	}
	return false
}

func (m *HttpConnectionManagerSettings) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *HttpConnectionManagerSettings) GetXffNumTrustedHops() uint32 {
	if m != nil {
		return m.XffNumTrustedHops
	}
	return 0
}

func (m *HttpConnectionManagerSettings) GetUseRemoteAddress() *types.BoolValue {
	if m != nil {
		return m.UseRemoteAddress
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetGenerateRequestId() *types.BoolValue {
	if m != nil {
		return m.GenerateRequestId
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetProxy_100Continue() bool {
	if m != nil {
		return m.Proxy_100Continue
	}
	return false
}

func (m *HttpConnectionManagerSettings) GetStreamIdleTimeout() *time.Duration {
	if m != nil {
		return m.StreamIdleTimeout
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetIdleTimeout() *time.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetMaxRequestHeadersKb() *types.UInt32Value {
	if m != nil {
		return m.MaxRequestHeadersKb
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetRequestTimeout() *time.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetDrainTimeout() *time.Duration {
	if m != nil {
		return m.DrainTimeout
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetDelayedCloseTimeout() *time.Duration {
	if m != nil {
		return m.DelayedCloseTimeout
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HttpConnectionManagerSettings) GetAcceptHttp_10() bool {
	if m != nil {
		return m.AcceptHttp_10
	}
	return false
}

func (m *HttpConnectionManagerSettings) GetDefaultHostForHttp_10() string {
	if m != nil {
		return m.DefaultHostForHttp_10
	}
	return ""
}

func (m *HttpConnectionManagerSettings) GetProperCaseHeaderKeyFormat() bool {
	if m != nil {
		return m.ProperCaseHeaderKeyFormat
	}
	return false
}

func (m *HttpConnectionManagerSettings) GetTracing() *tracing.ListenerTracingSettings {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetForwardClientCertDetails() HttpConnectionManagerSettings_ForwardClientCertDetails {
	if m != nil {
		return m.ForwardClientCertDetails
	}
	return HttpConnectionManagerSettings_SANITIZE
}

func (m *HttpConnectionManagerSettings) GetSetCurrentClientCertDetails() *HttpConnectionManagerSettings_SetCurrentClientCertDetails {
	if m != nil {
		return m.SetCurrentClientCertDetails
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetPreserveExternalRequestId() bool {
	if m != nil {
		return m.PreserveExternalRequestId
	}
	return false
}

func (m *HttpConnectionManagerSettings) GetUpgrades() []*protocol_upgrade.ProtocolUpgradeConfig {
	if m != nil {
		return m.Upgrades
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetMaxConnectionDuration() *time.Duration {
	if m != nil {
		return m.MaxConnectionDuration
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetMaxStreamDuration() *time.Duration {
	if m != nil {
		return m.MaxStreamDuration
	}
	return nil
}

func (m *HttpConnectionManagerSettings) GetServerHeaderTransformation() HttpConnectionManagerSettings_ServerHeaderTransformation {
	if m != nil {
		return m.ServerHeaderTransformation
	}
	return HttpConnectionManagerSettings_OVERWRITE
}

func (x *HttpConnectionManagerSettings) GetPathWithEscapedSlashesAction() HttpConnectionManagerSettings_PathWithEscapedSlashesAction {
	if x != nil {
		return x.PathWithEscapedSlashesAction
	}
	return HttpConnectionManagerSettings_IMPLEMENTATION_SPECIFIC_DEFAULT
}

type HttpConnectionManagerSettings_SetCurrentClientCertDetails struct {
	Subject              *types.BoolValue `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Cert                 bool             `protobuf:"varint,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Chain                bool             `protobuf:"varint,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Dns                  bool             `protobuf:"varint,4,opt,name=dns,proto3" json:"dns,omitempty"`
	Uri                  bool             `protobuf:"varint,5,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) Reset() {
	*m = HttpConnectionManagerSettings_SetCurrentClientCertDetails{}
}
func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) String() string {
	return proto.CompactTextString(m)
}
func (*HttpConnectionManagerSettings_SetCurrentClientCertDetails) ProtoMessage() {}
func (*HttpConnectionManagerSettings_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_08263ad65d35164d, []int{0, 0}
}
func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManagerSettings_SetCurrentClientCertDetails.Unmarshal(m, b)
}
func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManagerSettings_SetCurrentClientCertDetails.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManagerSettings_SetCurrentClientCertDetails.Merge(m, src)
}
func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManagerSettings_SetCurrentClientCertDetails.Size(m)
}
func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManagerSettings_SetCurrentClientCertDetails.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManagerSettings_SetCurrentClientCertDetails proto.InternalMessageInfo

func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetSubject() *types.BoolValue {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetCert() bool {
	if m != nil {
		return m.Cert
	}
	return false
}

func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetChain() bool {
	if m != nil {
		return m.Chain
	}
	return false
}

func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetDns() bool {
	if m != nil {
		return m.Dns
	}
	return false
}

func (m *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetUri() bool {
	if m != nil {
		return m.Uri
	}
	return false
}

<<<<<<< HEAD
func init() {
	proto.RegisterEnum("hcm.options.gloo.solo.io.HttpConnectionManagerSettings_ForwardClientCertDetails", HttpConnectionManagerSettings_ForwardClientCertDetails_name, HttpConnectionManagerSettings_ForwardClientCertDetails_value)
	proto.RegisterEnum("hcm.options.gloo.solo.io.HttpConnectionManagerSettings_ServerHeaderTransformation", HttpConnectionManagerSettings_ServerHeaderTransformation_name, HttpConnectionManagerSettings_ServerHeaderTransformation_value)
	proto.RegisterType((*HttpConnectionManagerSettings)(nil), "hcm.options.gloo.solo.io.HttpConnectionManagerSettings")
	proto.RegisterType((*HttpConnectionManagerSettings_SetCurrentClientCertDetails)(nil), "hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto", fileDescriptor_08263ad65d35164d)
}

var fileDescriptor_08263ad65d35164d = []byte{
	// 1140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4d, 0x73, 0xdb, 0x36,
	0x13, 0xc7, 0x1f, 0xc6, 0x4e, 0xa2, 0xc0, 0x2f, 0xa1, 0x61, 0x27, 0x61, 0x9c, 0x37, 0x4f, 0xe6,
	0x99, 0x8e, 0x0f, 0x2d, 0x65, 0x3b, 0x7d, 0xb9, 0x64, 0xa6, 0x95, 0x65, 0xab, 0x52, 0x93, 0x4a,
	0x2e, 0xa9, 0xc4, 0x49, 0x2e, 0x18, 0x88, 0x5c, 0x52, 0xac, 0x49, 0x82, 0x05, 0xc0, 0x44, 0xfe,
	0x14, 0xbd, 0xf4, 0xd0, 0x1e, 0x7b, 0xeb, 0x4c, 0xbf, 0x40, 0xbf, 0x4d, 0x67, 0xfa, 0x1d, 0x7a,
	0xef, 0x00, 0x20, 0x95, 0x64, 0x6c, 0xc5, 0x9a, 0x1c, 0x3c, 0x06, 0xb1, 0xfb, 0xff, 0x01, 0x58,
	0x60, 0x77, 0x85, 0xf6, 0xe3, 0x44, 0x8e, 0xcb, 0x91, 0x1b, 0xb0, 0xac, 0x29, 0x58, 0xca, 0x3e,
	0x4b, 0x58, 0x33, 0x4e, 0x19, 0x6b, 0x16, 0x9c, 0xfd, 0x08, 0x81, 0x14, 0xe6, 0x8b, 0x16, 0x49,
	0xf3, 0xf5, 0x6e, 0x93, 0x15, 0x32, 0x61, 0xb9, 0x68, 0x8e, 0x83, 0x4c, 0xfd, 0xb9, 0x05, 0x67,
	0x92, 0x61, 0x47, 0x0d, 0x2b, 0x93, 0xab, 0xdc, 0x5d, 0x45, 0x72, 0x13, 0xb6, 0xb9, 0x11, 0xb3,
	0x98, 0x69, 0xa7, 0xa6, 0x1a, 0x19, 0xff, 0xcd, 0xfb, 0x31, 0x63, 0x71, 0x0a, 0x4d, 0xfd, 0x35,
	0x2a, 0xa3, 0xe6, 0x1b, 0x4e, 0x8b, 0x02, 0xb8, 0x98, 0x65, 0x0f, 0x4b, 0x4e, 0x15, 0xbd, 0xb2,
	0x7f, 0x75, 0xf1, 0x06, 0x25, 0xa7, 0x41, 0x92, 0xc7, 0xf5, 0xff, 0x4a, 0xd8, 0xbb, 0x58, 0xa8,
	0x1d, 0x03, 0x96, 0x92, 0xb2, 0x88, 0x39, 0x0d, 0xe1, 0xcc, 0x44, 0x85, 0xc2, 0x30, 0x91, 0xe6,
	0x60, 0x30, 0x91, 0x66, 0xee, 0xe1, 0x9f, 0x6b, 0xe8, 0x5e, 0x57, 0xca, 0xa2, 0xcd, 0xf2, 0x1c,
	0x02, 0xc5, 0xfb, 0x9e, 0xe6, 0x34, 0x06, 0xee, 0x83, 0x94, 0x49, 0x1e, 0x0b, 0xfc, 0x09, 0xba,
	0x2e, 0x4e, 0x92, 0x82, 0x4c, 0xa2, 0x88, 0xa8, 0x23, 0xe7, 0xa1, 0x63, 0x6d, 0x59, 0xdb, 0x0d,
	0x6f, 0x45, 0x4d, 0xbf, 0x88, 0xa2, 0x96, 0x9e, 0xc4, 0x36, 0x5a, 0x78, 0x9d, 0x50, 0xe7, 0xd2,
	0x96, 0xb5, 0x7d, 0xcd, 0x53, 0x43, 0xdc, 0x44, 0x1b, 0x4a, 0x94, 0x97, 0x19, 0x91, 0xbc, 0x14,
	0x12, 0x42, 0x32, 0x66, 0x85, 0x70, 0x16, 0xb6, 0xac, 0xed, 0x15, 0x6f, 0x6d, 0x12, 0x45, 0xfd,
	0x32, 0x1b, 0x1a, 0x4b, 0x97, 0x15, 0x02, 0x77, 0x11, 0x2e, 0x05, 0x10, 0x0e, 0x19, 0x93, 0x40,
	0x68, 0x18, 0x72, 0x10, 0xc2, 0x59, 0xdc, 0xb2, 0xb6, 0x97, 0xf6, 0x36, 0x5d, 0x13, 0x61, 0xb7,
	0x8e, 0xb0, 0xbb, 0xcf, 0x58, 0xfa, 0x9c, 0xa6, 0x25, 0x78, 0x76, 0x29, 0xc0, 0xd3, 0xa2, 0x96,
	0xd1, 0xe0, 0xef, 0xd0, 0x7a, 0x0c, 0x39, 0x70, 0x2a, 0x15, 0xee, 0xa7, 0x12, 0x84, 0x24, 0x49,
	0xe8, 0x5c, 0xbe, 0x10, 0xb5, 0x56, 0xcb, 0x3c, 0xa3, 0xea, 0x85, 0xf8, 0x53, 0x84, 0x0b, 0xce,
	0x26, 0xa7, 0x64, 0x77, 0x67, 0x87, 0x04, 0x2c, 0x97, 0x49, 0x5e, 0x82, 0x73, 0x45, 0xc7, 0xc0,
	0xd6, 0x96, 0xdd, 0x9d, 0x9d, 0x76, 0x35, 0x8f, 0x07, 0x68, 0x5d, 0x48, 0x0e, 0x34, 0x23, 0x49,
	0x98, 0x02, 0x91, 0x49, 0x06, 0xac, 0x94, 0xce, 0x55, 0xbd, 0xf2, 0xed, 0x33, 0x2b, 0x1f, 0x54,
	0xcf, 0x64, 0x7f, 0xf1, 0xd7, 0xbf, 0x1f, 0x58, 0xde, 0x9a, 0xd1, 0xf6, 0xc2, 0x14, 0x86, 0x46,
	0x89, 0xf7, 0xd1, 0xf2, 0x7b, 0xa4, 0xc6, 0x7c, 0xa4, 0xa5, 0xe4, 0x1d, 0xc6, 0x0f, 0xe8, 0x66,
	0x46, 0x27, 0xd3, 0x48, 0x8c, 0x81, 0x86, 0xc0, 0x05, 0x39, 0x19, 0x39, 0xd7, 0x34, 0xed, 0xee,
	0x19, 0xda, 0xb3, 0x5e, 0x2e, 0x1f, 0xed, 0x99, 0x98, 0xac, 0x67, 0x74, 0x52, 0x85, 0xa3, 0x6b,
	0x94, 0x4f, 0x46, 0xb8, 0x8b, 0xae, 0xd7, 0xb8, 0x7a, 0x67, 0x68, 0xbe, 0x9d, 0xad, 0x56, 0xba,
	0x7a, 0x73, 0x07, 0x68, 0x25, 0xe4, 0x34, 0xc9, 0xa7, 0x9c, 0xe5, 0xf9, 0x38, 0xcb, 0x5a, 0x55,
	0x53, 0x7c, 0x74, 0x23, 0x84, 0x94, 0x9e, 0x42, 0x48, 0x82, 0x94, 0x89, 0xb7, 0xf1, 0x5a, 0x99,
	0x8f, 0xb6, 0x5e, 0xa9, 0xdb, 0x4a, 0x5c, 0x43, 0x1f, 0xa0, 0x25, 0x01, 0xfc, 0x35, 0x70, 0x92,
	0xd3, 0x0c, 0x9c, 0x55, 0xfd, 0xb6, 0x91, 0x99, 0xea, 0xd3, 0x0c, 0xf0, 0xff, 0xd1, 0x2a, 0x0d,
	0x02, 0x28, 0x24, 0x19, 0x4b, 0x59, 0x90, 0xdd, 0x1d, 0xe7, 0xba, 0x7e, 0x17, 0xcb, 0x66, 0x56,
	0x65, 0xd6, 0xee, 0x0e, 0xfe, 0x12, 0x39, 0x21, 0x44, 0xb4, 0x4c, 0x25, 0x19, 0x33, 0x21, 0x49,
	0xc4, 0xf8, 0xd4, 0xdf, 0xd6, 0xcc, 0x8d, 0xca, 0xde, 0x65, 0x42, 0x76, 0x18, 0xaf, 0x74, 0xdf,
	0xa0, 0x7b, 0x05, 0x67, 0x05, 0x70, 0x12, 0x50, 0x01, 0xd5, 0xb5, 0x91, 0x13, 0x38, 0x55, 0x84,
	0x8c, 0x4a, 0xe7, 0xa6, 0x5e, 0xec, 0xb6, 0x71, 0x6a, 0x53, 0x01, 0xe6, 0x7e, 0x9e, 0xc0, 0x69,
	0x47, 0x3b, 0xe0, 0x01, 0xba, 0x5a, 0x95, 0x13, 0x67, 0x4d, 0xc7, 0xe1, 0x0b, 0xb7, 0x2e, 0x2f,
	0xe7, 0x15, 0x3f, 0xf7, 0x69, 0x22, 0xa4, 0x4a, 0x80, 0xa1, 0x71, 0xaa, 0x8b, 0x80, 0x57, 0x53,
	0xf0, 0xcf, 0x16, 0xba, 0x13, 0x31, 0xfe, 0x86, 0x72, 0x15, 0xe7, 0x04, 0x72, 0x49, 0x02, 0xe0,
	0x92, 0x84, 0x20, 0x69, 0x92, 0x0a, 0x07, 0x6f, 0x59, 0xdb, 0xab, 0x7b, 0x47, 0xee, 0xac, 0xf2,
	0xea, 0x7e, 0xb0, 0xd8, 0xb8, 0x1d, 0x83, 0x6e, 0x6b, 0x72, 0x1b, 0xb8, 0x3c, 0x30, 0x5c, 0xcf,
	0x89, 0x66, 0x58, 0xf0, 0x6f, 0x16, 0x7a, 0x20, 0x40, 0x92, 0xa0, 0xe4, 0x5c, 0x6f, 0xe7, 0x9c,
	0x5d, 0xad, 0xeb, 0xb3, 0xfb, 0x1f, 0xbb, 0x2b, 0x1f, 0x64, 0xdb, 0xd0, 0xcf, 0x6e, 0xec, 0x8e,
	0x98, 0x6d, 0xc4, 0x5f, 0xa3, 0xbb, 0x05, 0x07, 0xfd, 0x5e, 0x08, 0x4c, 0x24, 0xf0, 0x9c, 0xa6,
	0xef, 0xd6, 0xa3, 0x8d, 0xfa, 0xfe, 0x8c, 0xcf, 0x61, 0xe5, 0xf2, 0xb6, 0xf6, 0xbc, 0x40, 0x8d,
	0xaa, 0x86, 0x0b, 0xe7, 0xc6, 0xd6, 0xc2, 0xf6, 0xd2, 0xde, 0x63, 0xf7, 0x4c, 0x75, 0x3f, 0xf7,
	0x44, 0x47, 0x95, 0xd7, 0x33, 0xe3, 0xd4, 0x66, 0x79, 0x94, 0xc4, 0xde, 0x94, 0x86, 0x8f, 0xd1,
	0x2d, 0x55, 0x12, 0x82, 0xe9, 0xa1, 0x49, 0xdd, 0xb1, 0x9c, 0x5b, 0xf3, 0x65, 0xcc, 0x8d, 0x8c,
	0x4e, 0xde, 0xc6, 0xac, 0x36, 0xaa, 0x02, 0xa8, 0xc0, 0x55, 0x11, 0x9c, 0x42, 0x9d, 0x39, 0x0b,
	0x60, 0x46, 0x27, 0xbe, 0x96, 0x4e, 0x81, 0xbf, 0x58, 0xe8, 0x6e, 0x95, 0x85, 0x55, 0x06, 0x48,
	0x4e, 0x73, 0x61, 0x52, 0x40, 0xa1, 0x6f, 0xeb, 0x37, 0xe7, 0x7d, 0xfc, 0xed, 0x2a, 0xb6, 0xc9,
	0x9c, 0xe1, 0x7b, 0x64, 0x6f, 0x53, 0xcc, 0xb4, 0x6d, 0xfe, 0x6e, 0xa1, 0x3b, 0x1f, 0x78, 0x18,
	0xf8, 0x73, 0x74, 0x55, 0x94, 0x23, 0xd5, 0xb5, 0x75, 0xbf, 0xfc, 0x70, 0xdb, 0xa9, 0x5d, 0x31,
	0x46, 0x8b, 0xea, 0xe5, 0xea, 0x36, 0xda, 0xf0, 0xf4, 0x18, 0x6f, 0xa0, 0xcb, 0xc1, 0x98, 0x26,
	0xb9, 0x6e, 0x9c, 0x0d, 0xcf, 0x7c, 0xa8, 0x7e, 0x1b, 0xe6, 0xa6, 0x3b, 0x36, 0x3c, 0x35, 0x54,
	0x33, 0x25, 0x4f, 0x74, 0x93, 0x6b, 0x78, 0x6a, 0xf8, 0xf0, 0x14, 0x39, 0xb3, 0x32, 0x0a, 0x2f,
	0xa3, 0x86, 0xdf, 0xea, 0xf7, 0x86, 0xbd, 0x57, 0x87, 0xf6, 0xff, 0xb0, 0x8d, 0x96, 0x3b, 0x03,
	0xef, 0xb8, 0xe5, 0x1d, 0x90, 0x41, 0xff, 0xe9, 0x4b, 0xdb, 0xc2, 0x18, 0xad, 0xb6, 0x8e, 0x8e,
	0x0e, 0xfb, 0x07, 0xa4, 0x32, 0xd8, 0x97, 0x94, 0x57, 0xad, 0x21, 0xfe, 0xe1, 0xd0, 0x5e, 0xc0,
	0xb7, 0xd0, 0x7a, 0xeb, 0xe9, 0x71, 0xeb, 0xa5, 0x4f, 0xde, 0x93, 0x2f, 0x3e, 0xf4, 0xd1, 0xe6,
	0xec, 0xc0, 0xe2, 0x15, 0x74, 0x6d, 0xf0, 0xfc, 0xd0, 0x3b, 0xf6, 0x7a, 0x43, 0xb5, 0xfa, 0x06,
	0xb2, 0xab, 0xb5, 0x7a, 0x1d, 0xd2, 0xda, 0xf7, 0x0f, 0xfb, 0x43, 0xdb, 0x52, 0xab, 0x1d, 0xb5,
	0x7c, 0x9f, 0x0c, 0xbb, 0xde, 0xe0, 0xd9, 0xb7, 0x5d, 0xfb, 0xd2, 0x7e, 0xe7, 0xaf, 0x7f, 0x17,
	0xad, 0x3f, 0xfe, 0xb9, 0x6f, 0xbd, 0x7a, 0x3c, 0xdf, 0x6f, 0xc0, 0xe2, 0x24, 0x3e, 0xe7, 0x77,
	0xe0, 0xe8, 0x8a, 0xbe, 0x82, 0x47, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x91, 0xe0, 0xa8, 0x17,
	0x4a, 0x0a, 0x00, 0x00,
}

func (this *HttpConnectionManagerSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpConnectionManagerSettings)
	if !ok {
		that2, ok := that.(HttpConnectionManagerSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SkipXffAppend != that1.SkipXffAppend {
		return false
	}
	if this.Via != that1.Via {
		return false
	}
	if this.XffNumTrustedHops != that1.XffNumTrustedHops {
		return false
	}
	if !this.UseRemoteAddress.Equal(that1.UseRemoteAddress) {
		return false
	}
	if !this.GenerateRequestId.Equal(that1.GenerateRequestId) {
		return false
	}
	if this.Proxy_100Continue != that1.Proxy_100Continue {
		return false
	}
	if this.StreamIdleTimeout != nil && that1.StreamIdleTimeout != nil {
		if *this.StreamIdleTimeout != *that1.StreamIdleTimeout {
			return false
		}
	} else if this.StreamIdleTimeout != nil {
		return false
	} else if that1.StreamIdleTimeout != nil {
		return false
	}
	if this.IdleTimeout != nil && that1.IdleTimeout != nil {
		if *this.IdleTimeout != *that1.IdleTimeout {
			return false
		}
	} else if this.IdleTimeout != nil {
		return false
	} else if that1.IdleTimeout != nil {
		return false
	}
	if !this.MaxRequestHeadersKb.Equal(that1.MaxRequestHeadersKb) {
		return false
	}
	if this.RequestTimeout != nil && that1.RequestTimeout != nil {
		if *this.RequestTimeout != *that1.RequestTimeout {
			return false
		}
	} else if this.RequestTimeout != nil {
		return false
	} else if that1.RequestTimeout != nil {
		return false
	}
	if this.DrainTimeout != nil && that1.DrainTimeout != nil {
		if *this.DrainTimeout != *that1.DrainTimeout {
			return false
		}
	} else if this.DrainTimeout != nil {
		return false
	} else if that1.DrainTimeout != nil {
		return false
	}
	if this.DelayedCloseTimeout != nil && that1.DelayedCloseTimeout != nil {
		if *this.DelayedCloseTimeout != *that1.DelayedCloseTimeout {
			return false
		}
	} else if this.DelayedCloseTimeout != nil {
		return false
	} else if that1.DelayedCloseTimeout != nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.AcceptHttp_10 != that1.AcceptHttp_10 {
		return false
	}
	if this.DefaultHostForHttp_10 != that1.DefaultHostForHttp_10 {
		return false
	}
	if this.ProperCaseHeaderKeyFormat != that1.ProperCaseHeaderKeyFormat {
		return false
	}
	if !this.Tracing.Equal(that1.Tracing) {
		return false
	}
	if this.ForwardClientCertDetails != that1.ForwardClientCertDetails {
		return false
	}
	if !this.SetCurrentClientCertDetails.Equal(that1.SetCurrentClientCertDetails) {
		return false
	}
	if this.PreserveExternalRequestId != that1.PreserveExternalRequestId {
		return false
	}
	if len(this.Upgrades) != len(that1.Upgrades) {
		return false
	}
	for i := range this.Upgrades {
		if !this.Upgrades[i].Equal(that1.Upgrades[i]) {
			return false
		}
	}
	if this.MaxConnectionDuration != nil && that1.MaxConnectionDuration != nil {
		if *this.MaxConnectionDuration != *that1.MaxConnectionDuration {
			return false
=======
var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x63, 0x6d, 0x2f, 0x68, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x68, 0x63, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x13, 0x0a,
	0x1d, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x78, 0x66, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x58, 0x66, 0x66,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x78, 0x66, 0x66, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x78, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x49, 0x0a,
	0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6b, 0x62,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4b, 0x62, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a,
	0x0d, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a,
	0x15, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x31, 0x30, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x74, 0x74,
	0x70, 0x31, 0x30, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x31, 0x30, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x74, 0x74, 0x70, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x1d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x43, 0x61, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x8f,
	0x01, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x63, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x99, 0x01, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x63, 0x6d,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x1b, 0x73, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68,
	0x63, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x63, 0x6d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x70,
	0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa1, 0x01, 0x0a, 0x1b,
	0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22,
	0x79, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x41, 0x4e, 0x49, 0x54, 0x49, 0x5a, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x41, 0x4e, 0x49, 0x54, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x22, 0x53, 0x0a, 0x1a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x45, 0x4e,
	0x44, 0x5f, 0x49, 0x46, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x02, 0x22,
	0xa0, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x45, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x55, 0x4e,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x4e, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x45, 0x53,
	0x43, 0x41, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x04, 0x42, 0x46, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68,
	0x63, 0x6d, 0xb8, 0xf5, 0x04, 0x01, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData = file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_goTypes = []interface{}{
	(HttpConnectionManagerSettings_ForwardClientCertDetails)(0),       // 0: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ForwardClientCertDetails
	(HttpConnectionManagerSettings_ServerHeaderTransformation)(0),     // 1: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ServerHeaderTransformation
	(HttpConnectionManagerSettings_PathWithEscapedSlashesAction)(0),   // 2: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.PathWithEscapedSlashesAction
	(*HttpConnectionManagerSettings)(nil),                             // 3: hcm.options.gloo.solo.io.HttpConnectionManagerSettings
	(*HttpConnectionManagerSettings_SetCurrentClientCertDetails)(nil), // 4: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails
	(*wrappers.BoolValue)(nil),                                        // 5: google.protobuf.BoolValue
	(*duration.Duration)(nil),                                         // 6: google.protobuf.Duration
	(*wrappers.UInt32Value)(nil),                                      // 7: google.protobuf.UInt32Value
	(*tracing.ListenerTracingSettings)(nil),                           // 8: tracing.options.gloo.solo.io.ListenerTracingSettings
	(*protocol_upgrade.ProtocolUpgradeConfig)(nil),                    // 9: protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_depIdxs = []int32{
	5,  // 0: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.use_remote_address:type_name -> google.protobuf.BoolValue
	5,  // 1: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.generate_request_id:type_name -> google.protobuf.BoolValue
	6,  // 2: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.stream_idle_timeout:type_name -> google.protobuf.Duration
	6,  // 3: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.idle_timeout:type_name -> google.protobuf.Duration
	7,  // 4: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_request_headers_kb:type_name -> google.protobuf.UInt32Value
	6,  // 5: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.request_timeout:type_name -> google.protobuf.Duration
	6,  // 6: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.drain_timeout:type_name -> google.protobuf.Duration
	6,  // 7: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.delayed_close_timeout:type_name -> google.protobuf.Duration
	8,  // 8: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.tracing:type_name -> tracing.options.gloo.solo.io.ListenerTracingSettings
	0,  // 9: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.forward_client_cert_details:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ForwardClientCertDetails
	4,  // 10: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.set_current_client_cert_details:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails
	9,  // 11: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.upgrades:type_name -> protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	6,  // 12: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_connection_duration:type_name -> google.protobuf.Duration
	6,  // 13: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_stream_duration:type_name -> google.protobuf.Duration
	1,  // 14: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.server_header_transformation:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ServerHeaderTransformation
	2,  // 15: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.path_with_escaped_slashes_action:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.PathWithEscapedSlashesAction
	5,  // 16: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails.subject:type_name -> google.protobuf.BoolValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpConnectionManagerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
>>>>>>> 47af9110d (Apply CVE changes 1.6 (#4731))
		}
	} else if this.MaxConnectionDuration != nil {
		return false
	} else if that1.MaxConnectionDuration != nil {
		return false
	}
	if this.MaxStreamDuration != nil && that1.MaxStreamDuration != nil {
		if *this.MaxStreamDuration != *that1.MaxStreamDuration {
			return false
		}
	} else if this.MaxStreamDuration != nil {
		return false
	} else if that1.MaxStreamDuration != nil {
		return false
	}
	if this.ServerHeaderTransformation != that1.ServerHeaderTransformation {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpConnectionManagerSettings_SetCurrentClientCertDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpConnectionManagerSettings_SetCurrentClientCertDetails)
	if !ok {
		that2, ok := that.(HttpConnectionManagerSettings_SetCurrentClientCertDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Subject.Equal(that1.Subject) {
		return false
	}
	if this.Cert != that1.Cert {
		return false
	}
	if this.Chain != that1.Chain {
		return false
	}
	if this.Dns != that1.Dns {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
<<<<<<< HEAD
	return true
=======
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_depIdxs = nil
>>>>>>> 47af9110d (Apply CVE changes 1.6 (#4731))
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto

package headers

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This plugin provides configuration options to append and remove headers from
// requests and responses
// HeaderManipulation can be specified on routes, virtual hosts, or weighted destinations
type HeaderManipulation struct {
	// Specifies a list of HTTP headers that should be added to each request
	// handled by this route or virtual host. For more information, including
	// details on header value syntax, see the
	// [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_conn_man/headers#config-http-conn-man-headers-custom-request-headers) .
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each request
	// handled by this route or virtual host.
	RequestHeadersToRemove []string `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Specifies a list of HTTP headers that should be added to each response
	// handled by this route or host. For more information, including
	// details on header value syntax, see the
	// [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_conn_man/headers#config-http-conn-man-headers-custom-request-headers) .
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each response
	// handled by this route or virtual host.
	ResponseHeadersToRemove []string `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *HeaderManipulation) Reset()         { *m = HeaderManipulation{} }
func (m *HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*HeaderManipulation) ProtoMessage()    {}
func (*HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc0de64b70fd96e8, []int{0}
}
func (m *HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderManipulation.Unmarshal(m, b)
}
func (m *HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderManipulation.Marshal(b, m, deterministic)
}
func (m *HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderManipulation.Merge(m, src)
}
func (m *HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_HeaderManipulation.Size(m)
}
func (m *HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderManipulation proto.InternalMessageInfo

func (m *HeaderManipulation) GetRequestHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *HeaderManipulation) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *HeaderManipulation) GetResponseHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *HeaderManipulation) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

// Header name/value pair plus option to control append behavior.
type HeaderValueOption struct {
	// Header name/value pair that this option applies to.
	Header *HeaderValue `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Should the value be appended? If true (default), the value is appended to
	// existing values.
	Append               *types.BoolValue `protobuf:"bytes,2,opt,name=append,proto3" json:"append,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HeaderValueOption) Reset()         { *m = HeaderValueOption{} }
func (m *HeaderValueOption) String() string { return proto.CompactTextString(m) }
func (*HeaderValueOption) ProtoMessage()    {}
func (*HeaderValueOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc0de64b70fd96e8, []int{1}
}
func (m *HeaderValueOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderValueOption.Unmarshal(m, b)
}
func (m *HeaderValueOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderValueOption.Marshal(b, m, deterministic)
}
func (m *HeaderValueOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderValueOption.Merge(m, src)
}
func (m *HeaderValueOption) XXX_Size() int {
	return xxx_messageInfo_HeaderValueOption.Size(m)
}
func (m *HeaderValueOption) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderValueOption.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderValueOption proto.InternalMessageInfo

func (m *HeaderValueOption) GetHeader() *HeaderValue {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HeaderValueOption) GetAppend() *types.BoolValue {
	if m != nil {
		return m.Append
	}
	return nil
}

// Header name/value pair.
type HeaderValue struct {
	// Header name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Header value.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeaderValue) Reset()         { *m = HeaderValue{} }
func (m *HeaderValue) String() string { return proto.CompactTextString(m) }
func (*HeaderValue) ProtoMessage()    {}
func (*HeaderValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc0de64b70fd96e8, []int{2}
}
func (m *HeaderValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderValue.Unmarshal(m, b)
}
func (m *HeaderValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderValue.Marshal(b, m, deterministic)
}
func (m *HeaderValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderValue.Merge(m, src)
}
func (m *HeaderValue) XXX_Size() int {
	return xxx_messageInfo_HeaderValue.Size(m)
}
func (m *HeaderValue) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderValue.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderValue proto.InternalMessageInfo

func (m *HeaderValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HeaderValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*HeaderManipulation)(nil), "headers.options.gloo.solo.io.HeaderManipulation")
	proto.RegisterType((*HeaderValueOption)(nil), "headers.options.gloo.solo.io.HeaderValueOption")
	proto.RegisterType((*HeaderValue)(nil), "headers.options.gloo.solo.io.HeaderValue")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto", fileDescriptor_fc0de64b70fd96e8)
}

var fileDescriptor_fc0de64b70fd96e8 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x53, 0xca, 0x25, 0x61, 0xd8, 0xdc, 0x3b, 0x97, 0x40, 0x6d, 0x0c, 0x21, 0xac, 0x70,
	0xe1, 0x4c, 0xc4, 0xb8, 0x30, 0x6e, 0x84, 0x95, 0x21, 0x31, 0x26, 0x8d, 0x71, 0xe1, 0x86, 0x14,
	0x7a, 0x28, 0x95, 0xd2, 0x33, 0xb6, 0x53, 0xc4, 0x57, 0xf0, 0x49, 0x7c, 0x04, 0x9f, 0xc5, 0xa5,
	0xef, 0xe0, 0xde, 0x74, 0xa6, 0x10, 0x05, 0x34, 0xc4, 0xd5, 0xcc, 0x99, 0x73, 0xfe, 0xff, 0xff,
	0x92, 0x33, 0xa4, 0xef, 0x07, 0x72, 0x92, 0x0e, 0xd9, 0x08, 0x67, 0x3c, 0xc1, 0x10, 0x0f, 0x03,
	0xe4, 0x7e, 0x88, 0xc8, 0x45, 0x8c, 0x77, 0x30, 0x92, 0x89, 0xae, 0x5c, 0x11, 0xf0, 0xf9, 0x11,
	0x47, 0x21, 0x03, 0x8c, 0x12, 0x3e, 0x01, 0xd7, 0x83, 0x78, 0x75, 0x32, 0x11, 0xa3, 0x44, 0xba,
	0xbf, 0x2c, 0xf3, 0x31, 0x96, 0x49, 0x59, 0xe6, 0xca, 0x02, 0xb4, 0xab, 0x3e, 0xfa, 0xa8, 0x06,
	0x79, 0x76, 0xd3, 0x1a, 0x9b, 0xc2, 0x42, 0xea, 0x47, 0x58, 0xc8, 0xfc, 0xad, 0xe1, 0x23, 0xfa,
	0x21, 0x70, 0x55, 0x0d, 0xd3, 0x31, 0x7f, 0x88, 0x5d, 0x21, 0x56, 0x39, 0xad, 0xd7, 0x02, 0xa1,
	0x17, 0x2a, 0xea, 0xd2, 0x8d, 0x02, 0x91, 0x86, 0x6e, 0x16, 0x47, 0x3d, 0x52, 0x8b, 0xe1, 0x3e,
	0x85, 0x44, 0x0e, 0x72, 0x90, 0x81, 0xc4, 0x81, 0xeb, 0x79, 0x96, 0xd1, 0x34, 0xdb, 0x95, 0x0e,
	0x67, 0x3f, 0xf1, 0x31, 0xed, 0x78, 0xe3, 0x86, 0x29, 0x5c, 0xa9, 0xbe, 0xf3, 0x3f, 0xb7, 0xd3,
	0x9d, 0xe4, 0x1a, 0xbb, 0x9e, 0x47, 0x4f, 0xc9, 0xde, 0x96, 0x94, 0x18, 0x66, 0x38, 0x07, 0xab,
	0xd0, 0x34, 0xdb, 0x65, 0xa7, 0xb6, 0xae, 0x73, 0x54, 0x97, 0x8e, 0x49, 0x3d, 0x86, 0x44, 0x60,
	0x94, 0xc0, 0x3a, 0xa1, 0xf9, 0x3b, 0xc2, 0xea, 0xd2, 0xef, 0x0b, 0xe2, 0x19, 0xb1, 0xb7, 0xe5,
	0xe4, 0x8c, 0x45, 0xc5, 0x58, 0xdf, 0x50, 0x6a, 0xc8, 0xd6, 0x93, 0x41, 0xfe, 0x6d, 0x04, 0xd1,
	0x2e, 0x29, 0x69, 0x27, 0xcb, 0x68, 0x1a, 0xed, 0x4a, 0xe7, 0x60, 0x67, 0x52, 0x27, 0x17, 0xd2,
	0x0e, 0x29, 0x65, 0x5b, 0x8c, 0x3c, 0xab, 0xa0, 0x2c, 0x6c, 0xa6, 0xd7, 0xcc, 0x96, 0x6b, 0x66,
	0x3d, 0xc4, 0x30, 0xd7, 0xe8, 0xc9, 0xd6, 0x09, 0xa9, 0x7c, 0xb2, 0xa2, 0x7f, 0x89, 0x39, 0x85,
	0x47, 0x85, 0x50, 0x76, 0xb2, 0x2b, 0xad, 0x92, 0x3f, 0xf3, 0xac, 0xa5, 0x3c, 0xcb, 0x8e, 0x2e,
	0x7a, 0xfd, 0x97, 0xf7, 0xa2, 0xf1, 0xfc, 0xd6, 0x30, 0x6e, 0xcf, 0x77, 0xfb, 0xde, 0x62, 0xea,
	0x7f, 0xf3, 0xc5, 0x87, 0x25, 0x85, 0x77, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x0b, 0x0f,
	0xfe, 0x29, 0x03, 0x00, 0x00,
}

func (this *HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderManipulation)
	if !ok {
		that2, ok := that.(HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HeaderValueOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderValueOption)
	if !ok {
		that2, ok := that.(HeaderValueOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Append.Equal(that1.Append) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HeaderValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderValue)
	if !ok {
		that2, ok := that.(HeaderValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/graphql/v1alpha1/graphql.proto

package v1alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PathSegment) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PathSegment)
	if !ok {
		that2, ok := that.(PathSegment)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Segment.(type) {

	case *PathSegment_Key:
		if _, ok := target.Segment.(*PathSegment_Key); !ok {
			return false
		}

		if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
			return false
		}

	case *PathSegment_Index:
		if _, ok := target.Segment.(*PathSegment_Index); !ok {
			return false
		}

		if m.GetIndex() != target.GetIndex() {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.Segment != target.Segment {
			return false
		}
	}

	return true
}

// Equal function
func (m *ValueProvider) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValueProvider)
	if !ok {
		that2, ok := that.(ValueProvider)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Provider.(type) {

	case *ValueProvider_GraphqlArg:
		if _, ok := target.Provider.(*ValueProvider_GraphqlArg); !ok {
			return false
		}

		if h, ok := interface{}(m.GetGraphqlArg()).(equality.Equalizer); ok {
			if !h.Equal(target.GetGraphqlArg()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetGraphqlArg(), target.GetGraphqlArg()) {
				return false
			}
		}

	case *ValueProvider_TypedProvider:
		if _, ok := target.Provider.(*ValueProvider_TypedProvider); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTypedProvider()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedProvider()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedProvider(), target.GetTypedProvider()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Provider != target.Provider {
			return false
		}
	}

	return true
}

// Equal function
func (m *JsonKeyValue) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*JsonKeyValue)
	if !ok {
		that2, ok := that.(JsonKeyValue)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValue(), target.GetValue()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *JsonNode) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*JsonNode)
	if !ok {
		that2, ok := that.(JsonNode)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetKeyValues()) != len(target.GetKeyValues()) {
		return false
	}
	for idx, v := range m.GetKeyValues() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetKeyValues()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetKeyValues()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RequestTemplate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RequestTemplate)
	if !ok {
		that2, ok := that.(RequestTemplate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for k, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[k]) {
				return false
			}
		}

	}

	if len(m.GetQueryParams()) != len(target.GetQueryParams()) {
		return false
	}
	for k, v := range m.GetQueryParams() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetQueryParams()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetQueryParams()[k]) {
				return false
			}
		}

	}

	switch m.OutgoingBody.(type) {

	case *RequestTemplate_Json:
		if _, ok := target.OutgoingBody.(*RequestTemplate_Json); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJson()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJson()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJson(), target.GetJson()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.OutgoingBody != target.OutgoingBody {
			return false
		}
	}

	return true
}

// Equal function
func (m *ResponseTemplate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ResponseTemplate)
	if !ok {
		that2, ok := that.(ResponseTemplate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *RESTResolver) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RESTResolver)
	if !ok {
		that2, ok := that.(RESTResolver)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetServerUri()).(equality.Equalizer); ok {
		if !h.Equal(target.GetServerUri()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetServerUri(), target.GetServerUri()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestTransform()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestTransform()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestTransform(), target.GetRequestTransform()) {
			return false
		}
	}

	if strings.Compare(m.GetSpanName(), target.GetSpanName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RESTResolverCP) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RESTResolverCP)
	if !ok {
		that2, ok := that.(RESTResolverCP)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.DiscoveredSchema.(type) {

	case *RESTResolverCP_Openapi:
		if _, ok := target.DiscoveredSchema.(*RESTResolverCP_Openapi); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOpenapi()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOpenapi()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOpenapi(), target.GetOpenapi()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.DiscoveredSchema != target.DiscoveredSchema {
			return false
		}
	}

	return true
}

// Equal function
func (m *SubgraphResolver) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SubgraphResolver)
	if !ok {
		that2, ok := that.(SubgraphResolver)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ConstantResolver) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ConstantResolver)
	if !ok {
		that2, ok := that.(ConstantResolver)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *AbstractTypeResolver) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AbstractTypeResolver)
	if !ok {
		that2, ok := that.(AbstractTypeResolver)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *Query) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetQuery()).(equality.Equalizer); ok {
		if !h.Equal(target.GetQuery()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetQuery(), target.GetQuery()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *QueryMatcher) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*QueryMatcher)
	if !ok {
		that2, ok := that.(QueryMatcher)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Match.(type) {

	case *QueryMatcher_FieldMatcher_:
		if _, ok := target.Match.(*QueryMatcher_FieldMatcher_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetFieldMatcher()).(equality.Equalizer); ok {
			if !h.Equal(target.GetFieldMatcher()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetFieldMatcher(), target.GetFieldMatcher()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Match != target.Match {
			return false
		}
	}

	return true
}

// Equal function
func (m *Resolution) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Resolution)
	if !ok {
		that2, ok := that.(Resolution)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMatcher()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMatcher()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMatcher(), target.GetMatcher()) {
			return false
		}
	}

	switch m.Resolver.(type) {

	case *Resolution_DefaultResolver:
		if _, ok := target.Resolver.(*Resolution_DefaultResolver); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDefaultResolver()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDefaultResolver()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDefaultResolver(), target.GetDefaultResolver()) {
				return false
			}
		}

	case *Resolution_RestResolver:
		if _, ok := target.Resolver.(*Resolution_RestResolver); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRestResolver()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRestResolver()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRestResolver(), target.GetRestResolver()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Resolver != target.Resolver {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLConfig)
	if !ok {
		that2, ok := that.(GraphQLConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *GraphQLExtendedSchema) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLExtendedSchema)
	if !ok {
		that2, ok := that.(GraphQLExtendedSchema)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetSchema(), target.GetSchema()) != 0 {
		return false
	}

	if m.GetEnableIntrospection() != target.GetEnableIntrospection() {
		return false
	}

	if len(m.GetResolutions()) != len(target.GetResolutions()) {
		return false
	}
	for idx, v := range m.GetResolutions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolutions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResolutions()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ValueProvider_GraphQLArgExtraction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValueProvider_GraphQLArgExtraction)
	if !ok {
		that2, ok := that.(ValueProvider_GraphQLArgExtraction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetArgName(), target.GetArgName()) != 0 {
		return false
	}

	if len(m.GetPath()) != len(target.GetPath()) {
		return false
	}
	for idx, v := range m.GetPath() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPath()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPath()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ValueProvider_TypedValueProvider) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValueProvider_TypedValueProvider)
	if !ok {
		that2, ok := that.(ValueProvider_TypedValueProvider)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetType() != target.GetType() {
		return false
	}

	switch m.ValProvider.(type) {

	case *ValueProvider_TypedValueProvider_GraphqlParent:
		if _, ok := target.ValProvider.(*ValueProvider_TypedValueProvider_GraphqlParent); !ok {
			return false
		}

		if h, ok := interface{}(m.GetGraphqlParent()).(equality.Equalizer); ok {
			if !h.Equal(target.GetGraphqlParent()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetGraphqlParent(), target.GetGraphqlParent()) {
				return false
			}
		}

	case *ValueProvider_TypedValueProvider_Header:
		if _, ok := target.ValProvider.(*ValueProvider_TypedValueProvider_Header); !ok {
			return false
		}

		if strings.Compare(m.GetHeader(), target.GetHeader()) != 0 {
			return false
		}

	case *ValueProvider_TypedValueProvider_Value:
		if _, ok := target.ValProvider.(*ValueProvider_TypedValueProvider_Value); !ok {
			return false
		}

		if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.ValProvider != target.ValProvider {
			return false
		}
	}

	return true
}

// Equal function
func (m *ValueProvider_TypedValueProvider_GraphQLParentExtraction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValueProvider_TypedValueProvider_GraphQLParentExtraction)
	if !ok {
		that2, ok := that.(ValueProvider_TypedValueProvider_GraphQLParentExtraction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetPath()) != len(target.GetPath()) {
		return false
	}
	for idx, v := range m.GetPath() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPath()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPath()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *JsonKeyValue_JsonValue) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*JsonKeyValue_JsonValue)
	if !ok {
		that2, ok := that.(JsonKeyValue_JsonValue)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.JsonVal.(type) {

	case *JsonKeyValue_JsonValue_Node:
		if _, ok := target.JsonVal.(*JsonKeyValue_JsonValue_Node); !ok {
			return false
		}

		if h, ok := interface{}(m.GetNode()).(equality.Equalizer); ok {
			if !h.Equal(target.GetNode()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetNode(), target.GetNode()) {
				return false
			}
		}

	case *JsonKeyValue_JsonValue_ValueProvider:
		if _, ok := target.JsonVal.(*JsonKeyValue_JsonValue_ValueProvider); !ok {
			return false
		}

		if h, ok := interface{}(m.GetValueProvider()).(equality.Equalizer); ok {
			if !h.Equal(target.GetValueProvider()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetValueProvider(), target.GetValueProvider()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.JsonVal != target.JsonVal {
			return false
		}
	}

	return true
}

// Equal function
func (m *RESTResolverCP_OpenApi) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RESTResolverCP_OpenApi)
	if !ok {
		that2, ok := that.(RESTResolverCP_OpenApi)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for k, v := range m.GetHeaders() {

		if strings.Compare(v, target.GetHeaders()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetBaseUrl(), target.GetBaseUrl()) != 0 {
		return false
	}

	if len(m.GetQueryParams()) != len(target.GetQueryParams()) {
		return false
	}
	for k, v := range m.GetQueryParams() {

		if strings.Compare(v, target.GetQueryParams()[k]) != 0 {
			return false
		}

	}

	if len(m.GetSelections()) != len(target.GetSelections()) {
		return false
	}
	for idx, v := range m.GetSelections() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelections()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelections()[idx]) {
				return false
			}
		}

	}

	switch m.Source.(type) {

	case *RESTResolverCP_OpenApi_Inline:
		if _, ok := target.Source.(*RESTResolverCP_OpenApi_Inline); !ok {
			return false
		}

		if strings.Compare(m.GetInline(), target.GetInline()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.Source != target.Source {
			return false
		}
	}

	return true
}

// Equal function
func (m *RESTResolverCP_OpenApi_RemoteSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RESTResolverCP_OpenApi_RemoteSource)
	if !ok {
		that2, ok := that.(RESTResolverCP_OpenApi_RemoteSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetSchemaHeaders()) != len(target.GetSchemaHeaders()) {
		return false
	}
	for k, v := range m.GetSchemaHeaders() {

		if strings.Compare(v, target.GetSchemaHeaders()[k]) != 0 {
			return false
		}

	}

	switch m.RemoteSrc.(type) {

	case *RESTResolverCP_OpenApi_RemoteSource_RemoteFile:
		if _, ok := target.RemoteSrc.(*RESTResolverCP_OpenApi_RemoteSource_RemoteFile); !ok {
			return false
		}

		if strings.Compare(m.GetRemoteFile(), target.GetRemoteFile()) != 0 {
			return false
		}

	case *RESTResolverCP_OpenApi_RemoteSource_UrlEndpoint:
		if _, ok := target.RemoteSrc.(*RESTResolverCP_OpenApi_RemoteSource_UrlEndpoint); !ok {
			return false
		}

		if strings.Compare(m.GetUrlEndpoint(), target.GetUrlEndpoint()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.RemoteSrc != target.RemoteSrc {
			return false
		}
	}

	return true
}

// Equal function
func (m *RESTResolverCP_OpenApi_SelectQueryOrMutationField) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RESTResolverCP_OpenApi_SelectQueryOrMutationField)
	if !ok {
		that2, ok := that.(RESTResolverCP_OpenApi_SelectQueryOrMutationField)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetTitle(), target.GetTitle()) != 0 {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	if strings.Compare(m.GetMethod(), target.GetMethod()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *QueryMatcher_FieldMatcher) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*QueryMatcher_FieldMatcher)
	if !ok {
		that2, ok := that.(QueryMatcher_FieldMatcher)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if strings.Compare(m.GetField(), target.GetField()) != 0 {
		return false
	}

	return true
}

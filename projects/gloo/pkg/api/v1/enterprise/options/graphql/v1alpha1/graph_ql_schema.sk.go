// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/statusutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewGraphQLSchema(namespace, name string) *GraphQLSchema {
	graphqlschema := &GraphQLSchema{}
	graphqlschema.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return graphqlschema
}

func (r *GraphQLSchema) SetMetadata(meta *core.Metadata) {
	r.Metadata = meta
}

// Deprecated
func (r *GraphQLSchema) SetStatus(status *core.Status) {
	statusutils.SetSingleStatusInNamespacedStatuses(r, status)
}

// Deprecated
func (r *GraphQLSchema) GetStatus() *core.Status {
	if r != nil {
		return statusutils.GetSingleStatusInNamespacedStatuses(r)
	}
	return nil
}

func (r *GraphQLSchema) SetNamespacedStatuses(namespacedStatuses *core.NamespacedStatuses) {
	r.NamespacedStatuses = namespacedStatuses
}

func (r *GraphQLSchema) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *GraphQLSchema) GroupVersionKind() schema.GroupVersionKind {
	return GraphQLSchemaGVK
}

type GraphQLSchemaList []*GraphQLSchema

func (list GraphQLSchemaList) Find(namespace, name string) (*GraphQLSchema, error) {
	for _, graphQLSchema := range list {
		if graphQLSchema.GetMetadata().Name == name && graphQLSchema.GetMetadata().Namespace == namespace {
			return graphQLSchema, nil
		}
	}
	return nil, errors.Errorf("list did not find graphQLSchema %v.%v", namespace, name)
}

func (list GraphQLSchemaList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, graphQLSchema := range list {
		ress = append(ress, graphQLSchema)
	}
	return ress
}

func (list GraphQLSchemaList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, graphQLSchema := range list {
		ress = append(ress, graphQLSchema)
	}
	return ress
}

func (list GraphQLSchemaList) Names() []string {
	var names []string
	for _, graphQLSchema := range list {
		names = append(names, graphQLSchema.GetMetadata().Name)
	}
	return names
}

func (list GraphQLSchemaList) NamespacesDotNames() []string {
	var names []string
	for _, graphQLSchema := range list {
		names = append(names, graphQLSchema.GetMetadata().Namespace+"."+graphQLSchema.GetMetadata().Name)
	}
	return names
}

func (list GraphQLSchemaList) Sort() GraphQLSchemaList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list GraphQLSchemaList) Clone() GraphQLSchemaList {
	var graphQLSchemaList GraphQLSchemaList
	for _, graphQLSchema := range list {
		graphQLSchemaList = append(graphQLSchemaList, resources.Clone(graphQLSchema).(*GraphQLSchema))
	}
	return graphQLSchemaList
}

func (list GraphQLSchemaList) Each(f func(element *GraphQLSchema)) {
	for _, graphQLSchema := range list {
		f(graphQLSchema)
	}
}

func (list GraphQLSchemaList) EachResource(f func(element resources.Resource)) {
	for _, graphQLSchema := range list {
		f(graphQLSchema)
	}
}

func (list GraphQLSchemaList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *GraphQLSchema) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for GraphQLSchema

func (o *GraphQLSchema) GetObjectKind() schema.ObjectKind {
	t := GraphQLSchemaCrd.TypeMeta()
	return &t
}

func (o *GraphQLSchema) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*GraphQLSchema)
}

func (o *GraphQLSchema) DeepCopyInto(out *GraphQLSchema) {
	clone := resources.Clone(o).(*GraphQLSchema)
	*out = *clone
}

var (
	GraphQLSchemaCrd = crd.NewCrd(
		"graphqlschemas",
		GraphQLSchemaGVK.Group,
		GraphQLSchemaGVK.Version,
		GraphQLSchemaGVK.Kind,
		"gqls",
		false,
		&GraphQLSchema{})
)

var (
	GraphQLSchemaGVK = schema.GroupVersionKind{
		Version: "v1alpha1",
		Group:   "graphql.gloo.solo.io",
		Kind:    "GraphQLSchema",
	}
)

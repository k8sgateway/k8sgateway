// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/statusutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewGraphQLExtendedSchema(namespace, name string) *GraphQLExtendedSchema {
	graphqlextendedschema := &GraphQLExtendedSchema{}
	graphqlextendedschema.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return graphqlextendedschema
}

func (r *GraphQLExtendedSchema) SetMetadata(meta *core.Metadata) {
	r.Metadata = meta
}

// Deprecated
func (r *GraphQLExtendedSchema) SetStatus(status *core.Status) {
	statusutils.SetSingleStatusInNamespacedStatuses(r, status)
}

// Deprecated
func (r *GraphQLExtendedSchema) GetStatus() *core.Status {
	if r != nil {
		return statusutils.GetSingleStatusInNamespacedStatuses(r)
	}
	return nil
}

func (r *GraphQLExtendedSchema) SetNamespacedStatuses(namespacedStatuses *core.NamespacedStatuses) {
	r.NamespacedStatuses = namespacedStatuses
}

func (r *GraphQLExtendedSchema) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *GraphQLExtendedSchema) GroupVersionKind() schema.GroupVersionKind {
	return GraphQLExtendedSchemaGVK
}

type GraphQLExtendedSchemaList []*GraphQLExtendedSchema

func (list GraphQLExtendedSchemaList) Find(namespace, name string) (*GraphQLExtendedSchema, error) {
	for _, graphQLExtendedSchema := range list {
		if graphQLExtendedSchema.GetMetadata().Name == name && graphQLExtendedSchema.GetMetadata().Namespace == namespace {
			return graphQLExtendedSchema, nil
		}
	}
	return nil, errors.Errorf("list did not find graphQLExtendedSchema %v.%v", namespace, name)
}

func (list GraphQLExtendedSchemaList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, graphQLExtendedSchema := range list {
		ress = append(ress, graphQLExtendedSchema)
	}
	return ress
}

func (list GraphQLExtendedSchemaList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, graphQLExtendedSchema := range list {
		ress = append(ress, graphQLExtendedSchema)
	}
	return ress
}

func (list GraphQLExtendedSchemaList) Names() []string {
	var names []string
	for _, graphQLExtendedSchema := range list {
		names = append(names, graphQLExtendedSchema.GetMetadata().Name)
	}
	return names
}

func (list GraphQLExtendedSchemaList) NamespacesDotNames() []string {
	var names []string
	for _, graphQLExtendedSchema := range list {
		names = append(names, graphQLExtendedSchema.GetMetadata().Namespace+"."+graphQLExtendedSchema.GetMetadata().Name)
	}
	return names
}

func (list GraphQLExtendedSchemaList) Sort() GraphQLExtendedSchemaList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list GraphQLExtendedSchemaList) Clone() GraphQLExtendedSchemaList {
	var graphQLExtendedSchemaList GraphQLExtendedSchemaList
	for _, graphQLExtendedSchema := range list {
		graphQLExtendedSchemaList = append(graphQLExtendedSchemaList, resources.Clone(graphQLExtendedSchema).(*GraphQLExtendedSchema))
	}
	return graphQLExtendedSchemaList
}

func (list GraphQLExtendedSchemaList) Each(f func(element *GraphQLExtendedSchema)) {
	for _, graphQLExtendedSchema := range list {
		f(graphQLExtendedSchema)
	}
}

func (list GraphQLExtendedSchemaList) EachResource(f func(element resources.Resource)) {
	for _, graphQLExtendedSchema := range list {
		f(graphQLExtendedSchema)
	}
}

func (list GraphQLExtendedSchemaList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *GraphQLExtendedSchema) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for GraphQLExtendedSchema

func (o *GraphQLExtendedSchema) GetObjectKind() schema.ObjectKind {
	t := GraphQLExtendedSchemaCrd.TypeMeta()
	return &t
}

func (o *GraphQLExtendedSchema) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*GraphQLExtendedSchema)
}

func (o *GraphQLExtendedSchema) DeepCopyInto(out *GraphQLExtendedSchema) {
	clone := resources.Clone(o).(*GraphQLExtendedSchema)
	*out = *clone
}

var (
	GraphQLExtendedSchemaCrd = crd.NewCrd(
		"graphqlschemas",
		GraphQLExtendedSchemaGVK.Group,
		GraphQLExtendedSchemaGVK.Version,
		GraphQLExtendedSchemaGVK.Kind,
		"gqlschema",
		false,
		&GraphQLExtendedSchema{})
)

var (
	GraphQLExtendedSchemaGVK = schema.GroupVersionKind{
		Version: "v1alpha1",
		Group:   "graphql.gloo.solo.io",
		Kind:    "GraphQLExtendedSchema",
	}
)

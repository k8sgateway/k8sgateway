// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto

package ratelimit

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/ratelimit.solo.io/v1alpha1"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Basic rate-limiting API
type IngressRateLimit struct {
	AuthorizedLimits     *v1alpha1.RateLimit `protobuf:"bytes,1,opt,name=authorized_limits,json=authorizedLimits,proto3" json:"authorized_limits,omitempty"`
	AnonymousLimits      *v1alpha1.RateLimit `protobuf:"bytes,2,opt,name=anonymous_limits,json=anonymousLimits,proto3" json:"anonymous_limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *IngressRateLimit) Reset()         { *m = IngressRateLimit{} }
func (m *IngressRateLimit) String() string { return proto.CompactTextString(m) }
func (*IngressRateLimit) ProtoMessage()    {}
func (*IngressRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{0}
}
func (m *IngressRateLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressRateLimit.Unmarshal(m, b)
}
func (m *IngressRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressRateLimit.Marshal(b, m, deterministic)
}
func (m *IngressRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressRateLimit.Merge(m, src)
}
func (m *IngressRateLimit) XXX_Size() int {
	return xxx_messageInfo_IngressRateLimit.Size(m)
}
func (m *IngressRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_IngressRateLimit proto.InternalMessageInfo

func (m *IngressRateLimit) GetAuthorizedLimits() *v1alpha1.RateLimit {
	if m != nil {
		return m.AuthorizedLimits
	}
	return nil
}

func (m *IngressRateLimit) GetAnonymousLimits() *v1alpha1.RateLimit {
	if m != nil {
		return m.AnonymousLimits
	}
	return nil
}

type Settings struct {
	RatelimitServerRef *core.ResourceRef `protobuf:"bytes,1,opt,name=ratelimit_server_ref,json=ratelimitServerRef,proto3" json:"ratelimit_server_ref,omitempty"`
	RequestTimeout     *time.Duration    `protobuf:"bytes,2,opt,name=request_timeout,json=requestTimeout,proto3,stdduration" json:"request_timeout,omitempty"`
	DenyOnFail         bool              `protobuf:"varint,3,opt,name=deny_on_fail,json=denyOnFail,proto3" json:"deny_on_fail,omitempty"`
	// Set this is set to true if you would like to rate limit traffic before applying external auth to it.
	// *Note*: When this is true, you will lose some features like being able to rate limit a request based on its auth state
	RateLimitBeforeAuth  bool     `protobuf:"varint,9,opt,name=rate_limit_before_auth,json=rateLimitBeforeAuth,proto3" json:"rate_limit_before_auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{1}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings.Unmarshal(m, b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return xxx_messageInfo_Settings.Size(m)
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetRatelimitServerRef() *core.ResourceRef {
	if m != nil {
		return m.RatelimitServerRef
	}
	return nil
}

func (m *Settings) GetRequestTimeout() *time.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *Settings) GetDenyOnFail() bool {
	if m != nil {
		return m.DenyOnFail
	}
	return false
}

func (m *Settings) GetRateLimitBeforeAuth() bool {
	if m != nil {
		return m.RateLimitBeforeAuth
	}
	return false
}

// API based on Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
// Sample configuration below:
//
// descriptors:
//- key: account_id
//  descriptors:
//  - key: plan
//    value: BASIC
//    rateLimit:
//      requestsPerUnit: 1
//      unit: MINUTE
//  - key: plan
//    value: PLUS
//    rateLimit:
//      requestsPerUnit: 20
//      unit: MINUTE
type ServiceSettings struct {
	Descriptors          []*v1alpha1.Descriptor `protobuf:"bytes,1,rep,name=descriptors,proto3" json:"descriptors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ServiceSettings) Reset()         { *m = ServiceSettings{} }
func (m *ServiceSettings) String() string { return proto.CompactTextString(m) }
func (*ServiceSettings) ProtoMessage()    {}
func (*ServiceSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{2}
}
func (m *ServiceSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSettings.Unmarshal(m, b)
}
func (m *ServiceSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSettings.Marshal(b, m, deterministic)
}
func (m *ServiceSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSettings.Merge(m, src)
}
func (m *ServiceSettings) XXX_Size() int {
	return xxx_messageInfo_ServiceSettings.Size(m)
}
func (m *ServiceSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSettings proto.InternalMessageInfo

func (m *ServiceSettings) GetDescriptors() []*v1alpha1.Descriptor {
	if m != nil {
		return m.Descriptors
	}
	return nil
}

// A list of references to `RateLimitConfig` resources.
// Each resource represents a rate limit policy that will be independently enforced.
type RateLimitConfigRefs struct {
	Refs                 []*RateLimitConfigRef `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RateLimitConfigRefs) Reset()         { *m = RateLimitConfigRefs{} }
func (m *RateLimitConfigRefs) String() string { return proto.CompactTextString(m) }
func (*RateLimitConfigRefs) ProtoMessage()    {}
func (*RateLimitConfigRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{3}
}
func (m *RateLimitConfigRefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitConfigRefs.Unmarshal(m, b)
}
func (m *RateLimitConfigRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitConfigRefs.Marshal(b, m, deterministic)
}
func (m *RateLimitConfigRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitConfigRefs.Merge(m, src)
}
func (m *RateLimitConfigRefs) XXX_Size() int {
	return xxx_messageInfo_RateLimitConfigRefs.Size(m)
}
func (m *RateLimitConfigRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitConfigRefs.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitConfigRefs proto.InternalMessageInfo

func (m *RateLimitConfigRefs) GetRefs() []*RateLimitConfigRef {
	if m != nil {
		return m.Refs
	}
	return nil
}

// A reference to a `RateLimitConfig` resource.
type RateLimitConfigRef struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RateLimitConfigRef) Reset()         { *m = RateLimitConfigRef{} }
func (m *RateLimitConfigRef) String() string { return proto.CompactTextString(m) }
func (*RateLimitConfigRef) ProtoMessage()    {}
func (*RateLimitConfigRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{4}
}
func (m *RateLimitConfigRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitConfigRef.Unmarshal(m, b)
}
func (m *RateLimitConfigRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitConfigRef.Marshal(b, m, deterministic)
}
func (m *RateLimitConfigRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitConfigRef.Merge(m, src)
}
func (m *RateLimitConfigRef) XXX_Size() int {
	return xxx_messageInfo_RateLimitConfigRef.Size(m)
}
func (m *RateLimitConfigRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitConfigRef.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitConfigRef proto.InternalMessageInfo

func (m *RateLimitConfigRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RateLimitConfigRef) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type RateLimitVhostExtension struct {
	// Deprecated: this is the old format for inline configuration, use `InlineConfig` instead.
	RateLimits []*v1alpha1.RateLimitActions `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to ConfigType:
	//	*RateLimitVhostExtension_ConfigRefs
	//	*RateLimitVhostExtension_InlineConfig_
	ConfigType           isRateLimitVhostExtension_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *RateLimitVhostExtension) Reset()         { *m = RateLimitVhostExtension{} }
func (m *RateLimitVhostExtension) String() string { return proto.CompactTextString(m) }
func (*RateLimitVhostExtension) ProtoMessage()    {}
func (*RateLimitVhostExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{5}
}
func (m *RateLimitVhostExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitVhostExtension.Unmarshal(m, b)
}
func (m *RateLimitVhostExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitVhostExtension.Marshal(b, m, deterministic)
}
func (m *RateLimitVhostExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitVhostExtension.Merge(m, src)
}
func (m *RateLimitVhostExtension) XXX_Size() int {
	return xxx_messageInfo_RateLimitVhostExtension.Size(m)
}
func (m *RateLimitVhostExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitVhostExtension.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitVhostExtension proto.InternalMessageInfo

type isRateLimitVhostExtension_ConfigType interface {
	isRateLimitVhostExtension_ConfigType()
	Equal(interface{}) bool
}

type RateLimitVhostExtension_ConfigRefs struct {
	ConfigRefs *RateLimitConfigRefs `protobuf:"bytes,2,opt,name=config_refs,json=configRefs,proto3,oneof" json:"config_refs,omitempty"`
}
type RateLimitVhostExtension_InlineConfig_ struct {
	InlineConfig *RateLimitVhostExtension_InlineConfig `protobuf:"bytes,3,opt,name=inline_config,json=inlineConfig,proto3,oneof" json:"inline_config,omitempty"`
}

func (*RateLimitVhostExtension_ConfigRefs) isRateLimitVhostExtension_ConfigType()    {}
func (*RateLimitVhostExtension_InlineConfig_) isRateLimitVhostExtension_ConfigType() {}

func (m *RateLimitVhostExtension) GetConfigType() isRateLimitVhostExtension_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

// Deprecated: Do not use.
func (m *RateLimitVhostExtension) GetRateLimits() []*v1alpha1.RateLimitActions {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func (m *RateLimitVhostExtension) GetConfigRefs() *RateLimitConfigRefs {
	if x, ok := m.GetConfigType().(*RateLimitVhostExtension_ConfigRefs); ok {
		return x.ConfigRefs
	}
	return nil
}

func (m *RateLimitVhostExtension) GetInlineConfig() *RateLimitVhostExtension_InlineConfig {
	if x, ok := m.GetConfigType().(*RateLimitVhostExtension_InlineConfig_); ok {
		return x.InlineConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RateLimitVhostExtension) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RateLimitVhostExtension_ConfigRefs)(nil),
		(*RateLimitVhostExtension_InlineConfig_)(nil),
	}
}

type RateLimitVhostExtension_InlineConfig struct {
	// Define individual rate limits here. Each rate limit will be evaluated, if any rate limit
	// would be throttled, the entire request returns a 429 (gets throttled).
	RateLimits           []*v1alpha1.RateLimitActions `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *RateLimitVhostExtension_InlineConfig) Reset()         { *m = RateLimitVhostExtension_InlineConfig{} }
func (m *RateLimitVhostExtension_InlineConfig) String() string { return proto.CompactTextString(m) }
func (*RateLimitVhostExtension_InlineConfig) ProtoMessage()    {}
func (*RateLimitVhostExtension_InlineConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{5, 0}
}
func (m *RateLimitVhostExtension_InlineConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitVhostExtension_InlineConfig.Unmarshal(m, b)
}
func (m *RateLimitVhostExtension_InlineConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitVhostExtension_InlineConfig.Marshal(b, m, deterministic)
}
func (m *RateLimitVhostExtension_InlineConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitVhostExtension_InlineConfig.Merge(m, src)
}
func (m *RateLimitVhostExtension_InlineConfig) XXX_Size() int {
	return xxx_messageInfo_RateLimitVhostExtension_InlineConfig.Size(m)
}
func (m *RateLimitVhostExtension_InlineConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitVhostExtension_InlineConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitVhostExtension_InlineConfig proto.InternalMessageInfo

func (m *RateLimitVhostExtension_InlineConfig) GetRateLimits() []*v1alpha1.RateLimitActions {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

type RateLimitRouteExtension struct {
	// Deprecated: this is the old format for inline configuration, use `InlineConfig` instead.
	IncludeVhRateLimits bool `protobuf:"varint,1,opt,name=include_vh_rate_limits,json=includeVhRateLimits,proto3" json:"include_vh_rate_limits,omitempty"` // Deprecated: Do not use.
	// Deprecated: this is the old format for inline configuration, use `InlineConfig` instead.
	RateLimits []*v1alpha1.RateLimitActions `protobuf:"bytes,2,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to ConfigType:
	//	*RateLimitRouteExtension_ConfigRefs
	//	*RateLimitRouteExtension_InlineConfig_
	ConfigType           isRateLimitRouteExtension_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *RateLimitRouteExtension) Reset()         { *m = RateLimitRouteExtension{} }
func (m *RateLimitRouteExtension) String() string { return proto.CompactTextString(m) }
func (*RateLimitRouteExtension) ProtoMessage()    {}
func (*RateLimitRouteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{6}
}
func (m *RateLimitRouteExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitRouteExtension.Unmarshal(m, b)
}
func (m *RateLimitRouteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitRouteExtension.Marshal(b, m, deterministic)
}
func (m *RateLimitRouteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitRouteExtension.Merge(m, src)
}
func (m *RateLimitRouteExtension) XXX_Size() int {
	return xxx_messageInfo_RateLimitRouteExtension.Size(m)
}
func (m *RateLimitRouteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitRouteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitRouteExtension proto.InternalMessageInfo

type isRateLimitRouteExtension_ConfigType interface {
	isRateLimitRouteExtension_ConfigType()
	Equal(interface{}) bool
}

type RateLimitRouteExtension_ConfigRefs struct {
	ConfigRefs *RateLimitConfigRefs `protobuf:"bytes,3,opt,name=config_refs,json=configRefs,proto3,oneof" json:"config_refs,omitempty"`
}
type RateLimitRouteExtension_InlineConfig_ struct {
	InlineConfig *RateLimitRouteExtension_InlineConfig `protobuf:"bytes,4,opt,name=inline_config,json=inlineConfig,proto3,oneof" json:"inline_config,omitempty"`
}

func (*RateLimitRouteExtension_ConfigRefs) isRateLimitRouteExtension_ConfigType()    {}
func (*RateLimitRouteExtension_InlineConfig_) isRateLimitRouteExtension_ConfigType() {}

func (m *RateLimitRouteExtension) GetConfigType() isRateLimitRouteExtension_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

// Deprecated: Do not use.
func (m *RateLimitRouteExtension) GetIncludeVhRateLimits() bool {
	if m != nil {
		return m.IncludeVhRateLimits
	}
	return false
}

// Deprecated: Do not use.
func (m *RateLimitRouteExtension) GetRateLimits() []*v1alpha1.RateLimitActions {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func (m *RateLimitRouteExtension) GetConfigRefs() *RateLimitConfigRefs {
	if x, ok := m.GetConfigType().(*RateLimitRouteExtension_ConfigRefs); ok {
		return x.ConfigRefs
	}
	return nil
}

func (m *RateLimitRouteExtension) GetInlineConfig() *RateLimitRouteExtension_InlineConfig {
	if x, ok := m.GetConfigType().(*RateLimitRouteExtension_InlineConfig_); ok {
		return x.InlineConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RateLimitRouteExtension) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RateLimitRouteExtension_ConfigRefs)(nil),
		(*RateLimitRouteExtension_InlineConfig_)(nil),
	}
}

type RateLimitRouteExtension_InlineConfig struct {
	// Whether or not to include rate limits as defined on the VirtualHost in addition to rate limits on the Route.
	IncludeVhRateLimits bool `protobuf:"varint,1,opt,name=include_vh_rate_limits,json=includeVhRateLimits,proto3" json:"include_vh_rate_limits,omitempty"`
	// Define individual rate limits here. Each rate limit will be evaluated, if any rate limit
	// would be throttled, the entire request returns a 429 (gets throttled)
	RateLimits           []*v1alpha1.RateLimitActions `protobuf:"bytes,2,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *RateLimitRouteExtension_InlineConfig) Reset()         { *m = RateLimitRouteExtension_InlineConfig{} }
func (m *RateLimitRouteExtension_InlineConfig) String() string { return proto.CompactTextString(m) }
func (*RateLimitRouteExtension_InlineConfig) ProtoMessage()    {}
func (*RateLimitRouteExtension_InlineConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05a2dad65f2418a, []int{6, 0}
}
func (m *RateLimitRouteExtension_InlineConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitRouteExtension_InlineConfig.Unmarshal(m, b)
}
func (m *RateLimitRouteExtension_InlineConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitRouteExtension_InlineConfig.Marshal(b, m, deterministic)
}
func (m *RateLimitRouteExtension_InlineConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitRouteExtension_InlineConfig.Merge(m, src)
}
func (m *RateLimitRouteExtension_InlineConfig) XXX_Size() int {
	return xxx_messageInfo_RateLimitRouteExtension_InlineConfig.Size(m)
}
func (m *RateLimitRouteExtension_InlineConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitRouteExtension_InlineConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitRouteExtension_InlineConfig proto.InternalMessageInfo

func (m *RateLimitRouteExtension_InlineConfig) GetIncludeVhRateLimits() bool {
	if m != nil {
		return m.IncludeVhRateLimits
	}
	return false
}

func (m *RateLimitRouteExtension_InlineConfig) GetRateLimits() []*v1alpha1.RateLimitActions {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func init() {
	proto.RegisterType((*IngressRateLimit)(nil), "ratelimit.options.gloo.solo.io.IngressRateLimit")
	proto.RegisterType((*Settings)(nil), "ratelimit.options.gloo.solo.io.Settings")
	proto.RegisterType((*ServiceSettings)(nil), "ratelimit.options.gloo.solo.io.ServiceSettings")
	proto.RegisterType((*RateLimitConfigRefs)(nil), "ratelimit.options.gloo.solo.io.RateLimitConfigRefs")
	proto.RegisterType((*RateLimitConfigRef)(nil), "ratelimit.options.gloo.solo.io.RateLimitConfigRef")
	proto.RegisterType((*RateLimitVhostExtension)(nil), "ratelimit.options.gloo.solo.io.RateLimitVhostExtension")
	proto.RegisterType((*RateLimitVhostExtension_InlineConfig)(nil), "ratelimit.options.gloo.solo.io.RateLimitVhostExtension.InlineConfig")
	proto.RegisterType((*RateLimitRouteExtension)(nil), "ratelimit.options.gloo.solo.io.RateLimitRouteExtension")
	proto.RegisterType((*RateLimitRouteExtension_InlineConfig)(nil), "ratelimit.options.gloo.solo.io.RateLimitRouteExtension.InlineConfig")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto", fileDescriptor_e05a2dad65f2418a)
}

var fileDescriptor_e05a2dad65f2418a = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xc7, 0x31, 0x89, 0x56, 0x64, 0x02, 0x0b, 0x3b, 0x20, 0x36, 0xa0, 0x15, 0x9b, 0xcd, 0x65,
	0x73, 0xc1, 0x16, 0xc9, 0x61, 0xcf, 0x04, 0x16, 0x05, 0x2d, 0x68, 0xa5, 0xa1, 0x4a, 0x5f, 0xa4,
	0xca, 0x9a, 0x38, 0x8f, 0x9d, 0x29, 0xce, 0x8c, 0x3b, 0x33, 0x4e, 0xa1, 0xe7, 0x5e, 0x7b, 0xac,
	0xd4, 0x8f, 0xd0, 0x53, 0xcf, 0xfd, 0x36, 0x95, 0xfa, 0x1d, 0x2a, 0xf5, 0x58, 0x79, 0xec, 0xd8,
	0x01, 0x4a, 0x1a, 0x44, 0x7b, 0x62, 0xe6, 0x79, 0xf9, 0xcf, 0x33, 0xbf, 0xff, 0x10, 0xa3, 0xc7,
	0x01, 0xd3, 0xc3, 0xb8, 0x6f, 0x7b, 0x62, 0xe4, 0x28, 0x11, 0x8a, 0x5d, 0x26, 0x9c, 0x20, 0x14,
	0xc2, 0x89, 0xa4, 0x78, 0x06, 0x9e, 0x56, 0xe9, 0x8e, 0x46, 0xcc, 0x19, 0xef, 0x39, 0xc0, 0x35,
	0xc8, 0x48, 0x32, 0x05, 0x8e, 0x88, 0x34, 0x13, 0x5c, 0x39, 0x92, 0x6a, 0x08, 0xd9, 0x88, 0xe9,
	0x62, 0x65, 0x47, 0x52, 0x68, 0x81, 0x77, 0x8a, 0x40, 0x56, 0x6c, 0x27, 0x5a, 0x76, 0x72, 0x8c,
	0xcd, 0xc4, 0x76, 0xdb, 0x9c, 0x47, 0x23, 0xa6, 0x8c, 0x7c, 0x52, 0xbd, 0x6b, 0xca, 0x41, 0x3a,
	0xe3, 0x3d, 0x1a, 0x46, 0x43, 0xba, 0x77, 0x5d, 0x74, 0x7b, 0xcb, 0x34, 0x9d, 0x33, 0x3d, 0x19,
	0x49, 0x82, 0x9f, 0xa5, 0x76, 0x02, 0x21, 0x82, 0x10, 0x1c, 0xb3, 0xeb, 0xc7, 0xbe, 0xf3, 0x42,
	0xd2, 0x28, 0x02, 0xa9, 0x6e, 0xcb, 0x0f, 0x62, 0x49, 0x93, 0xb9, 0xb2, 0xfc, 0x46, 0x20, 0x02,
	0x61, 0x96, 0x4e, 0xb2, 0xca, 0xa2, 0x18, 0x2e, 0x74, 0x1a, 0x84, 0x8b, 0x6c, 0x88, 0xc6, 0x7b,
	0x0b, 0xad, 0x1d, 0xf3, 0x40, 0x82, 0x52, 0x84, 0x6a, 0x38, 0x49, 0xe6, 0xc3, 0xa7, 0xe8, 0x37,
	0x1a, 0xeb, 0xa1, 0x90, 0xec, 0x25, 0x0c, 0x5c, 0x33, 0xb3, 0xaa, 0x59, 0x75, 0xab, 0x59, 0x6d,
	0xd5, 0xed, 0xe2, 0x1a, 0x34, 0x62, 0x13, 0x02, 0x76, 0xde, 0x4c, 0xd6, 0x8a, 0x56, 0x13, 0x50,
	0xf8, 0x3f, 0xb4, 0x46, 0xb9, 0xe0, 0x97, 0x23, 0x11, 0xab, 0x89, 0xda, 0xe2, 0x9c, 0x6a, 0xab,
	0x79, 0x67, 0x2a, 0xd6, 0xf8, 0x62, 0xa1, 0xa5, 0x33, 0xd0, 0x9a, 0xf1, 0x20, 0x51, 0xde, 0xc8,
	0x05, 0x5c, 0x05, 0x72, 0x0c, 0xd2, 0x95, 0xe0, 0x67, 0xb3, 0x6e, 0xd9, 0x9e, 0x90, 0x50, 0x88,
	0x82, 0x12, 0xb1, 0xf4, 0x80, 0x80, 0x4f, 0x70, 0xde, 0x76, 0x66, 0xba, 0x08, 0xf8, 0xb8, 0x8b,
	0x56, 0x25, 0x3c, 0x8f, 0x41, 0x69, 0x57, 0xb3, 0x11, 0x88, 0x58, 0x67, 0x53, 0x6e, 0xd9, 0x29,
	0x6e, 0x7b, 0x82, 0xdb, 0x3e, 0xcc, 0x70, 0x77, 0xca, 0x6f, 0x3f, 0xfe, 0x69, 0x91, 0x5f, 0xb3,
	0xbe, 0x07, 0x69, 0x1b, 0xae, 0xa3, 0xe5, 0x01, 0xf0, 0x4b, 0x57, 0x70, 0xd7, 0xa7, 0x2c, 0xac,
	0x95, 0xea, 0x56, 0x73, 0x89, 0xa0, 0x24, 0xf6, 0x3f, 0x3f, 0xa2, 0x2c, 0xc4, 0x6d, 0xb4, 0x99,
	0x4c, 0x90, 0xd2, 0x70, 0xfb, 0xe0, 0x0b, 0x09, 0x6e, 0x02, 0xae, 0x56, 0x31, 0xb5, 0xeb, 0x72,
	0x42, 0xa0, 0x63, 0x72, 0xfb, 0xb1, 0x1e, 0x36, 0x7a, 0x68, 0x35, 0x99, 0x96, 0x79, 0x90, 0x03,
	0x38, 0x40, 0xd5, 0x01, 0x28, 0x4f, 0xb2, 0x48, 0x0b, 0x99, 0x78, 0x54, 0x6a, 0x56, 0x5b, 0x7f,
	0xdd, 0x42, 0xf5, 0x30, 0xaf, 0x24, 0xd3, 0x5d, 0x8d, 0xa7, 0x68, 0x3d, 0x07, 0x7e, 0x20, 0xb8,
	0xcf, 0x02, 0x02, 0xbe, 0xc2, 0x47, 0xa8, 0x2c, 0xc1, 0x9f, 0x88, 0xb6, 0xec, 0xd9, 0xff, 0x03,
	0xf6, 0x4d, 0x09, 0x62, 0xfa, 0x1b, 0x47, 0x08, 0xdf, 0xcc, 0x61, 0x8c, 0xca, 0x9c, 0x8e, 0xc0,
	0x58, 0x55, 0x21, 0x66, 0x8d, 0xff, 0x40, 0x95, 0xe4, 0xaf, 0x8a, 0xa8, 0x07, 0x86, 0x7d, 0x85,
	0x14, 0x81, 0xc6, 0x9b, 0x12, 0xfa, 0x3d, 0x17, 0xea, 0x0d, 0x85, 0xd2, 0xff, 0x5e, 0x68, 0xe0,
	0x8a, 0x09, 0x8e, 0x4f, 0x50, 0xb5, 0xe0, 0x39, 0x19, 0xf9, 0xef, 0xef, 0xbd, 0xae, 0x7d, 0xcf,
	0xdc, 0xa3, 0xb3, 0x58, 0xb3, 0x08, 0xca, 0x89, 0x2b, 0xdc, 0x43, 0x55, 0xcf, 0x0c, 0xea, 0x1a,
	0x00, 0xe9, 0x2b, 0x68, 0xdf, 0x1d, 0x80, 0xea, 0x2e, 0x10, 0xe4, 0x15, 0x44, 0xcf, 0xd1, 0x0a,
	0xe3, 0x21, 0xe3, 0xe0, 0xa6, 0x41, 0xf3, 0x30, 0xaa, 0xad, 0xc3, 0xb9, 0x95, 0xaf, 0xde, 0xda,
	0x3e, 0x36, 0x62, 0xe9, 0x71, 0xdd, 0x05, 0xb2, 0xcc, 0xa6, 0xf6, 0xdb, 0x8f, 0xd0, 0xf2, 0x74,
	0x1e, 0x77, 0xef, 0x83, 0x68, 0x1a, 0x4f, 0x67, 0x25, 0xc7, 0xa3, 0x2f, 0x23, 0x68, 0xbc, 0x2a,
	0x4f, 0xf9, 0x42, 0x44, 0xac, 0xa1, 0xf0, 0xe5, 0x1f, 0xb4, 0xc9, 0xb8, 0x17, 0xc6, 0x03, 0x70,
	0xc7, 0x43, 0xf7, 0xea, 0xf9, 0x56, 0x73, 0xc9, 0x90, 0x5f, 0xcf, 0x2a, 0x7a, 0x43, 0x52, 0x58,
	0x70, 0xcd, 0xd0, 0xc5, 0x1f, 0x6a, 0x68, 0xe9, 0xa7, 0x19, 0x5a, 0xbe, 0xa3, 0xa1, 0x57, 0x71,
	0xcd, 0x36, 0xf4, 0xb5, 0x75, 0xcd, 0xd1, 0xf6, 0x6c, 0xb8, 0xdf, 0x06, 0xdb, 0xbd, 0x0f, 0xd8,
	0x19, 0xcf, 0xa0, 0xf3, 0xf0, 0xc3, 0xe7, 0xb2, 0xf5, 0xee, 0xd3, 0x8e, 0xf5, 0xe4, 0x74, 0xbe,
	0x0f, 0x71, 0x74, 0x1e, 0xcc, 0xf3, 0x31, 0xee, 0xff, 0x62, 0x7e, 0x76, 0xdb, 0x5f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x17, 0x5a, 0xc8, 0xfd, 0xe0, 0x07, 0x00, 0x00,
}

func (this *IngressRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IngressRateLimit)
	if !ok {
		that2, ok := that.(IngressRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthorizedLimits.Equal(that1.AuthorizedLimits) {
		return false
	}
	if !this.AnonymousLimits.Equal(that1.AnonymousLimits) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RatelimitServerRef.Equal(that1.RatelimitServerRef) {
		return false
	}
	if this.RequestTimeout != nil && that1.RequestTimeout != nil {
		if *this.RequestTimeout != *that1.RequestTimeout {
			return false
		}
	} else if this.RequestTimeout != nil {
		return false
	} else if that1.RequestTimeout != nil {
		return false
	}
	if this.DenyOnFail != that1.DenyOnFail {
		return false
	}
	if this.RateLimitBeforeAuth != that1.RateLimitBeforeAuth {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSettings)
	if !ok {
		that2, ok := that.(ServiceSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Descriptors) != len(that1.Descriptors) {
		return false
	}
	for i := range this.Descriptors {
		if !this.Descriptors[i].Equal(that1.Descriptors[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RateLimitConfigRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigRefs)
	if !ok {
		that2, ok := that.(RateLimitConfigRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if !this.Refs[i].Equal(that1.Refs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RateLimitConfigRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigRef)
	if !ok {
		that2, ok := that.(RateLimitConfigRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RateLimitVhostExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitVhostExtension)
	if !ok {
		that2, ok := that.(RateLimitVhostExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RateLimits) != len(that1.RateLimits) {
		return false
	}
	for i := range this.RateLimits {
		if !this.RateLimits[i].Equal(that1.RateLimits[i]) {
			return false
		}
	}
	if that1.ConfigType == nil {
		if this.ConfigType != nil {
			return false
		}
	} else if this.ConfigType == nil {
		return false
	} else if !this.ConfigType.Equal(that1.ConfigType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RateLimitVhostExtension_ConfigRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitVhostExtension_ConfigRefs)
	if !ok {
		that2, ok := that.(RateLimitVhostExtension_ConfigRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConfigRefs.Equal(that1.ConfigRefs) {
		return false
	}
	return true
}
func (this *RateLimitVhostExtension_InlineConfig_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitVhostExtension_InlineConfig_)
	if !ok {
		that2, ok := that.(RateLimitVhostExtension_InlineConfig_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InlineConfig.Equal(that1.InlineConfig) {
		return false
	}
	return true
}
func (this *RateLimitVhostExtension_InlineConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitVhostExtension_InlineConfig)
	if !ok {
		that2, ok := that.(RateLimitVhostExtension_InlineConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RateLimits) != len(that1.RateLimits) {
		return false
	}
	for i := range this.RateLimits {
		if !this.RateLimits[i].Equal(that1.RateLimits[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RateLimitRouteExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitRouteExtension)
	if !ok {
		that2, ok := that.(RateLimitRouteExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IncludeVhRateLimits != that1.IncludeVhRateLimits {
		return false
	}
	if len(this.RateLimits) != len(that1.RateLimits) {
		return false
	}
	for i := range this.RateLimits {
		if !this.RateLimits[i].Equal(that1.RateLimits[i]) {
			return false
		}
	}
	if that1.ConfigType == nil {
		if this.ConfigType != nil {
			return false
		}
	} else if this.ConfigType == nil {
		return false
	} else if !this.ConfigType.Equal(that1.ConfigType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RateLimitRouteExtension_ConfigRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitRouteExtension_ConfigRefs)
	if !ok {
		that2, ok := that.(RateLimitRouteExtension_ConfigRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConfigRefs.Equal(that1.ConfigRefs) {
		return false
	}
	return true
}
func (this *RateLimitRouteExtension_InlineConfig_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitRouteExtension_InlineConfig_)
	if !ok {
		that2, ok := that.(RateLimitRouteExtension_InlineConfig_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InlineConfig.Equal(that1.InlineConfig) {
		return false
	}
	return true
}
func (this *RateLimitRouteExtension_InlineConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitRouteExtension_InlineConfig)
	if !ok {
		that2, ok := that.(RateLimitRouteExtension_InlineConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IncludeVhRateLimits != that1.IncludeVhRateLimits {
		return false
	}
	if len(this.RateLimits) != len(that1.RateLimits) {
		return false
	}
	for i := range this.RateLimits {
		if !this.RateLimits[i].Equal(that1.RateLimits[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

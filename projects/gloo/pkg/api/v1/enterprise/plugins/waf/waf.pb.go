// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/plugins/waf/waf.proto

package waf

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/waf"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Settings struct {
	// Disable waf on this resource (if omitted defaults to false).
	// If a route/virtual host is configured with WAF, you must explicitly disable its WAF,
	// i.e., it will not inherit the disabled status of its parent
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Add OWASP core rule set
	// if nil will not be added
	CoreRuleSet *CoreRuleSet `protobuf:"bytes,2,opt,name=core_rule_set,json=coreRuleSet,proto3" json:"core_rule_set,omitempty"`
	// Custom rule sets rules to add
	RuleSets             []*waf.RuleSet `protobuf:"bytes,3,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f15f34bd79a50cd0, []int{0}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings.Unmarshal(m, b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return xxx_messageInfo_Settings.Size(m)
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Settings) GetCoreRuleSet() *CoreRuleSet {
	if m != nil {
		return m.CoreRuleSet
	}
	return nil
}

func (m *Settings) GetRuleSets() []*waf.RuleSet {
	if m != nil {
		return m.RuleSets
	}
	return nil
}

type CoreRuleSet struct {
	// Optional custom settings for the OWASP core rule set.
	// For an example on the configuration options see: https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.2/dev/crs-setup.conf.example
	// The same rules apply to these options as do to the `RuleSet`s. The file option is better if possible.
	//
	// Types that are valid to be assigned to CustomSettingsType:
	//	*CoreRuleSet_CustomSettingsString
	//	*CoreRuleSet_CustomSettingsFile
	CustomSettingsType   isCoreRuleSet_CustomSettingsType `protobuf_oneof:"CustomSettingsType"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CoreRuleSet) Reset()         { *m = CoreRuleSet{} }
func (m *CoreRuleSet) String() string { return proto.CompactTextString(m) }
func (*CoreRuleSet) ProtoMessage()    {}
func (*CoreRuleSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f15f34bd79a50cd0, []int{1}
}
func (m *CoreRuleSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreRuleSet.Unmarshal(m, b)
}
func (m *CoreRuleSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreRuleSet.Marshal(b, m, deterministic)
}
func (m *CoreRuleSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreRuleSet.Merge(m, src)
}
func (m *CoreRuleSet) XXX_Size() int {
	return xxx_messageInfo_CoreRuleSet.Size(m)
}
func (m *CoreRuleSet) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreRuleSet.DiscardUnknown(m)
}

var xxx_messageInfo_CoreRuleSet proto.InternalMessageInfo

type isCoreRuleSet_CustomSettingsType interface {
	isCoreRuleSet_CustomSettingsType()
	Equal(interface{}) bool
}

type CoreRuleSet_CustomSettingsString struct {
	CustomSettingsString string `protobuf:"bytes,2,opt,name=custom_settings_string,json=customSettingsString,proto3,oneof" json:"custom_settings_string,omitempty"`
}
type CoreRuleSet_CustomSettingsFile struct {
	CustomSettingsFile string `protobuf:"bytes,3,opt,name=custom_settings_file,json=customSettingsFile,proto3,oneof" json:"custom_settings_file,omitempty"`
}

func (*CoreRuleSet_CustomSettingsString) isCoreRuleSet_CustomSettingsType() {}
func (*CoreRuleSet_CustomSettingsFile) isCoreRuleSet_CustomSettingsType()   {}

func (m *CoreRuleSet) GetCustomSettingsType() isCoreRuleSet_CustomSettingsType {
	if m != nil {
		return m.CustomSettingsType
	}
	return nil
}

func (m *CoreRuleSet) GetCustomSettingsString() string {
	if x, ok := m.GetCustomSettingsType().(*CoreRuleSet_CustomSettingsString); ok {
		return x.CustomSettingsString
	}
	return ""
}

func (m *CoreRuleSet) GetCustomSettingsFile() string {
	if x, ok := m.GetCustomSettingsType().(*CoreRuleSet_CustomSettingsFile); ok {
		return x.CustomSettingsFile
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CoreRuleSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CoreRuleSet_CustomSettingsString)(nil),
		(*CoreRuleSet_CustomSettingsFile)(nil),
	}
}

func init() {
	proto.RegisterType((*Settings)(nil), "waf.plugins.gloo.solo.io.Settings")
	proto.RegisterType((*CoreRuleSet)(nil), "waf.plugins.gloo.solo.io.CoreRuleSet")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/plugins/waf/waf.proto", fileDescriptor_f15f34bd79a50cd0)
}

var fileDescriptor_f15f34bd79a50cd0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6a, 0x1b, 0x31,
	0x10, 0xee, 0xd6, 0x50, 0xd6, 0x5a, 0x7a, 0x11, 0x4b, 0x59, 0x7c, 0x28, 0xc6, 0x50, 0xf0, 0xa5,
	0x52, 0xbb, 0x85, 0x3e, 0x80, 0x0d, 0xfd, 0x39, 0xf8, 0x90, 0x75, 0x4e, 0xb9, 0x98, 0xf5, 0x7a,
	0x56, 0x56, 0x22, 0x6b, 0x84, 0xa4, 0x75, 0xe2, 0xa7, 0xc8, 0x6b, 0xe4, 0x31, 0xf2, 0x2c, 0x79,
	0x92, 0xb0, 0xda, 0x38, 0x89, 0x0d, 0x09, 0x3e, 0x08, 0xbe, 0x6f, 0x86, 0x6f, 0xbe, 0xf9, 0x18,
	0x91, 0x99, 0x90, 0x7e, 0xdd, 0x2c, 0x59, 0x85, 0x1b, 0xee, 0x50, 0xe1, 0x77, 0x89, 0x5c, 0x28,
	0x44, 0x6e, 0x2c, 0x5e, 0x42, 0xe5, 0x5d, 0xc7, 0x4a, 0x23, 0xf9, 0xf6, 0x27, 0x07, 0xed, 0xc1,
	0x1a, 0x2b, 0x1d, 0x70, 0xa3, 0x1a, 0x21, 0xb5, 0xe3, 0xd7, 0x65, 0xdd, 0x3e, 0x66, 0x2c, 0x7a,
	0xa4, 0x59, 0x80, 0x5d, 0x8b, 0xb5, 0x4a, 0xd6, 0x0e, 0x65, 0x12, 0x07, 0x67, 0xa7, 0x1b, 0xc1,
	0x8d, 0x07, 0xab, 0x4b, 0xc5, 0x41, 0x6f, 0x71, 0x17, 0xa8, 0x76, 0x12, 0x8f, 0xcd, 0x06, 0xa9,
	0x40, 0x81, 0x01, 0xf2, 0x16, 0x75, 0xd5, 0xd1, 0x7d, 0x44, 0xe2, 0x39, 0x78, 0x2f, 0xb5, 0x70,
	0x74, 0x40, 0xe2, 0x95, 0x74, 0xe5, 0x52, 0xc1, 0x2a, 0x8b, 0x86, 0xd1, 0x38, 0x2e, 0x9e, 0x39,
	0xfd, 0x4f, 0x3e, 0x57, 0x68, 0x61, 0x61, 0x1b, 0x05, 0x0b, 0x07, 0x3e, 0xfb, 0x38, 0x8c, 0xc6,
	0x49, 0xfe, 0x8d, 0xbd, 0x95, 0x81, 0x4d, 0xd1, 0x42, 0xd1, 0x28, 0x98, 0x83, 0x2f, 0x92, 0xea,
	0x85, 0xd0, 0x19, 0xe9, 0xef, 0xa7, 0xb8, 0xac, 0x37, 0xec, 0x8d, 0x93, 0xfc, 0x07, 0x0b, 0xdb,
	0xb3, 0x0a, 0x75, 0x2d, 0x05, 0xab, 0xa5, 0xf2, 0x60, 0xd9, 0xda, 0x7b, 0xc3, 0x36, 0xb8, 0x72,
	0x50, 0x35, 0x56, 0xfa, 0x1d, 0xdb, 0xe6, 0x6c, 0x3f, 0x31, 0xb6, 0x1d, 0x70, 0xa3, 0xdb, 0x88,
	0x24, 0xaf, 0xbc, 0xe8, 0x6f, 0xf2, 0xa5, 0x6a, 0x9c, 0xc7, 0x4d, 0x6b, 0x10, 0x82, 0x2d, 0x9c,
	0xb7, 0x52, 0x8b, 0xb0, 0x72, 0xff, 0xdf, 0x87, 0x22, 0xed, 0xfa, 0xfb, 0xdc, 0xf3, 0xd0, 0xa5,
	0x39, 0x49, 0x8f, 0x75, 0xb5, 0x54, 0x90, 0xf5, 0x9e, 0x54, 0xf4, 0x50, 0xf5, 0x47, 0x2a, 0x98,
	0xa4, 0x84, 0x4e, 0x0f, 0xaa, 0xe7, 0x3b, 0x03, 0x93, 0xd9, 0xdd, 0xc3, 0xd7, 0xe8, 0xe2, 0xef,
	0x69, 0x37, 0x34, 0x57, 0xe2, 0xfd, 0x0f, 0xb3, 0xfc, 0x14, 0x4e, 0xf5, 0xeb, 0x31, 0x00, 0x00,
	0xff, 0xff, 0x4b, 0xc7, 0x73, 0x22, 0x7e, 0x02, 0x00, 0x00,
}

func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if !this.CoreRuleSet.Equal(that1.CoreRuleSet) {
		return false
	}
	if len(this.RuleSets) != len(that1.RuleSets) {
		return false
	}
	for i := range this.RuleSets {
		if !this.RuleSets[i].Equal(that1.RuleSets[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoreRuleSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoreRuleSet)
	if !ok {
		that2, ok := that.(CoreRuleSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CustomSettingsType == nil {
		if this.CustomSettingsType != nil {
			return false
		}
	} else if this.CustomSettingsType == nil {
		return false
	} else if !this.CustomSettingsType.Equal(that1.CustomSettingsType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoreRuleSet_CustomSettingsString) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoreRuleSet_CustomSettingsString)
	if !ok {
		that2, ok := that.(CoreRuleSet_CustomSettingsString)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomSettingsString != that1.CustomSettingsString {
		return false
	}
	return true
}
func (this *CoreRuleSet_CustomSettingsFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoreRuleSet_CustomSettingsFile)
	if !ok {
		that2, ok := that.(CoreRuleSet_CustomSettingsFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomSettingsFile != that1.CustomSettingsFile {
		return false
	}
	return true
}

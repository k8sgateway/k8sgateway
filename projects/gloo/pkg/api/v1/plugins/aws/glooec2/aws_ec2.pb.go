// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins/aws/ec2/aws_ec2.proto

package glooec2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Upstream Spec for AWS Lambda Upstreams
// AWS Upstreams represent a collection of Lambda Functions for a particular AWS Account (IAM Role or User account)
// in a particular region
type UpstreamSpec struct {
	// The AWS Region where the desired EC2 instances exist
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// A [Gloo Secret Ref](https://gloo.solo.io/introduction/concepts/#Secrets) to an AWS Secret
	// AWS Secrets can be created with `glooctl secret create aws ...`
	// If the secret is created manually, it must conform to the following structure:
	//  ```
	//  access_key: <aws access key>
	//  secret_key: <aws secret key>
	//  ```
	SecretRef core.ResourceRef `protobuf:"bytes,2,opt,name=secret_ref,json=secretRef,proto3" json:"secret_ref"`
	// The list of EC2 instances contained within this region.
	// This list will be automatically populated by Gloo if discovery is enabled for AWS EC2
	Ec2Instances         []*Ec2InstanceSpec `protobuf:"bytes,3,rep,name=ec2_instances,json=ec2Instances,proto3" json:"ec2_instances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc1fd6f1173c4563, []int{0}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (m *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(m, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

func (m *UpstreamSpec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *UpstreamSpec) GetSecretRef() core.ResourceRef {
	if m != nil {
		return m.SecretRef
	}
	return core.ResourceRef{}
}

func (m *UpstreamSpec) GetEc2Instances() []*Ec2InstanceSpec {
	if m != nil {
		return m.Ec2Instances
	}
	return nil
}

// Each EC2 Instance Spec contains data necessary for Gloo to route to EC2 instances:
// - name of the function
// - qualifier for the function
type Ec2InstanceSpec struct {
	// the logical name gloo should associate with this function. if left empty, it will default to
	// lambda_function_name+qualifier
	PublicDns string `protobuf:"bytes,1,opt,name=public_dns,json=publicDns,proto3" json:"public_dns,omitempty"`
	// the port to which gloo should route
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ec2InstanceSpec) Reset()         { *m = Ec2InstanceSpec{} }
func (m *Ec2InstanceSpec) String() string { return proto.CompactTextString(m) }
func (*Ec2InstanceSpec) ProtoMessage()    {}
func (*Ec2InstanceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc1fd6f1173c4563, []int{1}
}
func (m *Ec2InstanceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ec2InstanceSpec.Unmarshal(m, b)
}
func (m *Ec2InstanceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ec2InstanceSpec.Marshal(b, m, deterministic)
}
func (m *Ec2InstanceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ec2InstanceSpec.Merge(m, src)
}
func (m *Ec2InstanceSpec) XXX_Size() int {
	return xxx_messageInfo_Ec2InstanceSpec.Size(m)
}
func (m *Ec2InstanceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_Ec2InstanceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_Ec2InstanceSpec proto.InternalMessageInfo

func (m *Ec2InstanceSpec) GetPublicDns() string {
	if m != nil {
		return m.PublicDns
	}
	return ""
}

func (m *Ec2InstanceSpec) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "aws_ec2.plugins.gloo.solo.io.UpstreamSpec")
	proto.RegisterType((*Ec2InstanceSpec)(nil), "aws_ec2.plugins.gloo.solo.io.Ec2InstanceSpec")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins/aws/ec2/aws_ec2.proto", fileDescriptor_fc1fd6f1173c4563)
}

var fileDescriptor_fc1fd6f1173c4563 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x3d, 0x4e, 0x33, 0x31,
	0x10, 0xfd, 0xf6, 0x4b, 0x14, 0x29, 0x4e, 0x22, 0x24, 0x0b, 0xa1, 0x10, 0xf1, 0x13, 0xa5, 0x4a,
	0x41, 0x6c, 0x61, 0x7a, 0x8a, 0x28, 0x14, 0xa4, 0x34, 0xa2, 0xa1, 0x59, 0x6d, 0xcc, 0xac, 0x31,
	0xd9, 0xec, 0x58, 0xb6, 0x17, 0xae, 0xc4, 0x19, 0x38, 0x01, 0xa7, 0xa0, 0xe0, 0x24, 0x68, 0x7f,
	0x02, 0x12, 0x8a, 0x10, 0xd5, 0xcc, 0x1b, 0xbf, 0xe7, 0x79, 0x33, 0x43, 0x96, 0xda, 0x84, 0x87,
	0x62, 0xc5, 0x14, 0x6e, 0xb8, 0xc7, 0x0c, 0x67, 0x06, 0xb9, 0xce, 0x10, 0xb9, 0x75, 0xf8, 0x08,
	0x2a, 0xf8, 0x1a, 0x25, 0xd6, 0xf0, 0xa7, 0x73, 0x6e, 0xb3, 0x42, 0x9b, 0xdc, 0xf3, 0xe4, 0xd9,
	0x73, 0x50, 0xa2, 0x8c, 0x31, 0x28, 0xc1, 0xac, 0xc3, 0x80, 0xf4, 0xe8, 0x0b, 0xd6, 0x34, 0x56,
	0x4a, 0x59, 0xf9, 0x2b, 0x33, 0x38, 0xda, 0xd7, 0xa8, 0xb1, 0x22, 0xf2, 0x32, 0xab, 0x35, 0xa3,
	0xb3, 0x1d, 0xfd, 0xab, 0xb8, 0x36, 0x61, 0xdb, 0xd5, 0x41, 0x5a, 0xb3, 0x27, 0xaf, 0x11, 0xe9,
	0xdf, 0x5a, 0x1f, 0x1c, 0x24, 0x9b, 0x1b, 0x0b, 0x8a, 0x1e, 0x90, 0x8e, 0x03, 0x6d, 0x30, 0x1f,
	0x46, 0xe3, 0x68, 0xda, 0x95, 0x0d, 0xa2, 0x97, 0x84, 0x78, 0x50, 0x0e, 0x42, 0xec, 0x20, 0x1d,
	0xfe, 0x1f, 0x47, 0xd3, 0x9e, 0x38, 0x64, 0x0a, 0x1d, 0x6c, 0xfd, 0x30, 0x09, 0x1e, 0x0b, 0xa7,
	0x40, 0x42, 0x3a, 0x6f, 0xbf, 0xbd, 0x9f, 0xfe, 0x93, 0xdd, 0x5a, 0x22, 0x21, 0xa5, 0x92, 0x0c,
	0x40, 0x89, 0xd8, 0xe4, 0x3e, 0x24, 0xb9, 0x02, 0x3f, 0x6c, 0x8d, 0x5b, 0xd3, 0x9e, 0x98, 0xb1,
	0xdf, 0x46, 0x64, 0x57, 0x4a, 0x5c, 0x37, 0x8a, 0xd2, 0x9d, 0xec, 0xc3, 0x77, 0xc1, 0x4f, 0x16,
	0x64, 0xef, 0x07, 0x81, 0x1e, 0x13, 0x62, 0x8b, 0x55, 0x66, 0x54, 0x7c, 0x9f, 0xfb, 0x66, 0x84,
	0x6e, 0x5d, 0x59, 0xe4, 0x9e, 0x52, 0xd2, 0xb6, 0xe8, 0x42, 0xe5, 0x7f, 0x20, 0xab, 0x7c, 0xbe,
	0x7c, 0xf9, 0x38, 0x89, 0xee, 0x16, 0x7f, 0x3b, 0x9b, 0x5d, 0xeb, 0x5d, 0xa7, 0x2b, 0xdf, 0x40,
	0x89, 0x55, 0xa7, 0xda, 0xea, 0xc5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x85, 0xa3, 0xb4,
	0x05, 0x02, 0x00, 0x00,
}

func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !this.SecretRef.Equal(&that1.SecretRef) {
		return false
	}
	if len(this.Ec2Instances) != len(that1.Ec2Instances) {
		return false
	}
	for i := range this.Ec2Instances {
		if !this.Ec2Instances[i].Equal(that1.Ec2Instances[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Ec2InstanceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ec2InstanceSpec)
	if !ok {
		that2, ok := that.(Ec2InstanceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicDns != that1.PublicDns {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

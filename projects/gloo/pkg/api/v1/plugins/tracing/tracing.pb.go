// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins/tracing/tracing.proto

package tracing

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Contains settings for configuring Envoy's tracing capabilities at the listener level.
// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
// See here for additional information about configuring tracing with Gloo: https://gloo.solo.io/user_guides/setup_options/observability/#tracing
type ListenerTracingSettings struct {
	// Optional. If specified, Envoy will include the headers and header values for any matching request headers.
	RequestHeadersForTags []string `protobuf:"bytes,1,rep,name=request_headers_for_tags,json=requestHeadersForTags,proto3" json:"request_headers_for_tags,omitempty"`
	// Optional. If true, Envoy will include logs for streaming events. Default: false.
	Verbose bool `protobuf:"varint,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// Requests can produce traces by random sampling or when the `x-client-trace-id` header is provided.
	// TracePercentages defines the limits for random, forced, and overall tracing percentages.
	TracePercentages     *TracePercentages `protobuf:"bytes,3,opt,name=trace_percentages,json=tracePercentages,proto3" json:"trace_percentages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListenerTracingSettings) Reset()         { *m = ListenerTracingSettings{} }
func (m *ListenerTracingSettings) String() string { return proto.CompactTextString(m) }
func (*ListenerTracingSettings) ProtoMessage()    {}
func (*ListenerTracingSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f506fe4343ba9f34, []int{0}
}
func (m *ListenerTracingSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenerTracingSettings.Unmarshal(m, b)
}
func (m *ListenerTracingSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenerTracingSettings.Marshal(b, m, deterministic)
}
func (m *ListenerTracingSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerTracingSettings.Merge(m, src)
}
func (m *ListenerTracingSettings) XXX_Size() int {
	return xxx_messageInfo_ListenerTracingSettings.Size(m)
}
func (m *ListenerTracingSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerTracingSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerTracingSettings proto.InternalMessageInfo

func (m *ListenerTracingSettings) GetRequestHeadersForTags() []string {
	if m != nil {
		return m.RequestHeadersForTags
	}
	return nil
}

func (m *ListenerTracingSettings) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *ListenerTracingSettings) GetTracePercentages() *TracePercentages {
	if m != nil {
		return m.TracePercentages
	}
	return nil
}

// Contains settings for configuring Envoy's tracing capabilities at the route level.
// Note: must also specify ListenerTracingSettings for the associated listener.
// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
// See here for additional information about configuring tracing with Gloo: https://gloo.solo.io/user_guides/setup_options/observability/#tracing
type RouteTracingSettings struct {
	// Optional. If set, will be used to identify the route that produced the trace.
	// Note that this value will be overridden if the "x-envoy-decorator-operation" header is passed.
	RouteDescriptor string `protobuf:"bytes,1,opt,name=route_descriptor,json=routeDescriptor,proto3" json:"route_descriptor,omitempty"`
	// Requests can produce traces by random sampling or when the `x-client-trace-id` header is provided.
	// TracePercentages defines the limits for random, forced, and overall tracing percentages.
	TracePercentages     *TracePercentages `protobuf:"bytes,2,opt,name=trace_percentages,json=tracePercentages,proto3" json:"trace_percentages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RouteTracingSettings) Reset()         { *m = RouteTracingSettings{} }
func (m *RouteTracingSettings) String() string { return proto.CompactTextString(m) }
func (*RouteTracingSettings) ProtoMessage()    {}
func (*RouteTracingSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f506fe4343ba9f34, []int{1}
}
func (m *RouteTracingSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTracingSettings.Unmarshal(m, b)
}
func (m *RouteTracingSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTracingSettings.Marshal(b, m, deterministic)
}
func (m *RouteTracingSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTracingSettings.Merge(m, src)
}
func (m *RouteTracingSettings) XXX_Size() int {
	return xxx_messageInfo_RouteTracingSettings.Size(m)
}
func (m *RouteTracingSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTracingSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTracingSettings proto.InternalMessageInfo

func (m *RouteTracingSettings) GetRouteDescriptor() string {
	if m != nil {
		return m.RouteDescriptor
	}
	return ""
}

func (m *RouteTracingSettings) GetTracePercentages() *TracePercentages {
	if m != nil {
		return m.TracePercentages
	}
	return nil
}

// Requests can produce traces by random sampling or when the `x-client-trace-id` header is provided.
// TracePercentages defines the limits for random, forced, and overall tracing percentages.
type TracePercentages struct {
	// Percentage of requests that should produce traces when the `x-client-trace-id` header is provided.
	// optional, defaults to 100.0
	// This should be a value between 0.0 and 100.0, with up to 6 significant digits.
	ClientSamplePercentage float32 `protobuf:"fixed32,1,opt,name=client_sample_percentage,json=clientSamplePercentage,proto3" json:"client_sample_percentage,omitempty"`
	// Percentage of requests that should produce traces by random sampling.
	// optional, defaults to 100.0
	// This should be a value between 0.0 and 100.0, with up to 6 significant digits.
	RandomSamplePercentage float32 `protobuf:"fixed32,2,opt,name=random_sample_percentage,json=randomSamplePercentage,proto3" json:"random_sample_percentage,omitempty"`
	// Overall percentage of requests that should produce traces.
	// optional, defaults to 100.0
	// This should be a value between 0.0 and 100.0, with up to 6 significant digits.
	OverallSamplePercentage float32  `protobuf:"fixed32,3,opt,name=overall_sample_percentage,json=overallSamplePercentage,proto3" json:"overall_sample_percentage,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *TracePercentages) Reset()         { *m = TracePercentages{} }
func (m *TracePercentages) String() string { return proto.CompactTextString(m) }
func (*TracePercentages) ProtoMessage()    {}
func (*TracePercentages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f506fe4343ba9f34, []int{2}
}
func (m *TracePercentages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracePercentages.Unmarshal(m, b)
}
func (m *TracePercentages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracePercentages.Marshal(b, m, deterministic)
}
func (m *TracePercentages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracePercentages.Merge(m, src)
}
func (m *TracePercentages) XXX_Size() int {
	return xxx_messageInfo_TracePercentages.Size(m)
}
func (m *TracePercentages) XXX_DiscardUnknown() {
	xxx_messageInfo_TracePercentages.DiscardUnknown(m)
}

var xxx_messageInfo_TracePercentages proto.InternalMessageInfo

func (m *TracePercentages) GetClientSamplePercentage() float32 {
	if m != nil {
		return m.ClientSamplePercentage
	}
	return 0
}

func (m *TracePercentages) GetRandomSamplePercentage() float32 {
	if m != nil {
		return m.RandomSamplePercentage
	}
	return 0
}

func (m *TracePercentages) GetOverallSamplePercentage() float32 {
	if m != nil {
		return m.OverallSamplePercentage
	}
	return 0
}

func init() {
	proto.RegisterType((*ListenerTracingSettings)(nil), "tracing.plugins.gloo.solo.io.ListenerTracingSettings")
	proto.RegisterType((*RouteTracingSettings)(nil), "tracing.plugins.gloo.solo.io.RouteTracingSettings")
	proto.RegisterType((*TracePercentages)(nil), "tracing.plugins.gloo.solo.io.TracePercentages")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins/tracing/tracing.proto", fileDescriptor_f506fe4343ba9f34)
}

var fileDescriptor_f506fe4343ba9f34 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbf, 0x8e, 0xd4, 0x30,
	0x10, 0xc6, 0xe5, 0xac, 0x04, 0x9c, 0x29, 0x58, 0xa2, 0x83, 0x0b, 0x27, 0x74, 0x8a, 0xae, 0x0a,
	0x05, 0xb6, 0x80, 0x02, 0x44, 0x85, 0x10, 0x3a, 0x21, 0x44, 0x81, 0x72, 0x57, 0x41, 0x11, 0x39,
	0xc9, 0x9c, 0xcf, 0xe0, 0xf5, 0x98, 0xb1, 0xb3, 0xbc, 0x0d, 0x35, 0xcf, 0x41, 0xc7, 0x6b, 0xf0,
	0x24, 0x28, 0xf1, 0xfd, 0x41, 0x61, 0x17, 0x51, 0x50, 0x25, 0x33, 0xdf, 0xf7, 0xf3, 0x7c, 0x23,
	0x0d, 0x7f, 0xa3, 0x4d, 0x3c, 0x1b, 0x5a, 0xd1, 0xe1, 0x4a, 0x06, 0xb4, 0xf8, 0xd0, 0xa0, 0xd4,
	0x16, 0x51, 0x7a, 0xc2, 0x8f, 0xd0, 0xc5, 0x90, 0x2a, 0xe5, 0x8d, 0x5c, 0x3f, 0x92, 0xde, 0x0e,
	0xda, 0xb8, 0x20, 0x23, 0xa9, 0xce, 0x38, 0x7d, 0xf1, 0x15, 0x9e, 0x30, 0x62, 0x7e, 0xff, 0xb2,
	0x4c, 0x36, 0x31, 0xa2, 0x62, 0x7c, 0x55, 0x18, 0xdc, 0xdf, 0xd5, 0xa8, 0x71, 0x32, 0xca, 0xf1,
	0x2f, 0x31, 0xfb, 0x07, 0x1a, 0x51, 0x5b, 0x90, 0x53, 0xd5, 0x0e, 0xa7, 0xf2, 0x0b, 0x29, 0xef,
	0x81, 0xc2, 0x36, 0xbd, 0x1f, 0x48, 0x45, 0x83, 0x2e, 0xe9, 0x87, 0x3f, 0x18, 0xdf, 0x7b, 0x6b,
	0x42, 0x04, 0x07, 0x74, 0x92, 0xc6, 0x1f, 0x43, 0x8c, 0xc6, 0xe9, 0x90, 0x3f, 0xe5, 0x05, 0xc1,
	0xe7, 0x01, 0x42, 0x6c, 0xce, 0x40, 0xf5, 0x40, 0xa1, 0x39, 0x45, 0x6a, 0xa2, 0xd2, 0xa1, 0x60,
	0xe5, 0xa2, 0xda, 0xa9, 0xef, 0x9c, 0xeb, 0xaf, 0x93, 0x7c, 0x84, 0x74, 0xa2, 0x74, 0xc8, 0x0b,
	0x7e, 0x7d, 0x0d, 0xd4, 0x62, 0x80, 0x22, 0x2b, 0x59, 0x75, 0xa3, 0xbe, 0x28, 0xf3, 0x0f, 0xfc,
	0xf6, 0xb8, 0x24, 0x34, 0x1e, 0xa8, 0x03, 0x17, 0x95, 0x86, 0x50, 0x2c, 0x4a, 0x56, 0xdd, 0x7c,
	0x2c, 0xc4, 0xdf, 0xd6, 0x17, 0x63, 0x38, 0x78, 0x77, 0x45, 0xd5, 0xcb, 0x38, 0xeb, 0x1c, 0x7e,
	0x65, 0x7c, 0xb7, 0xc6, 0x21, 0xc2, 0x7c, 0x91, 0x07, 0x7c, 0x49, 0x63, 0xbf, 0xe9, 0x21, 0x74,
	0x64, 0x7c, 0x44, 0x2a, 0x58, 0xc9, 0xaa, 0x9d, 0xfa, 0xd6, 0xd4, 0x7f, 0x75, 0xd9, 0xde, 0x1c,
	0x30, 0xfb, 0x4f, 0x01, 0xbf, 0x33, 0xbe, 0x9c, 0xdb, 0xf2, 0x67, 0xbc, 0xe8, 0xac, 0x01, 0x17,
	0x9b, 0xa0, 0x56, 0xde, 0xfe, 0x3e, 0x79, 0x0a, 0x99, 0xd5, 0x77, 0x93, 0x7e, 0x3c, 0xc9, 0x57,
	0xe8, 0x48, 0x92, 0x72, 0x3d, 0xae, 0x36, 0x90, 0x59, 0x22, 0x93, 0xfe, 0x07, 0xf9, 0x9c, 0xdf,
	0xc3, 0x35, 0x90, 0xb2, 0x76, 0x03, 0xba, 0x98, 0xd0, 0xbd, 0x73, 0xc3, 0x9c, 0x7d, 0x79, 0xf4,
	0xed, 0xe7, 0x01, 0x7b, 0xff, 0xe2, 0xdf, 0xee, 0xde, 0x7f, 0xd2, 0x5b, 0x6e, 0xbf, 0xbd, 0x36,
	0x1d, 0xe0, 0x93, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x11, 0x93, 0xbf, 0x42, 0x03, 0x00,
	0x00,
}

func (this *ListenerTracingSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerTracingSettings)
	if !ok {
		that2, ok := that.(ListenerTracingSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersForTags) != len(that1.RequestHeadersForTags) {
		return false
	}
	for i := range this.RequestHeadersForTags {
		if this.RequestHeadersForTags[i] != that1.RequestHeadersForTags[i] {
			return false
		}
	}
	if this.Verbose != that1.Verbose {
		return false
	}
	if !this.TracePercentages.Equal(that1.TracePercentages) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteTracingSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTracingSettings)
	if !ok {
		that2, ok := that.(RouteTracingSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RouteDescriptor != that1.RouteDescriptor {
		return false
	}
	if !this.TracePercentages.Equal(that1.TracePercentages) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TracePercentages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TracePercentages)
	if !ok {
		that2, ok := that.(TracePercentages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientSamplePercentage != that1.ClientSamplePercentage {
		return false
	}
	if this.RandomSamplePercentage != that1.RandomSamplePercentage {
		return false
	}
	if this.OverallSamplePercentage != that1.OverallSamplePercentage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

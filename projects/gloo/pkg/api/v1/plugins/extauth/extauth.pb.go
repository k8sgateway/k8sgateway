// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins/extauth/extauth.proto

package extauth

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	math "math"
	time "time"

	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Settings struct {
	// The upstream to ask about auth decisions
	ExtauthzServerRef *core.ResourceRef `protobuf:"bytes,1,opt,name=extauthz_server_ref,json=extauthzServerRef,proto3" json:"extauthz_server_ref,omitempty"`
	// If this is set, communication to the upstream will be with HTTP and not GRPC.
	HttpService *HttpService `protobuf:"bytes,2,opt,name=http_service,json=httpService,proto3" json:"http_service,omitempty"`
	// If the auth server trusted id of the user, it will be set in this header.
	// Specifically this means that this header will be sanitized form the incoming request.
	UserIdHeader string `protobuf:"bytes,3,opt,name=user_id_header,json=userIdHeader,proto3" json:"user_id_header,omitempty"`
	// Timeout for the ext auth service to respond. defaults to 200ms
	RequestTimeout *time.Duration `protobuf:"bytes,4,opt,name=request_timeout,json=requestTimeout,proto3,stdduration" json:"request_timeout,omitempty"`
	// In case of a failure or timeout querying the auth server, normally a request is denied.
	// if this is set to true, the request will be allowed.
	FailureModeAllow bool `protobuf:"varint,5,opt,name=failure_mode_allow,json=failureModeAllow,proto3" json:"failure_mode_allow,omitempty"`
	// Set this if you also want to send the body of the request, and not just the headers.
	RequestBody          *BufferSettings `protobuf:"bytes,6,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{0}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings.Unmarshal(m, b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return xxx_messageInfo_Settings.Size(m)
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetExtauthzServerRef() *core.ResourceRef {
	if m != nil {
		return m.ExtauthzServerRef
	}
	return nil
}

func (m *Settings) GetHttpService() *HttpService {
	if m != nil {
		return m.HttpService
	}
	return nil
}

func (m *Settings) GetUserIdHeader() string {
	if m != nil {
		return m.UserIdHeader
	}
	return ""
}

func (m *Settings) GetRequestTimeout() *time.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *Settings) GetFailureModeAllow() bool {
	if m != nil {
		return m.FailureModeAllow
	}
	return false
}

func (m *Settings) GetRequestBody() *BufferSettings {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type HttpService struct {
	// Sets a prefix to the value of authorization request header *Path*.
	PathPrefix           string                `protobuf:"bytes,1,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	Request              *HttpService_Request  `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Response             *HttpService_Response `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HttpService) Reset()         { *m = HttpService{} }
func (m *HttpService) String() string { return proto.CompactTextString(m) }
func (*HttpService) ProtoMessage()    {}
func (*HttpService) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{1}
}
func (m *HttpService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService.Unmarshal(m, b)
}
func (m *HttpService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService.Marshal(b, m, deterministic)
}
func (m *HttpService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService.Merge(m, src)
}
func (m *HttpService) XXX_Size() int {
	return xxx_messageInfo_HttpService.Size(m)
}
func (m *HttpService) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService proto.InternalMessageInfo

func (m *HttpService) GetPathPrefix() string {
	if m != nil {
		return m.PathPrefix
	}
	return ""
}

func (m *HttpService) GetRequest() *HttpService_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HttpService) GetResponse() *HttpService_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type HttpService_Request struct {
	// These headers will be copied from the incoming request to the request going
	// to the auth server. Note that in addition to the user's supplied matchers:
	//
	// 1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
	//
	// 2. *Content-Length* will be set to 0 and the request to the authorization service will not have
	// a message body.
	AllowedHeaders []string `protobuf:"bytes,1,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	// These headers that will be included to the request to authorization service. Note that
	// client request of the same key will be overridden.
	HeadersToAdd         map[string]string `protobuf:"bytes,2,rep,name=headers_to_add,json=headersToAdd,proto3" json:"headers_to_add,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HttpService_Request) Reset()         { *m = HttpService_Request{} }
func (m *HttpService_Request) String() string { return proto.CompactTextString(m) }
func (*HttpService_Request) ProtoMessage()    {}
func (*HttpService_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{1, 0}
}
func (m *HttpService_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService_Request.Unmarshal(m, b)
}
func (m *HttpService_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService_Request.Marshal(b, m, deterministic)
}
func (m *HttpService_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService_Request.Merge(m, src)
}
func (m *HttpService_Request) XXX_Size() int {
	return xxx_messageInfo_HttpService_Request.Size(m)
}
func (m *HttpService_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService_Request.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService_Request proto.InternalMessageInfo

func (m *HttpService_Request) GetAllowedHeaders() []string {
	if m != nil {
		return m.AllowedHeaders
	}
	return nil
}

func (m *HttpService_Request) GetHeadersToAdd() map[string]string {
	if m != nil {
		return m.HeadersToAdd
	}
	return nil
}

type HttpService_Response struct {
	// When this is set, authorization response headers that have a will be added to the original client request and sent to the upstream.
	// Note that coexistent headers will be overridden.
	AllowedUpstreamHeaders []string `protobuf:"bytes,1,rep,name=allowed_upstream_headers,json=allowedUpstreamHeaders,proto3" json:"allowed_upstream_headers,omitempty"`
	// When this. is set, authorization response headers that will be added to the client's response when auth request is denied.
	// Note that when this list is *not* set, all the authorization response headers, except *Authority
	// (Host)* will be in the response to the client. When a header is included in this list, *Path*,
	// *Status*, *Content-Length*, *WWW-Authenticate* and *Location* are automatically added.
	AllowedClientHeaders []string `protobuf:"bytes,2,rep,name=allowed_client_headers,json=allowedClientHeaders,proto3" json:"allowed_client_headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpService_Response) Reset()         { *m = HttpService_Response{} }
func (m *HttpService_Response) String() string { return proto.CompactTextString(m) }
func (*HttpService_Response) ProtoMessage()    {}
func (*HttpService_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{1, 1}
}
func (m *HttpService_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService_Response.Unmarshal(m, b)
}
func (m *HttpService_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService_Response.Marshal(b, m, deterministic)
}
func (m *HttpService_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService_Response.Merge(m, src)
}
func (m *HttpService_Response) XXX_Size() int {
	return xxx_messageInfo_HttpService_Response.Size(m)
}
func (m *HttpService_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService_Response.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService_Response proto.InternalMessageInfo

func (m *HttpService_Response) GetAllowedUpstreamHeaders() []string {
	if m != nil {
		return m.AllowedUpstreamHeaders
	}
	return nil
}

func (m *HttpService_Response) GetAllowedClientHeaders() []string {
	if m != nil {
		return m.AllowedClientHeaders
	}
	return nil
}

// Configuration for buffering the request data.
type BufferSettings struct {
	// Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
	// *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
	// set in this field. Note that this setting will have precedence over failure_mode_allow.
	// Defaults to 4KB.
	MaxRequestBytes uint32 `protobuf:"varint,1,opt,name=max_request_bytes,json=maxRequestBytes,proto3" json:"max_request_bytes,omitempty"`
	// When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
	// The authorization request will be dispatched and no 413 HTTP error will be returned by the
	// filter.
	AllowPartialMessage  bool     `protobuf:"varint,2,opt,name=allow_partial_message,json=allowPartialMessage,proto3" json:"allow_partial_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufferSettings) Reset()         { *m = BufferSettings{} }
func (m *BufferSettings) String() string { return proto.CompactTextString(m) }
func (*BufferSettings) ProtoMessage()    {}
func (*BufferSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{2}
}
func (m *BufferSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufferSettings.Unmarshal(m, b)
}
func (m *BufferSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufferSettings.Marshal(b, m, deterministic)
}
func (m *BufferSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferSettings.Merge(m, src)
}
func (m *BufferSettings) XXX_Size() int {
	return xxx_messageInfo_BufferSettings.Size(m)
}
func (m *BufferSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferSettings.DiscardUnknown(m)
}

var xxx_messageInfo_BufferSettings proto.InternalMessageInfo

func (m *BufferSettings) GetMaxRequestBytes() uint32 {
	if m != nil {
		return m.MaxRequestBytes
	}
	return 0
}

func (m *BufferSettings) GetAllowPartialMessage() bool {
	if m != nil {
		return m.AllowPartialMessage
	}
	return false
}

// Gloo is not expected to configure the ext auth server in this case.
// This is used with custom auth servers.
type CustomAuth struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomAuth) Reset()         { *m = CustomAuth{} }
func (m *CustomAuth) String() string { return proto.CompactTextString(m) }
func (*CustomAuth) ProtoMessage()    {}
func (*CustomAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{3}
}
func (m *CustomAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomAuth.Unmarshal(m, b)
}
func (m *CustomAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomAuth.Marshal(b, m, deterministic)
}
func (m *CustomAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomAuth.Merge(m, src)
}
func (m *CustomAuth) XXX_Size() int {
	return xxx_messageInfo_CustomAuth.Size(m)
}
func (m *CustomAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomAuth.DiscardUnknown(m)
}

var xxx_messageInfo_CustomAuth proto.InternalMessageInfo

// Configures auth via dynamically loaded Go plugins.
// Deprecated
type PluginAuth struct {
	// Deprecated
	Plugins              []*AuthPlugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PluginAuth) Reset()         { *m = PluginAuth{} }
func (m *PluginAuth) String() string { return proto.CompactTextString(m) }
func (*PluginAuth) ProtoMessage()    {}
func (*PluginAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{4}
}
func (m *PluginAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginAuth.Unmarshal(m, b)
}
func (m *PluginAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginAuth.Marshal(b, m, deterministic)
}
func (m *PluginAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginAuth.Merge(m, src)
}
func (m *PluginAuth) XXX_Size() int {
	return xxx_messageInfo_PluginAuth.Size(m)
}
func (m *PluginAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginAuth.DiscardUnknown(m)
}

var xxx_messageInfo_PluginAuth proto.InternalMessageInfo

func (m *PluginAuth) GetPlugins() []*AuthPlugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type AuthPlugin struct {
	// Name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the compiled plugin file. If not specified, GlooE will look for an ".so" file with same name as the plugin.
	PluginFileName string `protobuf:"bytes,2,opt,name=plugin_file_name,json=pluginFileName,proto3" json:"plugin_file_name,omitempty"`
	// Name of the exported symbol that implements the plugin interface in the plugin.
	// If not specified, defaults to the name of the plugin
	ExportedSymbolName   string        `protobuf:"bytes,3,opt,name=exported_symbol_name,json=exportedSymbolName,proto3" json:"exported_symbol_name,omitempty"`
	Config               *types.Struct `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AuthPlugin) Reset()         { *m = AuthPlugin{} }
func (m *AuthPlugin) String() string { return proto.CompactTextString(m) }
func (*AuthPlugin) ProtoMessage()    {}
func (*AuthPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{5}
}
func (m *AuthPlugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthPlugin.Unmarshal(m, b)
}
func (m *AuthPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthPlugin.Marshal(b, m, deterministic)
}
func (m *AuthPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthPlugin.Merge(m, src)
}
func (m *AuthPlugin) XXX_Size() int {
	return xxx_messageInfo_AuthPlugin.Size(m)
}
func (m *AuthPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_AuthPlugin proto.InternalMessageInfo

func (m *AuthPlugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthPlugin) GetPluginFileName() string {
	if m != nil {
		return m.PluginFileName
	}
	return ""
}

func (m *AuthPlugin) GetExportedSymbolName() string {
	if m != nil {
		return m.ExportedSymbolName
	}
	return ""
}

func (m *AuthPlugin) GetConfig() *types.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

type BasicAuth struct {
	Realm                string         `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	Apr                  *BasicAuth_Apr `protobuf:"bytes,2,opt,name=apr,proto3" json:"apr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BasicAuth) Reset()         { *m = BasicAuth{} }
func (m *BasicAuth) String() string { return proto.CompactTextString(m) }
func (*BasicAuth) ProtoMessage()    {}
func (*BasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{6}
}
func (m *BasicAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAuth.Unmarshal(m, b)
}
func (m *BasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAuth.Marshal(b, m, deterministic)
}
func (m *BasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth.Merge(m, src)
}
func (m *BasicAuth) XXX_Size() int {
	return xxx_messageInfo_BasicAuth.Size(m)
}
func (m *BasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth proto.InternalMessageInfo

func (m *BasicAuth) GetRealm() string {
	if m != nil {
		return m.Realm
	}
	return ""
}

func (m *BasicAuth) GetApr() *BasicAuth_Apr {
	if m != nil {
		return m.Apr
	}
	return nil
}

type BasicAuth_Apr struct {
	Users                map[string]*BasicAuth_Apr_SaltedHashedPassword `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *BasicAuth_Apr) Reset()         { *m = BasicAuth_Apr{} }
func (m *BasicAuth_Apr) String() string { return proto.CompactTextString(m) }
func (*BasicAuth_Apr) ProtoMessage()    {}
func (*BasicAuth_Apr) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{6, 0}
}
func (m *BasicAuth_Apr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAuth_Apr.Unmarshal(m, b)
}
func (m *BasicAuth_Apr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAuth_Apr.Marshal(b, m, deterministic)
}
func (m *BasicAuth_Apr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth_Apr.Merge(m, src)
}
func (m *BasicAuth_Apr) XXX_Size() int {
	return xxx_messageInfo_BasicAuth_Apr.Size(m)
}
func (m *BasicAuth_Apr) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth_Apr.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth_Apr proto.InternalMessageInfo

func (m *BasicAuth_Apr) GetUsers() map[string]*BasicAuth_Apr_SaltedHashedPassword {
	if m != nil {
		return m.Users
	}
	return nil
}

type BasicAuth_Apr_SaltedHashedPassword struct {
	Salt                 string   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	HashedPassword       string   `protobuf:"bytes,2,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BasicAuth_Apr_SaltedHashedPassword) Reset()         { *m = BasicAuth_Apr_SaltedHashedPassword{} }
func (m *BasicAuth_Apr_SaltedHashedPassword) String() string { return proto.CompactTextString(m) }
func (*BasicAuth_Apr_SaltedHashedPassword) ProtoMessage()    {}
func (*BasicAuth_Apr_SaltedHashedPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{6, 0, 0}
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Unmarshal(m, b)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Marshal(b, m, deterministic)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Merge(m, src)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Size() int {
	return xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Size(m)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword proto.InternalMessageInfo

func (m *BasicAuth_Apr_SaltedHashedPassword) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *BasicAuth_Apr_SaltedHashedPassword) GetHashedPassword() string {
	if m != nil {
		return m.HashedPassword
	}
	return ""
}

type OAuth struct {
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer
	ClientSecretRef *core.ResourceRef `protobuf:"bytes,2,opt,name=client_secret_ref,json=clientSecretRef,proto3" json:"client_secret_ref,omitempty"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,4,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,5,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// Scopes to request in addition to openid scope.
	Scopes               []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuth) Reset()         { *m = OAuth{} }
func (m *OAuth) String() string { return proto.CompactTextString(m) }
func (*OAuth) ProtoMessage()    {}
func (*OAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{7}
}
func (m *OAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuth.Unmarshal(m, b)
}
func (m *OAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuth.Marshal(b, m, deterministic)
}
func (m *OAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth.Merge(m, src)
}
func (m *OAuth) XXX_Size() int {
	return xxx_messageInfo_OAuth.Size(m)
}
func (m *OAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth proto.InternalMessageInfo

func (m *OAuth) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *OAuth) GetClientSecretRef() *core.ResourceRef {
	if m != nil {
		return m.ClientSecretRef
	}
	return nil
}

func (m *OAuth) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

func (m *OAuth) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

func (m *OAuth) GetCallbackPath() string {
	if m != nil {
		return m.CallbackPath
	}
	return ""
}

func (m *OAuth) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type OauthSecret struct {
	ClientSecret         string   `protobuf:"bytes,1,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OauthSecret) Reset()         { *m = OauthSecret{} }
func (m *OauthSecret) String() string { return proto.CompactTextString(m) }
func (*OauthSecret) ProtoMessage()    {}
func (*OauthSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{8}
}
func (m *OauthSecret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OauthSecret.Unmarshal(m, b)
}
func (m *OauthSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OauthSecret.Marshal(b, m, deterministic)
}
func (m *OauthSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OauthSecret.Merge(m, src)
}
func (m *OauthSecret) XXX_Size() int {
	return xxx_messageInfo_OauthSecret.Size(m)
}
func (m *OauthSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_OauthSecret.DiscardUnknown(m)
}

var xxx_messageInfo_OauthSecret proto.InternalMessageInfo

func (m *OauthSecret) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

type ApiKeyAuth struct {
	// identify all valid apikey secrets using the provided label selector.
	// apikey secrets must be in gloo's watch namespaces for gloo to locate them
	LabelSelector map[string]string `protobuf:"bytes,1,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// a way to reference apikey secrets individually (good for testing); prefer apikey groups via label selector
	ApiKeySecretRefs     []*core.ResourceRef `protobuf:"bytes,2,rep,name=api_key_secret_refs,json=apiKeySecretRefs,proto3" json:"api_key_secret_refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ApiKeyAuth) Reset()         { *m = ApiKeyAuth{} }
func (m *ApiKeyAuth) String() string { return proto.CompactTextString(m) }
func (*ApiKeyAuth) ProtoMessage()    {}
func (*ApiKeyAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{9}
}
func (m *ApiKeyAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiKeyAuth.Unmarshal(m, b)
}
func (m *ApiKeyAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiKeyAuth.Marshal(b, m, deterministic)
}
func (m *ApiKeyAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiKeyAuth.Merge(m, src)
}
func (m *ApiKeyAuth) XXX_Size() int {
	return xxx_messageInfo_ApiKeyAuth.Size(m)
}
func (m *ApiKeyAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiKeyAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ApiKeyAuth proto.InternalMessageInfo

func (m *ApiKeyAuth) GetLabelSelector() map[string]string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *ApiKeyAuth) GetApiKeySecretRefs() []*core.ResourceRef {
	if m != nil {
		return m.ApiKeySecretRefs
	}
	return nil
}

type ApiKeySecret struct {
	// if true, generate an apikey
	GenerateApiKey bool `protobuf:"varint,1,opt,name=generate_api_key,json=generateApiKey,proto3" json:"generate_api_key,omitempty"`
	// if present, use the provided apikey
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// a list of labels (key=value) for the apikey secret.
	// virtual services may look for these labels using a provided label selector
	Labels               []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiKeySecret) Reset()         { *m = ApiKeySecret{} }
func (m *ApiKeySecret) String() string { return proto.CompactTextString(m) }
func (*ApiKeySecret) ProtoMessage()    {}
func (*ApiKeySecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{10}
}
func (m *ApiKeySecret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiKeySecret.Unmarshal(m, b)
}
func (m *ApiKeySecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiKeySecret.Marshal(b, m, deterministic)
}
func (m *ApiKeySecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiKeySecret.Merge(m, src)
}
func (m *ApiKeySecret) XXX_Size() int {
	return xxx_messageInfo_ApiKeySecret.Size(m)
}
func (m *ApiKeySecret) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiKeySecret.DiscardUnknown(m)
}

var xxx_messageInfo_ApiKeySecret proto.InternalMessageInfo

func (m *ApiKeySecret) GetGenerateApiKey() bool {
	if m != nil {
		return m.GenerateApiKey
	}
	return false
}

func (m *ApiKeySecret) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *ApiKeySecret) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type OpaAuth struct {
	// An optional resource reference to config maps containing modules to assist in the resolution of `query`.
	Modules []*core.ResourceRef `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	// The query that determines the auth decision. The result of this query must be either a boolean
	// or an array with boolean as the first element. A boolean `true` value means that the request
	// will be authorized. Any other value, or error, means that the request will be denied.
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpaAuth) Reset()         { *m = OpaAuth{} }
func (m *OpaAuth) String() string { return proto.CompactTextString(m) }
func (*OpaAuth) ProtoMessage()    {}
func (*OpaAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{11}
}
func (m *OpaAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpaAuth.Unmarshal(m, b)
}
func (m *OpaAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpaAuth.Marshal(b, m, deterministic)
}
func (m *OpaAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpaAuth.Merge(m, src)
}
func (m *OpaAuth) XXX_Size() int {
	return xxx_messageInfo_OpaAuth.Size(m)
}
func (m *OpaAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_OpaAuth.DiscardUnknown(m)
}

var xxx_messageInfo_OpaAuth proto.InternalMessageInfo

func (m *OpaAuth) GetModules() []*core.ResourceRef {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *OpaAuth) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type AuthConfig struct {
	// Types that are valid to be assigned to AuthConfig:
	//	*AuthConfig_BasicAuth
	//	*AuthConfig_Oauth
	//	*AuthConfig_CustomAuth
	//	*AuthConfig_ApiKeyAuth
	//	*AuthConfig_PluginAuth
	//	*AuthConfig_OpaAuth
	AuthConfig           isAuthConfig_AuthConfig `protobuf_oneof:"auth_config"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AuthConfig) Reset()         { *m = AuthConfig{} }
func (m *AuthConfig) String() string { return proto.CompactTextString(m) }
func (*AuthConfig) ProtoMessage()    {}
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{12}
}
func (m *AuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthConfig.Unmarshal(m, b)
}
func (m *AuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthConfig.Marshal(b, m, deterministic)
}
func (m *AuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfig.Merge(m, src)
}
func (m *AuthConfig) XXX_Size() int {
	return xxx_messageInfo_AuthConfig.Size(m)
}
func (m *AuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfig proto.InternalMessageInfo

type isAuthConfig_AuthConfig interface {
	isAuthConfig_AuthConfig()
	Equal(interface{}) bool
}

type AuthConfig_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}
type AuthConfig_Oauth struct {
	Oauth *OAuth `protobuf:"bytes,2,opt,name=oauth,proto3,oneof"`
}
type AuthConfig_CustomAuth struct {
	CustomAuth *CustomAuth `protobuf:"bytes,3,opt,name=custom_auth,json=customAuth,proto3,oneof"`
}
type AuthConfig_ApiKeyAuth struct {
	ApiKeyAuth *ApiKeyAuth `protobuf:"bytes,4,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}
type AuthConfig_PluginAuth struct {
	PluginAuth *AuthPlugin `protobuf:"bytes,5,opt,name=plugin_auth,json=pluginAuth,proto3,oneof"`
}
type AuthConfig_OpaAuth struct {
	OpaAuth *OpaAuth `protobuf:"bytes,6,opt,name=opa_auth,json=opaAuth,proto3,oneof"`
}

func (*AuthConfig_BasicAuth) isAuthConfig_AuthConfig()  {}
func (*AuthConfig_Oauth) isAuthConfig_AuthConfig()      {}
func (*AuthConfig_CustomAuth) isAuthConfig_AuthConfig() {}
func (*AuthConfig_ApiKeyAuth) isAuthConfig_AuthConfig() {}
func (*AuthConfig_PluginAuth) isAuthConfig_AuthConfig() {}
func (*AuthConfig_OpaAuth) isAuthConfig_AuthConfig()    {}

func (m *AuthConfig) GetAuthConfig() isAuthConfig_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *AuthConfig) GetBasicAuth() *BasicAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfig_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *AuthConfig) GetOauth() *OAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfig_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (m *AuthConfig) GetCustomAuth() *CustomAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfig_CustomAuth); ok {
		return x.CustomAuth
	}
	return nil
}

func (m *AuthConfig) GetApiKeyAuth() *ApiKeyAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfig_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (m *AuthConfig) GetPluginAuth() *AuthPlugin {
	if x, ok := m.GetAuthConfig().(*AuthConfig_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (m *AuthConfig) GetOpaAuth() *OpaAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfig_OpaAuth); ok {
		return x.OpaAuth
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuthConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuthConfig_OneofMarshaler, _AuthConfig_OneofUnmarshaler, _AuthConfig_OneofSizer, []interface{}{
		(*AuthConfig_BasicAuth)(nil),
		(*AuthConfig_Oauth)(nil),
		(*AuthConfig_CustomAuth)(nil),
		(*AuthConfig_ApiKeyAuth)(nil),
		(*AuthConfig_PluginAuth)(nil),
		(*AuthConfig_OpaAuth)(nil),
	}
}

func _AuthConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuthConfig)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *AuthConfig_BasicAuth:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicAuth); err != nil {
			return err
		}
	case *AuthConfig_Oauth:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oauth); err != nil {
			return err
		}
	case *AuthConfig_CustomAuth:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomAuth); err != nil {
			return err
		}
	case *AuthConfig_ApiKeyAuth:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiKeyAuth); err != nil {
			return err
		}
	case *AuthConfig_PluginAuth:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PluginAuth); err != nil {
			return err
		}
	case *AuthConfig_OpaAuth:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpaAuth); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthConfig.AuthConfig has unexpected type %T", x)
	}
	return nil
}

func _AuthConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuthConfig)
	switch tag {
	case 1: // auth_config.basic_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &AuthConfig_BasicAuth{msg}
		return true, err
	case 2: // auth_config.oauth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &AuthConfig_Oauth{msg}
		return true, err
	case 3: // auth_config.custom_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &AuthConfig_CustomAuth{msg}
		return true, err
	case 4: // auth_config.api_key_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApiKeyAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &AuthConfig_ApiKeyAuth{msg}
		return true, err
	case 5: // auth_config.plugin_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthPlugin)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &AuthConfig_PluginAuth{msg}
		return true, err
	case 6: // auth_config.opa_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpaAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &AuthConfig_OpaAuth{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuthConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuthConfig)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *AuthConfig_BasicAuth:
		s := proto.Size(x.BasicAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthConfig_Oauth:
		s := proto.Size(x.Oauth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthConfig_CustomAuth:
		s := proto.Size(x.CustomAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthConfig_ApiKeyAuth:
		s := proto.Size(x.ApiKeyAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthConfig_PluginAuth:
		s := proto.Size(x.PluginAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthConfig_OpaAuth:
		s := proto.Size(x.OpaAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VhostExtension struct {
	// Types that are valid to be assigned to AuthConfig:
	//	*VhostExtension_BasicAuth
	//	*VhostExtension_Oauth
	//	*VhostExtension_CustomAuth
	//	*VhostExtension_ApiKeyAuth
	//	*VhostExtension_PluginAuth
	AuthConfig isVhostExtension_AuthConfig `protobuf_oneof:"auth_config"`
	// A chain of AuthN\AuthZ configurations which will be executed in the order they are specified. The first plugin to deny a request will
	// cause a 403 response to be returned; any subsequent plugin in the chain will not be executed.
	// The headers on the OkHttpResponse returned from a plugin in the chain will be added to the request that will be sent
	// to the next one(s) according to the rules described here:
	// https://www.envoyproxy.io/docs/envoy/latest/api-v2/service/auth/v2/external_auth.proto#service-auth-v2-okhttpresponse
	Configs              []*AuthConfig `protobuf:"bytes,6,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VhostExtension) Reset()         { *m = VhostExtension{} }
func (m *VhostExtension) String() string { return proto.CompactTextString(m) }
func (*VhostExtension) ProtoMessage()    {}
func (*VhostExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{13}
}
func (m *VhostExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VhostExtension.Unmarshal(m, b)
}
func (m *VhostExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VhostExtension.Marshal(b, m, deterministic)
}
func (m *VhostExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VhostExtension.Merge(m, src)
}
func (m *VhostExtension) XXX_Size() int {
	return xxx_messageInfo_VhostExtension.Size(m)
}
func (m *VhostExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_VhostExtension.DiscardUnknown(m)
}

var xxx_messageInfo_VhostExtension proto.InternalMessageInfo

type isVhostExtension_AuthConfig interface {
	isVhostExtension_AuthConfig()
	Equal(interface{}) bool
}

type VhostExtension_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}
type VhostExtension_Oauth struct {
	Oauth *OAuth `protobuf:"bytes,2,opt,name=oauth,proto3,oneof"`
}
type VhostExtension_CustomAuth struct {
	CustomAuth *CustomAuth `protobuf:"bytes,3,opt,name=custom_auth,json=customAuth,proto3,oneof"`
}
type VhostExtension_ApiKeyAuth struct {
	ApiKeyAuth *ApiKeyAuth `protobuf:"bytes,4,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}
type VhostExtension_PluginAuth struct {
	PluginAuth *PluginAuth `protobuf:"bytes,5,opt,name=plugin_auth,json=pluginAuth,proto3,oneof"`
}

func (*VhostExtension_BasicAuth) isVhostExtension_AuthConfig()  {}
func (*VhostExtension_Oauth) isVhostExtension_AuthConfig()      {}
func (*VhostExtension_CustomAuth) isVhostExtension_AuthConfig() {}
func (*VhostExtension_ApiKeyAuth) isVhostExtension_AuthConfig() {}
func (*VhostExtension_PluginAuth) isVhostExtension_AuthConfig() {}

func (m *VhostExtension) GetAuthConfig() isVhostExtension_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *VhostExtension) GetBasicAuth() *BasicAuth {
	if x, ok := m.GetAuthConfig().(*VhostExtension_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *VhostExtension) GetOauth() *OAuth {
	if x, ok := m.GetAuthConfig().(*VhostExtension_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (m *VhostExtension) GetCustomAuth() *CustomAuth {
	if x, ok := m.GetAuthConfig().(*VhostExtension_CustomAuth); ok {
		return x.CustomAuth
	}
	return nil
}

func (m *VhostExtension) GetApiKeyAuth() *ApiKeyAuth {
	if x, ok := m.GetAuthConfig().(*VhostExtension_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (m *VhostExtension) GetPluginAuth() *PluginAuth {
	if x, ok := m.GetAuthConfig().(*VhostExtension_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (m *VhostExtension) GetConfigs() []*AuthConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VhostExtension) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VhostExtension_OneofMarshaler, _VhostExtension_OneofUnmarshaler, _VhostExtension_OneofSizer, []interface{}{
		(*VhostExtension_BasicAuth)(nil),
		(*VhostExtension_Oauth)(nil),
		(*VhostExtension_CustomAuth)(nil),
		(*VhostExtension_ApiKeyAuth)(nil),
		(*VhostExtension_PluginAuth)(nil),
	}
}

func _VhostExtension_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VhostExtension)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *VhostExtension_BasicAuth:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicAuth); err != nil {
			return err
		}
	case *VhostExtension_Oauth:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oauth); err != nil {
			return err
		}
	case *VhostExtension_CustomAuth:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomAuth); err != nil {
			return err
		}
	case *VhostExtension_ApiKeyAuth:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiKeyAuth); err != nil {
			return err
		}
	case *VhostExtension_PluginAuth:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PluginAuth); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VhostExtension.AuthConfig has unexpected type %T", x)
	}
	return nil
}

func _VhostExtension_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VhostExtension)
	switch tag {
	case 1: // auth_config.basic_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &VhostExtension_BasicAuth{msg}
		return true, err
	case 2: // auth_config.oauth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &VhostExtension_Oauth{msg}
		return true, err
	case 3: // auth_config.custom_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &VhostExtension_CustomAuth{msg}
		return true, err
	case 4: // auth_config.api_key_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApiKeyAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &VhostExtension_ApiKeyAuth{msg}
		return true, err
	case 5: // auth_config.plugin_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PluginAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &VhostExtension_PluginAuth{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VhostExtension_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VhostExtension)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *VhostExtension_BasicAuth:
		s := proto.Size(x.BasicAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VhostExtension_Oauth:
		s := proto.Size(x.Oauth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VhostExtension_CustomAuth:
		s := proto.Size(x.CustomAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VhostExtension_ApiKeyAuth:
		s := proto.Size(x.ApiKeyAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VhostExtension_PluginAuth:
		s := proto.Size(x.PluginAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RouteExtension struct {
	Disable              bool     `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteExtension) Reset()         { *m = RouteExtension{} }
func (m *RouteExtension) String() string { return proto.CompactTextString(m) }
func (*RouteExtension) ProtoMessage()    {}
func (*RouteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{14}
}
func (m *RouteExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteExtension.Unmarshal(m, b)
}
func (m *RouteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteExtension.Marshal(b, m, deterministic)
}
func (m *RouteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteExtension.Merge(m, src)
}
func (m *RouteExtension) XXX_Size() int {
	return xxx_messageInfo_RouteExtension.Size(m)
}
func (m *RouteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_RouteExtension proto.InternalMessageInfo

func (m *RouteExtension) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

//
//@solo-kit:xds-service=ExtAuthDiscoveryService
//@solo-kit:resource.no_references
type ExtAuthConfig struct {
	// @solo-kit:resource.name
	Vhost string `protobuf:"bytes,1,opt,name=vhost,proto3" json:"vhost,omitempty"`
	// Deprecated
	//
	// Types that are valid to be assigned to AuthConfig:
	//	*ExtAuthConfig_Oauth
	//	*ExtAuthConfig_BasicAuth
	//	*ExtAuthConfig_ApiKeyAuth
	//	*ExtAuthConfig_PluginAuth
	AuthConfig           isExtAuthConfig_AuthConfig  `protobuf_oneof:"auth_config"`
	Configs              []*ExtAuthConfig_AuthConfig `protobuf:"bytes,8,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ExtAuthConfig) Reset()         { *m = ExtAuthConfig{} }
func (m *ExtAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{15}
}
func (m *ExtAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig.Size(m)
}
func (m *ExtAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig proto.InternalMessageInfo

type isExtAuthConfig_AuthConfig interface {
	isExtAuthConfig_AuthConfig()
	Equal(interface{}) bool
}

type ExtAuthConfig_Oauth struct {
	Oauth *ExtAuthConfig_OAuthConfig `protobuf:"bytes,3,opt,name=oauth,proto3,oneof"`
}
type ExtAuthConfig_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}
type ExtAuthConfig_ApiKeyAuth struct {
	ApiKeyAuth *ExtAuthConfig_ApiKeyAuthConfig `protobuf:"bytes,5,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}
type ExtAuthConfig_PluginAuth struct {
	PluginAuth *PluginAuth `protobuf:"bytes,6,opt,name=plugin_auth,json=pluginAuth,proto3,oneof"`
}

func (*ExtAuthConfig_Oauth) isExtAuthConfig_AuthConfig()      {}
func (*ExtAuthConfig_BasicAuth) isExtAuthConfig_AuthConfig()  {}
func (*ExtAuthConfig_ApiKeyAuth) isExtAuthConfig_AuthConfig() {}
func (*ExtAuthConfig_PluginAuth) isExtAuthConfig_AuthConfig() {}

func (m *ExtAuthConfig) GetAuthConfig() isExtAuthConfig_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *ExtAuthConfig) GetVhost() string {
	if m != nil {
		return m.Vhost
	}
	return ""
}

func (m *ExtAuthConfig) GetOauth() *ExtAuthConfig_OAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (m *ExtAuthConfig) GetBasicAuth() *BasicAuth {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *ExtAuthConfig) GetApiKeyAuth() *ExtAuthConfig_ApiKeyAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (m *ExtAuthConfig) GetPluginAuth() *PluginAuth {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (m *ExtAuthConfig) GetConfigs() []*ExtAuthConfig_AuthConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExtAuthConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExtAuthConfig_OneofMarshaler, _ExtAuthConfig_OneofUnmarshaler, _ExtAuthConfig_OneofSizer, []interface{}{
		(*ExtAuthConfig_Oauth)(nil),
		(*ExtAuthConfig_BasicAuth)(nil),
		(*ExtAuthConfig_ApiKeyAuth)(nil),
		(*ExtAuthConfig_PluginAuth)(nil),
	}
}

func _ExtAuthConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExtAuthConfig)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *ExtAuthConfig_Oauth:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oauth); err != nil {
			return err
		}
	case *ExtAuthConfig_BasicAuth:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicAuth); err != nil {
			return err
		}
	case *ExtAuthConfig_ApiKeyAuth:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiKeyAuth); err != nil {
			return err
		}
	case *ExtAuthConfig_PluginAuth:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PluginAuth); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExtAuthConfig.AuthConfig has unexpected type %T", x)
	}
	return nil
}

func _ExtAuthConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExtAuthConfig)
	switch tag {
	case 3: // auth_config.oauth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtAuthConfig_OAuthConfig)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_Oauth{msg}
		return true, err
	case 4: // auth_config.basic_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_BasicAuth{msg}
		return true, err
	case 5: // auth_config.api_key_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtAuthConfig_ApiKeyAuthConfig)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_ApiKeyAuth{msg}
		return true, err
	case 6: // auth_config.plugin_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PluginAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_PluginAuth{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExtAuthConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExtAuthConfig)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *ExtAuthConfig_Oauth:
		s := proto.Size(x.Oauth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_BasicAuth:
		s := proto.Size(x.BasicAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_ApiKeyAuth:
		s := proto.Size(x.ApiKeyAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_PluginAuth:
		s := proto.Size(x.PluginAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExtAuthConfig_OAuthConfig struct {
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,4,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,5,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// scopes to request in addition to the openid scope.
	Scopes               []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtAuthConfig_OAuthConfig) Reset()         { *m = ExtAuthConfig_OAuthConfig{} }
func (m *ExtAuthConfig_OAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_OAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_OAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{15, 0}
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_OAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_OAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_OAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_OAuthConfig.Size(m)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_OAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_OAuthConfig proto.InternalMessageInfo

func (m *ExtAuthConfig_OAuthConfig) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ExtAuthConfig_OAuthConfig) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *ExtAuthConfig_OAuthConfig) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

func (m *ExtAuthConfig_OAuthConfig) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

func (m *ExtAuthConfig_OAuthConfig) GetCallbackPath() string {
	if m != nil {
		return m.CallbackPath
	}
	return ""
}

func (m *ExtAuthConfig_OAuthConfig) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type ExtAuthConfig_ApiKeyAuthConfig struct {
	// a map of valid apikeys to their associated plaintext users.
	ValidApiKeyAndUser   map[string]string `protobuf:"bytes,1,rep,name=valid_api_key_and_user,json=validApiKeyAndUser,proto3" json:"valid_api_key_and_user,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExtAuthConfig_ApiKeyAuthConfig) Reset()         { *m = ExtAuthConfig_ApiKeyAuthConfig{} }
func (m *ExtAuthConfig_ApiKeyAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_ApiKeyAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_ApiKeyAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{15, 1}
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Size(m)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig proto.InternalMessageInfo

func (m *ExtAuthConfig_ApiKeyAuthConfig) GetValidApiKeyAndUser() map[string]string {
	if m != nil {
		return m.ValidApiKeyAndUser
	}
	return nil
}

type ExtAuthConfig_OpaAuthConfig struct {
	// An optional modules (filename, module content) maps containing modules assist in the resolution of `query`.
	Modules map[string]string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The query that determines the auth decision. The result of this query must be either a boolean
	// or an array with boolean as the first element. A boolean `true` value means that the request
	// will be authorized. Any other value, or error, means that the request will be denied.
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtAuthConfig_OpaAuthConfig) Reset()         { *m = ExtAuthConfig_OpaAuthConfig{} }
func (m *ExtAuthConfig_OpaAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_OpaAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_OpaAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{15, 2}
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Size(m)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_OpaAuthConfig proto.InternalMessageInfo

func (m *ExtAuthConfig_OpaAuthConfig) GetModules() map[string]string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *ExtAuthConfig_OpaAuthConfig) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ExtAuthConfig_AuthConfig struct {
	// Types that are valid to be assigned to AuthConfig:
	//	*ExtAuthConfig_AuthConfig_Oauth
	//	*ExtAuthConfig_AuthConfig_BasicAuth
	//	*ExtAuthConfig_AuthConfig_ApiKeyAuth
	//	*ExtAuthConfig_AuthConfig_PluginAuth
	//	*ExtAuthConfig_AuthConfig_OpaAuth
	AuthConfig           isExtAuthConfig_AuthConfig_AuthConfig `protobuf_oneof:"auth_config"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ExtAuthConfig_AuthConfig) Reset()         { *m = ExtAuthConfig_AuthConfig{} }
func (m *ExtAuthConfig_AuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_AuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_AuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef22622203c04f0, []int{15, 3}
}
func (m *ExtAuthConfig_AuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_AuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_AuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_AuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_AuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_AuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_AuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_AuthConfig.Size(m)
}
func (m *ExtAuthConfig_AuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_AuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_AuthConfig proto.InternalMessageInfo

type isExtAuthConfig_AuthConfig_AuthConfig interface {
	isExtAuthConfig_AuthConfig_AuthConfig()
	Equal(interface{}) bool
}

type ExtAuthConfig_AuthConfig_Oauth struct {
	Oauth *ExtAuthConfig_OAuthConfig `protobuf:"bytes,3,opt,name=oauth,proto3,oneof"`
}
type ExtAuthConfig_AuthConfig_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}
type ExtAuthConfig_AuthConfig_ApiKeyAuth struct {
	ApiKeyAuth *ExtAuthConfig_ApiKeyAuthConfig `protobuf:"bytes,5,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}
type ExtAuthConfig_AuthConfig_PluginAuth struct {
	PluginAuth *AuthPlugin `protobuf:"bytes,6,opt,name=plugin_auth,json=pluginAuth,proto3,oneof"`
}
type ExtAuthConfig_AuthConfig_OpaAuth struct {
	OpaAuth *ExtAuthConfig_OpaAuthConfig `protobuf:"bytes,7,opt,name=opa_auth,json=opaAuth,proto3,oneof"`
}

func (*ExtAuthConfig_AuthConfig_Oauth) isExtAuthConfig_AuthConfig_AuthConfig()      {}
func (*ExtAuthConfig_AuthConfig_BasicAuth) isExtAuthConfig_AuthConfig_AuthConfig()  {}
func (*ExtAuthConfig_AuthConfig_ApiKeyAuth) isExtAuthConfig_AuthConfig_AuthConfig() {}
func (*ExtAuthConfig_AuthConfig_PluginAuth) isExtAuthConfig_AuthConfig_AuthConfig() {}
func (*ExtAuthConfig_AuthConfig_OpaAuth) isExtAuthConfig_AuthConfig_AuthConfig()    {}

func (m *ExtAuthConfig_AuthConfig) GetAuthConfig() isExtAuthConfig_AuthConfig_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *ExtAuthConfig_AuthConfig) GetOauth() *ExtAuthConfig_OAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_AuthConfig_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (m *ExtAuthConfig_AuthConfig) GetBasicAuth() *BasicAuth {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_AuthConfig_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *ExtAuthConfig_AuthConfig) GetApiKeyAuth() *ExtAuthConfig_ApiKeyAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_AuthConfig_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (m *ExtAuthConfig_AuthConfig) GetPluginAuth() *AuthPlugin {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_AuthConfig_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (m *ExtAuthConfig_AuthConfig) GetOpaAuth() *ExtAuthConfig_OpaAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_AuthConfig_OpaAuth); ok {
		return x.OpaAuth
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExtAuthConfig_AuthConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExtAuthConfig_AuthConfig_OneofMarshaler, _ExtAuthConfig_AuthConfig_OneofUnmarshaler, _ExtAuthConfig_AuthConfig_OneofSizer, []interface{}{
		(*ExtAuthConfig_AuthConfig_Oauth)(nil),
		(*ExtAuthConfig_AuthConfig_BasicAuth)(nil),
		(*ExtAuthConfig_AuthConfig_ApiKeyAuth)(nil),
		(*ExtAuthConfig_AuthConfig_PluginAuth)(nil),
		(*ExtAuthConfig_AuthConfig_OpaAuth)(nil),
	}
}

func _ExtAuthConfig_AuthConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExtAuthConfig_AuthConfig)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *ExtAuthConfig_AuthConfig_Oauth:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oauth); err != nil {
			return err
		}
	case *ExtAuthConfig_AuthConfig_BasicAuth:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicAuth); err != nil {
			return err
		}
	case *ExtAuthConfig_AuthConfig_ApiKeyAuth:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiKeyAuth); err != nil {
			return err
		}
	case *ExtAuthConfig_AuthConfig_PluginAuth:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PluginAuth); err != nil {
			return err
		}
	case *ExtAuthConfig_AuthConfig_OpaAuth:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpaAuth); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExtAuthConfig_AuthConfig.AuthConfig has unexpected type %T", x)
	}
	return nil
}

func _ExtAuthConfig_AuthConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExtAuthConfig_AuthConfig)
	switch tag {
	case 3: // auth_config.oauth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtAuthConfig_OAuthConfig)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_AuthConfig_Oauth{msg}
		return true, err
	case 4: // auth_config.basic_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicAuth)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_AuthConfig_BasicAuth{msg}
		return true, err
	case 5: // auth_config.api_key_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtAuthConfig_ApiKeyAuthConfig)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_AuthConfig_ApiKeyAuth{msg}
		return true, err
	case 6: // auth_config.plugin_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthPlugin)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_AuthConfig_PluginAuth{msg}
		return true, err
	case 7: // auth_config.opa_auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtAuthConfig_OpaAuthConfig)
		err := b.DecodeMessage(msg)
		m.AuthConfig = &ExtAuthConfig_AuthConfig_OpaAuth{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExtAuthConfig_AuthConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExtAuthConfig_AuthConfig)
	// auth_config
	switch x := m.AuthConfig.(type) {
	case *ExtAuthConfig_AuthConfig_Oauth:
		s := proto.Size(x.Oauth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_AuthConfig_BasicAuth:
		s := proto.Size(x.BasicAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_AuthConfig_ApiKeyAuth:
		s := proto.Size(x.ApiKeyAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_AuthConfig_PluginAuth:
		s := proto.Size(x.PluginAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExtAuthConfig_AuthConfig_OpaAuth:
		s := proto.Size(x.OpaAuth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Settings)(nil), "extauth.plugins.gloo.solo.io.Settings")
	proto.RegisterType((*HttpService)(nil), "extauth.plugins.gloo.solo.io.HttpService")
	proto.RegisterType((*HttpService_Request)(nil), "extauth.plugins.gloo.solo.io.HttpService.Request")
	proto.RegisterMapType((map[string]string)(nil), "extauth.plugins.gloo.solo.io.HttpService.Request.HeadersToAddEntry")
	proto.RegisterType((*HttpService_Response)(nil), "extauth.plugins.gloo.solo.io.HttpService.Response")
	proto.RegisterType((*BufferSettings)(nil), "extauth.plugins.gloo.solo.io.BufferSettings")
	proto.RegisterType((*CustomAuth)(nil), "extauth.plugins.gloo.solo.io.CustomAuth")
	proto.RegisterType((*PluginAuth)(nil), "extauth.plugins.gloo.solo.io.PluginAuth")
	proto.RegisterType((*AuthPlugin)(nil), "extauth.plugins.gloo.solo.io.AuthPlugin")
	proto.RegisterType((*BasicAuth)(nil), "extauth.plugins.gloo.solo.io.BasicAuth")
	proto.RegisterType((*BasicAuth_Apr)(nil), "extauth.plugins.gloo.solo.io.BasicAuth.Apr")
	proto.RegisterMapType((map[string]*BasicAuth_Apr_SaltedHashedPassword)(nil), "extauth.plugins.gloo.solo.io.BasicAuth.Apr.UsersEntry")
	proto.RegisterType((*BasicAuth_Apr_SaltedHashedPassword)(nil), "extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword")
	proto.RegisterType((*OAuth)(nil), "extauth.plugins.gloo.solo.io.OAuth")
	proto.RegisterType((*OauthSecret)(nil), "extauth.plugins.gloo.solo.io.OauthSecret")
	proto.RegisterType((*ApiKeyAuth)(nil), "extauth.plugins.gloo.solo.io.ApiKeyAuth")
	proto.RegisterMapType((map[string]string)(nil), "extauth.plugins.gloo.solo.io.ApiKeyAuth.LabelSelectorEntry")
	proto.RegisterType((*ApiKeySecret)(nil), "extauth.plugins.gloo.solo.io.ApiKeySecret")
	proto.RegisterType((*OpaAuth)(nil), "extauth.plugins.gloo.solo.io.OpaAuth")
	proto.RegisterType((*AuthConfig)(nil), "extauth.plugins.gloo.solo.io.AuthConfig")
	proto.RegisterType((*VhostExtension)(nil), "extauth.plugins.gloo.solo.io.VhostExtension")
	proto.RegisterType((*RouteExtension)(nil), "extauth.plugins.gloo.solo.io.RouteExtension")
	proto.RegisterType((*ExtAuthConfig)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig")
	proto.RegisterType((*ExtAuthConfig_OAuthConfig)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig")
	proto.RegisterType((*ExtAuthConfig_ApiKeyAuthConfig)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig")
	proto.RegisterMapType((map[string]string)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.ValidApiKeyAndUserEntry")
	proto.RegisterType((*ExtAuthConfig_OpaAuthConfig)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig")
	proto.RegisterMapType((map[string]string)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.ModulesEntry")
	proto.RegisterType((*ExtAuthConfig_AuthConfig)(nil), "extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins/extauth/extauth.proto", fileDescriptor_7ef22622203c04f0)
}

var fileDescriptor_7ef22622203c04f0 = []byte{
	// 1754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xcf, 0x48, 0xb6, 0x25, 0x3d, 0xc9, 0x8a, 0xd3, 0x31, 0x89, 0xd0, 0x2e, 0x89, 0x4b, 0x59,
	0x58, 0x13, 0xc2, 0x68, 0x57, 0x4b, 0xc1, 0x92, 0x85, 0x22, 0x76, 0xe2, 0x94, 0x42, 0x92, 0xb5,
	0x6b, 0x94, 0xe4, 0x40, 0x51, 0x35, 0xdb, 0x9a, 0x69, 0x49, 0x83, 0x47, 0xd3, 0xb3, 0xdd, 0x3d,
	0x5e, 0x2b, 0x55, 0x5c, 0x28, 0xaa, 0xe0, 0x0c, 0x17, 0x3e, 0x00, 0x87, 0xbd, 0xf0, 0x11, 0x38,
	0xc1, 0x99, 0x03, 0x9c, 0xf9, 0x53, 0xd4, 0x7e, 0x0c, 0x0e, 0x54, 0xff, 0xd3, 0xdf, 0x58, 0xb6,
	0x08, 0x14, 0x97, 0x9c, 0x34, 0xdd, 0xef, 0xbd, 0x5f, 0xf7, 0x7b, 0xbf, 0xd7, 0xef, 0xb5, 0x1a,
	0x7e, 0xd8, 0x8f, 0xc4, 0x20, 0xeb, 0xba, 0x01, 0x1d, 0x36, 0x39, 0x8d, 0xe9, 0x37, 0x23, 0xda,
	0xec, 0xc7, 0x94, 0x36, 0x53, 0x46, 0x7f, 0x42, 0x02, 0xc1, 0xf5, 0x08, 0xa7, 0x51, 0xf3, 0xe4,
	0xfd, 0x66, 0x1a, 0x67, 0xfd, 0x28, 0xe1, 0x4d, 0x72, 0x2a, 0x70, 0x26, 0x06, 0xf6, 0xd7, 0x4d,
	0x19, 0x15, 0x14, 0xbd, 0x3d, 0x1e, 0x6a, 0x35, 0x57, 0x9a, 0xba, 0x12, 0xd5, 0x8d, 0x68, 0xfd,
	0xce, 0x2b, 0x56, 0x52, 0xbf, 0xc7, 0x91, 0xb0, 0xf8, 0x8c, 0xf4, 0x34, 0x56, 0x7d, 0xbb, 0x4f,
	0xfb, 0x54, 0x7d, 0x36, 0xe5, 0x97, 0x99, 0x7d, 0x9b, 0x24, 0x27, 0x74, 0xa4, 0xb5, 0x5b, 0xcd,
	0x30, 0xe2, 0x01, 0x3d, 0x21, 0x6c, 0x64, 0xa5, 0x7d, 0x4a, 0xfb, 0x31, 0x51, 0x62, 0x9c, 0x24,
	0x54, 0x60, 0x11, 0xd1, 0x84, 0x1b, 0xe9, 0x0d, 0x23, 0x55, 0xa3, 0x6e, 0xd6, 0x6b, 0x86, 0x19,
	0x53, 0x0a, 0x73, 0xd6, 0x63, 0x39, 0x17, 0x2c, 0x0b, 0x84, 0x96, 0x36, 0x7e, 0x95, 0x87, 0x62,
	0x87, 0x08, 0x11, 0x25, 0x7d, 0x8e, 0x1e, 0xc1, 0x55, 0xe3, 0xea, 0x4b, 0x9f, 0x13, 0x76, 0x42,
	0x98, 0xcf, 0x48, 0xaf, 0xe6, 0xec, 0x38, 0xbb, 0xe5, 0xd6, 0x97, 0xdd, 0x80, 0x32, 0x62, 0xdd,
	0x76, 0x3d, 0xc2, 0x69, 0xc6, 0x02, 0xe2, 0x91, 0x9e, 0x77, 0xc5, 0x5a, 0x75, 0x94, 0x91, 0x47,
	0x7a, 0xe8, 0x09, 0x54, 0x06, 0x42, 0xa4, 0x0a, 0x26, 0x0a, 0x48, 0x2d, 0xa7, 0x30, 0xbe, 0xee,
	0x2e, 0x0b, 0xa5, 0xdb, 0x16, 0x22, 0xed, 0x68, 0x03, 0xaf, 0x3c, 0x98, 0x0c, 0xd0, 0x3b, 0x50,
	0xcd, 0x38, 0x61, 0x7e, 0x14, 0xfa, 0x03, 0x82, 0x43, 0xc2, 0x6a, 0xf9, 0x1d, 0x67, 0xb7, 0xe4,
	0x55, 0xe4, 0xec, 0xa3, 0xb0, 0xad, 0xe6, 0x50, 0x1b, 0x2e, 0x33, 0xf2, 0x69, 0x46, 0xb8, 0xf0,
	0x45, 0x34, 0x24, 0x34, 0x13, 0xb5, 0x35, 0xb3, 0x75, 0x1d, 0x03, 0xd7, 0xc6, 0xc0, 0x7d, 0x60,
	0x62, 0xb4, 0xbf, 0xf6, 0x9b, 0xbf, 0xdf, 0x74, 0xbc, 0xaa, 0xb1, 0x7b, 0xa6, 0xcd, 0xd0, 0x1d,
	0x40, 0x3d, 0x1c, 0xc5, 0x19, 0x23, 0xfe, 0x90, 0x86, 0xc4, 0xc7, 0x71, 0x4c, 0x3f, 0xab, 0xad,
	0xef, 0x38, 0xbb, 0x45, 0x6f, 0xcb, 0x48, 0x9e, 0xd2, 0x90, 0xec, 0xc9, 0x79, 0x74, 0x08, 0x15,
	0xbb, 0x6e, 0x97, 0x86, 0xa3, 0xda, 0x86, 0x5a, 0xf4, 0xce, 0x72, 0x5f, 0xf7, 0xb3, 0x5e, 0x8f,
	0x30, 0x1b, 0x7a, 0xaf, 0x6c, 0x10, 0xf6, 0x69, 0x38, 0x6a, 0x7c, 0xbe, 0x06, 0xe5, 0xa9, 0x58,
	0xa0, 0x9b, 0x50, 0x4e, 0xb1, 0x18, 0xf8, 0x29, 0x23, 0xbd, 0xe8, 0x54, 0xf1, 0x51, 0xf2, 0x40,
	0x4e, 0x1d, 0xa9, 0x19, 0xf4, 0x18, 0x0a, 0xc6, 0xde, 0x04, 0xfa, 0xfd, 0x0b, 0x07, 0xda, 0xf5,
	0xb4, 0xa1, 0x67, 0x11, 0xd0, 0xc7, 0x50, 0x64, 0x84, 0xa7, 0x34, 0xe1, 0x44, 0x85, 0xb9, 0xdc,
	0x6a, 0xad, 0x82, 0xa6, 0x2d, 0xbd, 0x31, 0x46, 0xfd, 0x6f, 0x0e, 0x14, 0xcc, 0x22, 0xe8, 0x5d,
	0xb8, 0xac, 0x62, 0x49, 0x2c, 0x91, 0xbc, 0xe6, 0xec, 0xe4, 0x77, 0x4b, 0x5e, 0xd5, 0x4c, 0x6b,
	0x2a, 0x39, 0x8a, 0xa0, 0x6a, 0x14, 0x7c, 0x41, 0x7d, 0x1c, 0x86, 0xb5, 0xdc, 0x4e, 0x7e, 0xb7,
	0xdc, 0xba, 0xbf, 0xb2, 0x63, 0xae, 0x81, 0x7c, 0x46, 0xf7, 0xc2, 0xf0, 0x20, 0x11, 0x6c, 0xe4,
	0x55, 0x06, 0x53, 0x53, 0xf5, 0x1f, 0xc0, 0x95, 0x05, 0x15, 0xb4, 0x05, 0xf9, 0x63, 0x32, 0x32,
	0xa1, 0x96, 0x9f, 0x68, 0x1b, 0xd6, 0x4f, 0x70, 0x9c, 0xe9, 0x54, 0x2e, 0x79, 0x7a, 0x70, 0x37,
	0xf7, 0xa1, 0x53, 0x7f, 0x09, 0x45, 0xeb, 0x36, 0xfa, 0x10, 0x6a, 0xd6, 0xc1, 0x2c, 0xe5, 0x82,
	0x11, 0x3c, 0x9c, 0xf3, 0xf4, 0x9a, 0x91, 0x3f, 0x37, 0x62, 0xeb, 0xf1, 0xb7, 0xc0, 0x4a, 0xfc,
	0x20, 0x8e, 0x48, 0x22, 0xc6, 0x76, 0x39, 0x65, 0xb7, 0x6d, 0xa4, 0xf7, 0x95, 0xd0, 0x58, 0x35,
	0x52, 0xa8, 0xce, 0x66, 0x12, 0xba, 0x0d, 0x57, 0x86, 0xf8, 0xd4, 0x1f, 0x67, 0xe4, 0x48, 0x10,
	0xae, 0xfc, 0xd8, 0xf4, 0x2e, 0x0f, 0xf1, 0xa9, 0x89, 0xca, 0xbe, 0x9c, 0x46, 0x2d, 0xf8, 0x92,
	0x42, 0xf5, 0x53, 0xcc, 0x44, 0x84, 0x63, 0x7f, 0x48, 0x38, 0xc7, 0x7d, 0xed, 0x63, 0xd1, 0xbb,
	0xaa, 0x84, 0x47, 0x5a, 0xf6, 0x54, 0x8b, 0x1a, 0x15, 0x80, 0xfb, 0x19, 0x17, 0x74, 0xb8, 0x97,
	0x89, 0x41, 0xe3, 0x08, 0xe0, 0x48, 0x11, 0x21, 0x47, 0x68, 0x1f, 0x0a, 0x86, 0x16, 0xe5, 0x6c,
	0xb9, 0xb5, 0xbb, 0x9c, 0x2e, 0x69, 0xa4, 0xcd, 0x3d, 0x6b, 0xd8, 0xf8, 0x9d, 0x03, 0x30, 0x99,
	0x47, 0x08, 0xd6, 0x12, 0x3c, 0x24, 0x86, 0x09, 0xf5, 0x8d, 0x76, 0x61, 0x4b, 0x6b, 0xfb, 0xbd,
	0x28, 0x26, 0xbe, 0x92, 0x6b, 0x56, 0xaa, 0x7a, 0xfe, 0x61, 0x14, 0x93, 0x8f, 0xa5, 0xe6, 0x7b,
	0xb0, 0x4d, 0x4e, 0x53, 0xca, 0x04, 0x09, 0x7d, 0x3e, 0x1a, 0x76, 0x69, 0xac, 0xb5, 0x75, 0xf9,
	0x40, 0x56, 0xd6, 0x51, 0x22, 0x65, 0xd1, 0x84, 0x8d, 0x80, 0x26, 0xbd, 0xa8, 0x6f, 0x6a, 0xc7,
	0xf5, 0x85, 0xda, 0xd1, 0x51, 0xf5, 0xd3, 0x33, 0x6a, 0x8d, 0x5f, 0xe4, 0xa1, 0xb4, 0x8f, 0x79,
	0x14, 0xa8, 0x08, 0x6c, 0xc3, 0x3a, 0x23, 0x38, 0x1e, 0x9a, 0xfd, 0xea, 0x01, 0xfa, 0x3e, 0xe4,
	0x71, 0xca, 0xcc, 0xd9, 0xfc, 0xc6, 0x39, 0x85, 0xc1, 0x62, 0xb9, 0x7b, 0x29, 0xf3, 0xa4, 0x5d,
	0xfd, 0xb7, 0x39, 0xc8, 0xef, 0xa5, 0x0c, 0x3d, 0x81, 0x75, 0x59, 0xf0, 0xb8, 0x39, 0x0b, 0xdf,
	0x5e, 0x01, 0xc8, 0x7d, 0x2e, 0x0d, 0x75, 0xfa, 0x6b, 0x90, 0x7a, 0x07, 0xb6, 0x3b, 0x38, 0x16,
	0x24, 0x6c, 0x63, 0x3e, 0x20, 0xe1, 0x11, 0xe6, 0xfc, 0x33, 0xca, 0x42, 0x19, 0x71, 0x8e, 0x63,
	0x61, 0x23, 0x2e, 0xbf, 0xe5, 0xb9, 0x1d, 0x28, 0x2d, 0x3f, 0x35, 0x6a, 0x36, 0xe0, 0x83, 0x19,
	0xe3, 0xfa, 0x4b, 0x80, 0xc9, 0x4a, 0xaf, 0x38, 0x45, 0x2f, 0xa6, 0x4f, 0x51, 0xb9, 0x75, 0x6f,
	0x15, 0x17, 0x5e, 0xb5, 0xdb, 0xa9, 0x73, 0xd8, 0xf8, 0x87, 0x03, 0xeb, 0x87, 0x8a, 0x85, 0xb7,
	0xa0, 0x64, 0xce, 0x50, 0x14, 0x9a, 0xd5, 0x8b, 0x7a, 0xe2, 0x51, 0x88, 0x0e, 0xe0, 0x8a, 0x11,
	0x72, 0x12, 0x30, 0x22, 0x54, 0x8f, 0xcb, 0x9d, 0xd7, 0xe3, 0x2e, 0x6b, 0x9b, 0x8e, 0x32, 0x91,
	0x1d, 0xee, 0x2b, 0x00, 0x11, 0xe7, 0x19, 0x61, 0x7e, 0xc6, 0x62, 0x93, 0x50, 0x25, 0x3d, 0xf3,
	0x9c, 0xc5, 0xe8, 0x3a, 0x14, 0x70, 0x9a, 0x2a, 0xd9, 0x9a, 0x92, 0x6d, 0xe0, 0x34, 0x95, 0x82,
	0x5b, 0xb0, 0x19, 0xe0, 0x38, 0xee, 0xe2, 0xe0, 0xd8, 0x97, 0x25, 0x5c, 0xb5, 0x95, 0x92, 0x57,
	0xb1, 0x93, 0x47, 0x58, 0x0c, 0xd0, 0x35, 0xd8, 0xe0, 0x01, 0x4d, 0x09, 0xaf, 0x6d, 0xa8, 0xc3,
	0x6f, 0x46, 0x8d, 0x16, 0x94, 0x0f, 0x65, 0xb8, 0xf4, 0x36, 0x14, 0xd6, 0xb4, 0x2b, 0xc6, 0xd7,
	0xca, 0xf4, 0x5e, 0x1b, 0xff, 0x92, 0x07, 0x2a, 0x8d, 0x1e, 0x93, 0x91, 0x8a, 0x4d, 0x17, 0xaa,
	0x31, 0xee, 0x92, 0xd8, 0xe7, 0x24, 0x26, 0x81, 0xa0, 0xcc, 0x1c, 0xd5, 0x8f, 0xce, 0x39, 0xaa,
	0x63, 0x04, 0xf7, 0x89, 0x34, 0xef, 0x18, 0x6b, 0x9d, 0x52, 0x9b, 0xf1, 0xf4, 0x1c, 0x6a, 0xc3,
	0x55, 0x9c, 0x46, 0xfe, 0x31, 0x19, 0x4d, 0xc5, 0xd8, 0xa6, 0xed, 0x92, 0x20, 0x6f, 0x61, 0xb5,
	0xca, 0x38, 0xc8, 0xbc, 0x7e, 0x0f, 0xd0, 0xe2, 0x72, 0xab, 0x54, 0xe7, 0x46, 0x04, 0x95, 0xbd,
	0x29, 0x54, 0x59, 0x3c, 0xfa, 0x24, 0x21, 0x0c, 0x0b, 0xe2, 0x9b, 0x4d, 0x2a, 0xa0, 0xa2, 0x57,
	0xb5, 0xf3, 0x5a, 0x5f, 0x53, 0xa8, 0x15, 0x72, 0x96, 0x42, 0x25, 0xb8, 0x06, 0x1b, 0xca, 0x5f,
	0x5e, 0xcb, 0x6b, 0x76, 0xf4, 0xa8, 0xf1, 0x0c, 0x0a, 0x87, 0x29, 0x56, 0x51, 0xfe, 0x00, 0x0a,
	0x43, 0x1a, 0x66, 0x31, 0xb1, 0x95, 0x70, 0x89, 0xd7, 0x56, 0x53, 0x3a, 0xf1, 0x69, 0x46, 0x98,
	0x5d, 0x4e, 0x0f, 0x1a, 0x7f, 0xca, 0xeb, 0x82, 0x78, 0x5f, 0xd5, 0x1b, 0xd4, 0x06, 0xe8, 0xca,
	0x63, 0xe1, 0x4b, 0xae, 0xcc, 0xdd, 0xec, 0xdd, 0x0b, 0x1e, 0xa3, 0xf6, 0x25, 0xaf, 0xd4, 0x1d,
	0xd7, 0xaa, 0x8f, 0x60, 0x9d, 0x2a, 0x10, 0x9d, 0xfc, 0xb7, 0x96, 0x83, 0x1c, 0x1a, 0x00, 0x6d,
	0x83, 0x1e, 0x43, 0x39, 0x50, 0x6d, 0x40, 0xef, 0x43, 0x5f, 0x14, 0xce, 0x29, 0xf7, 0x93, 0xbe,
	0xd1, 0xbe, 0xe4, 0x41, 0x30, 0x1e, 0xc9, 0xdb, 0xa2, 0xcd, 0x17, 0x85, 0xb6, 0x76, 0x11, 0xb4,
	0x49, 0x46, 0x4a, 0x34, 0x3c, 0xc9, 0xf0, 0xc7, 0x50, 0x36, 0xed, 0x41, 0x81, 0xad, 0x5f, 0x08,
	0x6c, 0xdc, 0x71, 0x24, 0x58, 0x3a, 0xdd, 0xd2, 0x8a, 0x34, 0xc5, 0x1a, 0x49, 0x5f, 0xec, 0xbe,
	0x7a, 0x4e, 0x9c, 0x74, 0x06, 0xb4, 0x2f, 0x79, 0x05, 0xaa, 0x3f, 0xf7, 0x37, 0xa1, 0x2c, 0xf5,
	0x7d, 0xd3, 0x31, 0xfe, 0x9c, 0x87, 0xea, 0x8b, 0x01, 0xe5, 0xe2, 0xe0, 0x54, 0x90, 0x84, 0x47,
	0x34, 0x79, 0x43, 0xea, 0xff, 0x84, 0xd4, 0xc9, 0xcd, 0x64, 0x81, 0xd4, 0x82, 0xe6, 0x42, 0xd7,
	0xd7, 0x0b, 0x65, 0x87, 0x3e, 0x7e, 0x9e, 0x35, 0x9c, 0x27, 0xf5, 0x36, 0x54, 0x3d, 0x9a, 0x09,
	0x32, 0xe1, 0xb4, 0x06, 0x85, 0x30, 0xe2, 0xb8, 0x1b, 0x13, 0x53, 0x5f, 0xec, 0xb0, 0xf1, 0xf3,
	0x0a, 0x6c, 0x1e, 0x9c, 0x8a, 0xa9, 0x43, 0x2d, 0xcb, 0x97, 0xcc, 0x08, 0x7b, 0x6d, 0x50, 0x03,
	0x74, 0x68, 0xb9, 0xd4, 0x44, 0x7c, 0x67, 0xf9, 0x26, 0x67, 0x10, 0x35, 0xb3, 0xfa, 0x7b, 0xc2,
	0xef, 0x6c, 0x9a, 0xad, 0xbd, 0x46, 0x9a, 0x7d, 0x32, 0x47, 0xae, 0xe6, 0xe3, 0x7b, 0xab, 0xec,
	0x70, 0x42, 0xf5, 0x78, 0x9b, 0x4b, 0x08, 0xdf, 0x78, 0x2d, 0xc2, 0x8f, 0x26, 0x84, 0x17, 0x2f,
	0x72, 0x77, 0x9a, 0xdb, 0xe9, 0x22, 0xfd, 0xf5, 0x3f, 0x3a, 0x50, 0x9e, 0x8a, 0xf1, 0xf2, 0x2b,
	0xc7, 0x42, 0x9f, 0xce, 0x2d, 0xf6, 0xe9, 0xff, 0xcb, 0x85, 0xa2, 0xfe, 0x85, 0x03, 0x5b, 0xf3,
	0x44, 0xa0, 0x5f, 0x3a, 0x70, 0xed, 0x04, 0xc7, 0x51, 0xe8, 0x8f, 0x39, 0x4e, 0x42, 0x5f, 0xde,
	0x1a, 0x4d, 0x33, 0x7b, 0xf6, 0x3a, 0x3c, 0xbb, 0x2f, 0x24, 0xb4, 0x99, 0x4d, 0x42, 0x79, 0x5d,
	0xd4, 0x97, 0x08, 0x74, 0xb2, 0x20, 0xa8, 0x1f, 0xc0, 0xf5, 0x33, 0xd4, 0x57, 0xfa, 0x8b, 0xf6,
	0x07, 0x07, 0x36, 0x4d, 0x61, 0x36, 0x3e, 0x7e, 0x32, 0xdf, 0xa0, 0x1f, 0xae, 0x74, 0xba, 0xa6,
	0xb1, 0xdc, 0xa7, 0x1a, 0x48, 0x7b, 0xb1, 0xbc, 0x9b, 0xd7, 0xef, 0x42, 0x65, 0x5a, 0x7d, 0x25,
	0x2f, 0x7e, 0x3f, 0x7b, 0x13, 0x78, 0x53, 0x1e, 0x56, 0x2c, 0x0f, 0x67, 0x36, 0xf9, 0x17, 0x53,
	0x4d, 0xbe, 0xa0, 0x90, 0xbe, 0xfb, 0x1f, 0x67, 0xc3, 0xd9, 0x8d, 0x7f, 0x6e, 0xd8, 0xfa, 0x6b,
	0x0e, 0xae, 0x1b, 0xa0, 0x07, 0xf6, 0xc9, 0xcf, 0x3e, 0xf9, 0xfc, 0x18, 0xae, 0x76, 0xd4, 0xf3,
	0xc0, 0x6c, 0x9f, 0xb8, 0xe1, 0xaa, 0x97, 0x42, 0x17, 0xa7, 0x91, 0x7b, 0xd2, 0x72, 0xc7, 0x66,
	0xe6, 0x5f, 0x7d, 0xfd, 0xe6, 0x99, 0x72, 0xfd, 0x3e, 0xd1, 0xb8, 0xb4, 0xeb, 0xbc, 0xe7, 0x20,
	0x02, 0xe8, 0x01, 0x89, 0x05, 0x9e, 0x05, 0xbf, 0x35, 0x67, 0x2c, 0x35, 0x16, 0x56, 0x78, 0x67,
	0xb9, 0xd2, 0xcc, 0x32, 0x3f, 0x05, 0xf4, 0x90, 0x88, 0x60, 0xf0, 0x5f, 0xf6, 0xe1, 0x6b, 0x3f,
	0xfb, 0xcb, 0x17, 0xbf, 0xce, 0xed, 0x34, 0xde, 0x9a, 0x79, 0x2c, 0xbd, 0x6b, 0x08, 0xd3, 0xc1,
	0xbd, 0xeb, 0xdc, 0xde, 0x7f, 0xf8, 0xf9, 0x3f, 0x6f, 0x38, 0x3f, 0xba, 0x77, 0xb1, 0x97, 0xe0,
	0xf4, 0xb8, 0x7f, 0xc6, 0x6b, 0x70, 0x77, 0x43, 0xfd, 0xf5, 0xff, 0xe0, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xfd, 0x26, 0x4a, 0xd1, 0x54, 0x16, 0x00, 0x00,
}

func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExtauthzServerRef.Equal(that1.ExtauthzServerRef) {
		return false
	}
	if !this.HttpService.Equal(that1.HttpService) {
		return false
	}
	if this.UserIdHeader != that1.UserIdHeader {
		return false
	}
	if this.RequestTimeout != nil && that1.RequestTimeout != nil {
		if *this.RequestTimeout != *that1.RequestTimeout {
			return false
		}
	} else if this.RequestTimeout != nil {
		return false
	} else if that1.RequestTimeout != nil {
		return false
	}
	if this.FailureModeAllow != that1.FailureModeAllow {
		return false
	}
	if !this.RequestBody.Equal(that1.RequestBody) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpService)
	if !ok {
		that2, ok := that.(HttpService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathPrefix != that1.PathPrefix {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpService_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpService_Request)
	if !ok {
		that2, ok := that.(HttpService_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedHeaders) != len(that1.AllowedHeaders) {
		return false
	}
	for i := range this.AllowedHeaders {
		if this.AllowedHeaders[i] != that1.AllowedHeaders[i] {
			return false
		}
	}
	if len(this.HeadersToAdd) != len(that1.HeadersToAdd) {
		return false
	}
	for i := range this.HeadersToAdd {
		if this.HeadersToAdd[i] != that1.HeadersToAdd[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpService_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpService_Response)
	if !ok {
		that2, ok := that.(HttpService_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedUpstreamHeaders) != len(that1.AllowedUpstreamHeaders) {
		return false
	}
	for i := range this.AllowedUpstreamHeaders {
		if this.AllowedUpstreamHeaders[i] != that1.AllowedUpstreamHeaders[i] {
			return false
		}
	}
	if len(this.AllowedClientHeaders) != len(that1.AllowedClientHeaders) {
		return false
	}
	for i := range this.AllowedClientHeaders {
		if this.AllowedClientHeaders[i] != that1.AllowedClientHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BufferSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BufferSettings)
	if !ok {
		that2, ok := that.(BufferSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestBytes != that1.MaxRequestBytes {
		return false
	}
	if this.AllowPartialMessage != that1.AllowPartialMessage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomAuth)
	if !ok {
		that2, ok := that.(CustomAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PluginAuth)
	if !ok {
		that2, ok := that.(PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Plugins) != len(that1.Plugins) {
		return false
	}
	for i := range this.Plugins {
		if !this.Plugins[i].Equal(that1.Plugins[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AuthPlugin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthPlugin)
	if !ok {
		that2, ok := that.(AuthPlugin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PluginFileName != that1.PluginFileName {
		return false
	}
	if this.ExportedSymbolName != that1.ExportedSymbolName {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuth)
	if !ok {
		that2, ok := that.(BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Realm != that1.Realm {
		return false
	}
	if !this.Apr.Equal(that1.Apr) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BasicAuth_Apr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuth_Apr)
	if !ok {
		that2, ok := that.(BasicAuth_Apr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BasicAuth_Apr_SaltedHashedPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuth_Apr_SaltedHashedPassword)
	if !ok {
		that2, ok := that.(BasicAuth_Apr_SaltedHashedPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Salt != that1.Salt {
		return false
	}
	if this.HashedPassword != that1.HashedPassword {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuth)
	if !ok {
		that2, ok := that.(OAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if !this.ClientSecretRef.Equal(that1.ClientSecretRef) {
		return false
	}
	if this.IssuerUrl != that1.IssuerUrl {
		return false
	}
	if this.AppUrl != that1.AppUrl {
		return false
	}
	if this.CallbackPath != that1.CallbackPath {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OauthSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OauthSecret)
	if !ok {
		that2, ok := that.(OauthSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiKeyAuth)
	if !ok {
		that2, ok := that.(ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		return false
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			return false
		}
	}
	if len(this.ApiKeySecretRefs) != len(that1.ApiKeySecretRefs) {
		return false
	}
	for i := range this.ApiKeySecretRefs {
		if !this.ApiKeySecretRefs[i].Equal(that1.ApiKeySecretRefs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiKeySecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiKeySecret)
	if !ok {
		that2, ok := that.(ApiKeySecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GenerateApiKey != that1.GenerateApiKey {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OpaAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpaAuth)
	if !ok {
		that2, ok := that.(OpaAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Modules) != len(that1.Modules) {
		return false
	}
	for i := range this.Modules {
		if !this.Modules[i].Equal(that1.Modules[i]) {
			return false
		}
	}
	if this.Query != that1.Query {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig)
	if !ok {
		that2, ok := that.(AuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthConfig == nil {
		if this.AuthConfig != nil {
			return false
		}
	} else if this.AuthConfig == nil {
		return false
	} else if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AuthConfig_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig_BasicAuth)
	if !ok {
		that2, ok := that.(AuthConfig_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *AuthConfig_Oauth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig_Oauth)
	if !ok {
		that2, ok := that.(AuthConfig_Oauth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth.Equal(that1.Oauth) {
		return false
	}
	return true
}
func (this *AuthConfig_CustomAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig_CustomAuth)
	if !ok {
		that2, ok := that.(AuthConfig_CustomAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAuth.Equal(that1.CustomAuth) {
		return false
	}
	return true
}
func (this *AuthConfig_ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig_ApiKeyAuth)
	if !ok {
		that2, ok := that.(AuthConfig_ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeyAuth.Equal(that1.ApiKeyAuth) {
		return false
	}
	return true
}
func (this *AuthConfig_PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig_PluginAuth)
	if !ok {
		that2, ok := that.(AuthConfig_PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PluginAuth.Equal(that1.PluginAuth) {
		return false
	}
	return true
}
func (this *AuthConfig_OpaAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfig_OpaAuth)
	if !ok {
		that2, ok := that.(AuthConfig_OpaAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OpaAuth.Equal(that1.OpaAuth) {
		return false
	}
	return true
}
func (this *VhostExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VhostExtension)
	if !ok {
		that2, ok := that.(VhostExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthConfig == nil {
		if this.AuthConfig != nil {
			return false
		}
	} else if this.AuthConfig == nil {
		return false
	} else if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VhostExtension_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VhostExtension_BasicAuth)
	if !ok {
		that2, ok := that.(VhostExtension_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *VhostExtension_Oauth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VhostExtension_Oauth)
	if !ok {
		that2, ok := that.(VhostExtension_Oauth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth.Equal(that1.Oauth) {
		return false
	}
	return true
}
func (this *VhostExtension_CustomAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VhostExtension_CustomAuth)
	if !ok {
		that2, ok := that.(VhostExtension_CustomAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAuth.Equal(that1.CustomAuth) {
		return false
	}
	return true
}
func (this *VhostExtension_ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VhostExtension_ApiKeyAuth)
	if !ok {
		that2, ok := that.(VhostExtension_ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeyAuth.Equal(that1.ApiKeyAuth) {
		return false
	}
	return true
}
func (this *VhostExtension_PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VhostExtension_PluginAuth)
	if !ok {
		that2, ok := that.(VhostExtension_PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PluginAuth.Equal(that1.PluginAuth) {
		return false
	}
	return true
}
func (this *RouteExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteExtension)
	if !ok {
		that2, ok := that.(RouteExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disable != that1.Disable {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vhost != that1.Vhost {
		return false
	}
	if that1.AuthConfig == nil {
		if this.AuthConfig != nil {
			return false
		}
	} else if this.AuthConfig == nil {
		return false
	} else if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Oauth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Oauth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Oauth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth.Equal(that1.Oauth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_BasicAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_ApiKeyAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeyAuth.Equal(that1.ApiKeyAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_PluginAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PluginAuth.Equal(that1.PluginAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if this.IssuerUrl != that1.IssuerUrl {
		return false
	}
	if this.AppUrl != that1.AppUrl {
		return false
	}
	if this.CallbackPath != that1.CallbackPath {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_ApiKeyAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_ApiKeyAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_ApiKeyAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ValidApiKeyAndUser) != len(that1.ValidApiKeyAndUser) {
		return false
	}
	for i := range this.ValidApiKeyAndUser {
		if this.ValidApiKeyAndUser[i] != that1.ValidApiKeyAndUser[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OpaAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OpaAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OpaAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Modules) != len(that1.Modules) {
		return false
	}
	for i := range this.Modules {
		if this.Modules[i] != that1.Modules[i] {
			return false
		}
	}
	if this.Query != that1.Query {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_AuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_AuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthConfig == nil {
		if this.AuthConfig != nil {
			return false
		}
	} else if this.AuthConfig == nil {
		return false
	} else if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_AuthConfig_Oauth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_AuthConfig_Oauth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AuthConfig_Oauth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth.Equal(that1.Oauth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_AuthConfig_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_AuthConfig_BasicAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AuthConfig_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_AuthConfig_ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_AuthConfig_ApiKeyAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AuthConfig_ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeyAuth.Equal(that1.ApiKeyAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_AuthConfig_PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_AuthConfig_PluginAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AuthConfig_PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PluginAuth.Equal(that1.PluginAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_AuthConfig_OpaAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_AuthConfig_OpaAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AuthConfig_OpaAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OpaAuth.Equal(that1.OpaAuth) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExtAuthDiscoveryServiceClient is the client API for ExtAuthDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExtAuthDiscoveryServiceClient interface {
	StreamExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_StreamExtAuthConfigClient, error)
	DeltaExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_DeltaExtAuthConfigClient, error)
	FetchExtAuthConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type extAuthDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewExtAuthDiscoveryServiceClient(cc *grpc.ClientConn) ExtAuthDiscoveryServiceClient {
	return &extAuthDiscoveryServiceClient{cc}
}

func (c *extAuthDiscoveryServiceClient) StreamExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_StreamExtAuthConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtAuthDiscoveryService_serviceDesc.Streams[0], "/extauth.plugins.gloo.solo.io.ExtAuthDiscoveryService/StreamExtAuthConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &extAuthDiscoveryServiceStreamExtAuthConfigClient{stream}
	return x, nil
}

type ExtAuthDiscoveryService_StreamExtAuthConfigClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type extAuthDiscoveryServiceStreamExtAuthConfigClient struct {
	grpc.ClientStream
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extAuthDiscoveryServiceClient) DeltaExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_DeltaExtAuthConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtAuthDiscoveryService_serviceDesc.Streams[1], "/extauth.plugins.gloo.solo.io.ExtAuthDiscoveryService/DeltaExtAuthConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &extAuthDiscoveryServiceDeltaExtAuthConfigClient{stream}
	return x, nil
}

type ExtAuthDiscoveryService_DeltaExtAuthConfigClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type extAuthDiscoveryServiceDeltaExtAuthConfigClient struct {
	grpc.ClientStream
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extAuthDiscoveryServiceClient) FetchExtAuthConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/extauth.plugins.gloo.solo.io.ExtAuthDiscoveryService/FetchExtAuthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtAuthDiscoveryServiceServer is the server API for ExtAuthDiscoveryService service.
type ExtAuthDiscoveryServiceServer interface {
	StreamExtAuthConfig(ExtAuthDiscoveryService_StreamExtAuthConfigServer) error
	DeltaExtAuthConfig(ExtAuthDiscoveryService_DeltaExtAuthConfigServer) error
	FetchExtAuthConfig(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

// UnimplementedExtAuthDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExtAuthDiscoveryServiceServer struct {
}

func (*UnimplementedExtAuthDiscoveryServiceServer) StreamExtAuthConfig(srv ExtAuthDiscoveryService_StreamExtAuthConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExtAuthConfig not implemented")
}
func (*UnimplementedExtAuthDiscoveryServiceServer) DeltaExtAuthConfig(srv ExtAuthDiscoveryService_DeltaExtAuthConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaExtAuthConfig not implemented")
}
func (*UnimplementedExtAuthDiscoveryServiceServer) FetchExtAuthConfig(ctx context.Context, req *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchExtAuthConfig not implemented")
}

func RegisterExtAuthDiscoveryServiceServer(s *grpc.Server, srv ExtAuthDiscoveryServiceServer) {
	s.RegisterService(&_ExtAuthDiscoveryService_serviceDesc, srv)
}

func _ExtAuthDiscoveryService_StreamExtAuthConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtAuthDiscoveryServiceServer).StreamExtAuthConfig(&extAuthDiscoveryServiceStreamExtAuthConfigServer{stream})
}

type ExtAuthDiscoveryService_StreamExtAuthConfigServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type extAuthDiscoveryServiceStreamExtAuthConfigServer struct {
	grpc.ServerStream
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtAuthDiscoveryService_DeltaExtAuthConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtAuthDiscoveryServiceServer).DeltaExtAuthConfig(&extAuthDiscoveryServiceDeltaExtAuthConfigServer{stream})
}

type ExtAuthDiscoveryService_DeltaExtAuthConfigServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type extAuthDiscoveryServiceDeltaExtAuthConfigServer struct {
	grpc.ServerStream
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtAuthDiscoveryService_FetchExtAuthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtAuthDiscoveryServiceServer).FetchExtAuthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extauth.plugins.gloo.solo.io.ExtAuthDiscoveryService/FetchExtAuthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtAuthDiscoveryServiceServer).FetchExtAuthConfig(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExtAuthDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "extauth.plugins.gloo.solo.io.ExtAuthDiscoveryService",
	HandlerType: (*ExtAuthDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchExtAuthConfig",
			Handler:    _ExtAuthDiscoveryService_FetchExtAuthConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExtAuthConfig",
			Handler:       _ExtAuthDiscoveryService_StreamExtAuthConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeltaExtAuthConfig",
			Handler:       _ExtAuthDiscoveryService_DeltaExtAuthConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/extauth/extauth.proto",
}

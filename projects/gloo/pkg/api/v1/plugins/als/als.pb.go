// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins/als/als.proto

package als

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Contains various settings for Envoy's access logging service.
// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/accesslog/v2/accesslog.proto#envoy-api-msg-config-filter-accesslog-v2-accesslog
type AccessLoggingService struct {
	AccessLog            []*AccessLog `protobuf:"bytes,1,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AccessLoggingService) Reset()         { *m = AccessLoggingService{} }
func (m *AccessLoggingService) String() string { return proto.CompactTextString(m) }
func (*AccessLoggingService) ProtoMessage()    {}
func (*AccessLoggingService) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd8d2602efe636cc, []int{0}
}
func (m *AccessLoggingService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessLoggingService.Unmarshal(m, b)
}
func (m *AccessLoggingService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessLoggingService.Marshal(b, m, deterministic)
}
func (m *AccessLoggingService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessLoggingService.Merge(m, src)
}
func (m *AccessLoggingService) XXX_Size() int {
	return xxx_messageInfo_AccessLoggingService.Size(m)
}
func (m *AccessLoggingService) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessLoggingService.DiscardUnknown(m)
}

var xxx_messageInfo_AccessLoggingService proto.InternalMessageInfo

func (m *AccessLoggingService) GetAccessLog() []*AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

type AccessLog struct {
	// filters for this listeners access logger.
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// type of Access Logging service to implement
	//
	// Types that are valid to be assigned to OutputDestination:
	//	*AccessLog_FileSink
	//	*AccessLog_GrpcService
	OutputDestination    isAccessLog_OutputDestination `protobuf_oneof:"OutputDestination"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AccessLog) Reset()         { *m = AccessLog{} }
func (m *AccessLog) String() string { return proto.CompactTextString(m) }
func (*AccessLog) ProtoMessage()    {}
func (*AccessLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd8d2602efe636cc, []int{1}
}
func (m *AccessLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessLog.Unmarshal(m, b)
}
func (m *AccessLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessLog.Marshal(b, m, deterministic)
}
func (m *AccessLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessLog.Merge(m, src)
}
func (m *AccessLog) XXX_Size() int {
	return xxx_messageInfo_AccessLog.Size(m)
}
func (m *AccessLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessLog.DiscardUnknown(m)
}

var xxx_messageInfo_AccessLog proto.InternalMessageInfo

type isAccessLog_OutputDestination interface {
	isAccessLog_OutputDestination()
	Equal(interface{}) bool
}

type AccessLog_FileSink struct {
	FileSink *FileSink `protobuf:"bytes,2,opt,name=file_sink,json=fileSink,proto3,oneof"`
}
type AccessLog_GrpcService struct {
	GrpcService *GrpcService `protobuf:"bytes,3,opt,name=grpc_service,json=grpcService,proto3,oneof"`
}

func (*AccessLog_FileSink) isAccessLog_OutputDestination()    {}
func (*AccessLog_GrpcService) isAccessLog_OutputDestination() {}

func (m *AccessLog) GetOutputDestination() isAccessLog_OutputDestination {
	if m != nil {
		return m.OutputDestination
	}
	return nil
}

func (m *AccessLog) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *AccessLog) GetFileSink() *FileSink {
	if x, ok := m.GetOutputDestination().(*AccessLog_FileSink); ok {
		return x.FileSink
	}
	return nil
}

func (m *AccessLog) GetGrpcService() *GrpcService {
	if x, ok := m.GetOutputDestination().(*AccessLog_GrpcService); ok {
		return x.GrpcService
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AccessLog) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AccessLog_OneofMarshaler, _AccessLog_OneofUnmarshaler, _AccessLog_OneofSizer, []interface{}{
		(*AccessLog_FileSink)(nil),
		(*AccessLog_GrpcService)(nil),
	}
}

func _AccessLog_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AccessLog)
	// OutputDestination
	switch x := m.OutputDestination.(type) {
	case *AccessLog_FileSink:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileSink); err != nil {
			return err
		}
	case *AccessLog_GrpcService:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GrpcService); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AccessLog.OutputDestination has unexpected type %T", x)
	}
	return nil
}

func _AccessLog_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AccessLog)
	switch tag {
	case 2: // OutputDestination.file_sink
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileSink)
		err := b.DecodeMessage(msg)
		m.OutputDestination = &AccessLog_FileSink{msg}
		return true, err
	case 3: // OutputDestination.grpc_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GrpcService)
		err := b.DecodeMessage(msg)
		m.OutputDestination = &AccessLog_GrpcService{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AccessLog_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AccessLog)
	// OutputDestination
	switch x := m.OutputDestination.(type) {
	case *AccessLog_FileSink:
		s := proto.Size(x.FileSink)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLog_GrpcService:
		s := proto.Size(x.GrpcService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FileSink struct {
	// the file path to which the file access logging service will sink
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// the format which the logs should be outputted by
	//
	// Types that are valid to be assigned to OutputFormat:
	//	*FileSink_StringFormat
	//	*FileSink_JsonFormat
	OutputFormat         isFileSink_OutputFormat `protobuf_oneof:"output_format"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FileSink) Reset()         { *m = FileSink{} }
func (m *FileSink) String() string { return proto.CompactTextString(m) }
func (*FileSink) ProtoMessage()    {}
func (*FileSink) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd8d2602efe636cc, []int{2}
}
func (m *FileSink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSink.Unmarshal(m, b)
}
func (m *FileSink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSink.Marshal(b, m, deterministic)
}
func (m *FileSink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSink.Merge(m, src)
}
func (m *FileSink) XXX_Size() int {
	return xxx_messageInfo_FileSink.Size(m)
}
func (m *FileSink) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSink.DiscardUnknown(m)
}

var xxx_messageInfo_FileSink proto.InternalMessageInfo

type isFileSink_OutputFormat interface {
	isFileSink_OutputFormat()
	Equal(interface{}) bool
}

type FileSink_StringFormat struct {
	StringFormat string `protobuf:"bytes,2,opt,name=string_format,json=stringFormat,proto3,oneof"`
}
type FileSink_JsonFormat struct {
	JsonFormat *types.Struct `protobuf:"bytes,3,opt,name=json_format,json=jsonFormat,proto3,oneof"`
}

func (*FileSink_StringFormat) isFileSink_OutputFormat() {}
func (*FileSink_JsonFormat) isFileSink_OutputFormat()   {}

func (m *FileSink) GetOutputFormat() isFileSink_OutputFormat {
	if m != nil {
		return m.OutputFormat
	}
	return nil
}

func (m *FileSink) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileSink) GetStringFormat() string {
	if x, ok := m.GetOutputFormat().(*FileSink_StringFormat); ok {
		return x.StringFormat
	}
	return ""
}

func (m *FileSink) GetJsonFormat() *types.Struct {
	if x, ok := m.GetOutputFormat().(*FileSink_JsonFormat); ok {
		return x.JsonFormat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FileSink) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FileSink_OneofMarshaler, _FileSink_OneofUnmarshaler, _FileSink_OneofSizer, []interface{}{
		(*FileSink_StringFormat)(nil),
		(*FileSink_JsonFormat)(nil),
	}
}

func _FileSink_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FileSink)
	// output_format
	switch x := m.OutputFormat.(type) {
	case *FileSink_StringFormat:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringFormat)
	case *FileSink_JsonFormat:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsonFormat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FileSink.OutputFormat has unexpected type %T", x)
	}
	return nil
}

func _FileSink_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FileSink)
	switch tag {
	case 2: // output_format.string_format
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OutputFormat = &FileSink_StringFormat{x}
		return true, err
	case 3: // output_format.json_format
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Struct)
		err := b.DecodeMessage(msg)
		m.OutputFormat = &FileSink_JsonFormat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FileSink_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FileSink)
	// output_format
	switch x := m.OutputFormat.(type) {
	case *FileSink_StringFormat:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringFormat)))
		n += len(x.StringFormat)
	case *FileSink_JsonFormat:
		s := proto.Size(x.JsonFormat)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Grpc service
// Not currently implemented
type GrpcService struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcService) Reset()         { *m = GrpcService{} }
func (m *GrpcService) String() string { return proto.CompactTextString(m) }
func (*GrpcService) ProtoMessage()    {}
func (*GrpcService) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd8d2602efe636cc, []int{3}
}
func (m *GrpcService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcService.Unmarshal(m, b)
}
func (m *GrpcService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcService.Marshal(b, m, deterministic)
}
func (m *GrpcService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcService.Merge(m, src)
}
func (m *GrpcService) XXX_Size() int {
	return xxx_messageInfo_GrpcService.Size(m)
}
func (m *GrpcService) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcService.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcService proto.InternalMessageInfo

// filters for access logs
type Filter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd8d2602efe636cc, []int{4}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AccessLoggingService)(nil), "als.plugins.gloo.solo.io.AccessLoggingService")
	proto.RegisterType((*AccessLog)(nil), "als.plugins.gloo.solo.io.AccessLog")
	proto.RegisterType((*FileSink)(nil), "als.plugins.gloo.solo.io.FileSink")
	proto.RegisterType((*GrpcService)(nil), "als.plugins.gloo.solo.io.GrpcService")
	proto.RegisterType((*Filter)(nil), "als.plugins.gloo.solo.io.Filter")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins/als/als.proto", fileDescriptor_dd8d2602efe636cc)
}

var fileDescriptor_dd8d2602efe636cc = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x8a, 0x14, 0x31,
	0x10, 0x9d, 0x76, 0x65, 0x98, 0xae, 0xde, 0x41, 0x8c, 0x0b, 0x36, 0x8b, 0xc8, 0xd0, 0xb2, 0xb0,
	0x17, 0x13, 0x5c, 0x2f, 0x22, 0x5e, 0xb6, 0x91, 0x75, 0x10, 0x41, 0xe8, 0xb9, 0xed, 0x65, 0xe8,
	0x09, 0xe9, 0x6c, 0x76, 0xb2, 0xa9, 0x90, 0xa4, 0xf7, 0x43, 0xfc, 0x0a, 0xbf, 0xcb, 0x9b, 0x7f,
	0x21, 0x9d, 0x74, 0xaf, 0x1e, 0x1c, 0xf1, 0x10, 0x78, 0x55, 0xf5, 0xea, 0xa5, 0x5e, 0x2a, 0x50,
	0x4b, 0x15, 0x6e, 0xfa, 0x1d, 0xe5, 0x78, 0xc7, 0x3c, 0x6a, 0x7c, 0xad, 0x90, 0x49, 0x8d, 0xc8,
	0xac, 0xc3, 0x5b, 0xc1, 0x83, 0x4f, 0x51, 0x6b, 0x15, 0xbb, 0x7f, 0xc3, 0xac, 0xee, 0xa5, 0x32,
	0x9e, 0xb5, 0x3a, 0x1e, 0x6a, 0x1d, 0x06, 0x24, 0x65, 0x84, 0xa9, 0x44, 0x07, 0x3a, 0x1d, 0x94,
	0xa8, 0xc2, 0xd3, 0x13, 0x89, 0x12, 0x23, 0x89, 0x0d, 0x28, 0xf1, 0x4f, 0x5f, 0x48, 0x44, 0xa9,
	0x05, 0x8b, 0xd1, 0xae, 0xef, 0x98, 0x0f, 0xae, 0xe7, 0x21, 0x55, 0xab, 0x6b, 0x38, 0xb9, 0xe4,
	0x5c, 0x78, 0xff, 0x05, 0xa5, 0x54, 0x46, 0x6e, 0x84, 0xbb, 0x57, 0x5c, 0x90, 0x1a, 0xa0, 0x8d,
	0xf9, 0xad, 0x46, 0x59, 0x66, 0xab, 0xa3, 0xf3, 0xe2, 0xe2, 0x15, 0x3d, 0x74, 0x35, 0x7d, 0xd0,
	0x68, 0xf2, 0x76, 0x82, 0xd5, 0xcf, 0x0c, 0xf2, 0x87, 0x02, 0x79, 0x07, 0xf3, 0x4e, 0xe9, 0x20,
	0x5c, 0x99, 0xad, 0xb2, 0xf3, 0xe2, 0x62, 0x75, 0x58, 0xed, 0x2a, 0xf2, 0x9a, 0x91, 0x4f, 0x2e,
	0x21, 0xef, 0x94, 0x16, 0x5b, 0xaf, 0xcc, 0xbe, 0x7c, 0x14, 0x9b, 0xab, 0x7f, 0x36, 0x8b, 0x8d,
	0x32, 0xfb, 0xf5, 0xac, 0x59, 0x74, 0x23, 0x26, 0x9f, 0xe1, 0x58, 0x3a, 0xcb, 0xb7, 0x3e, 0xd9,
	0x2b, 0x8f, 0xa2, 0xca, 0xd9, 0x61, 0x95, 0x4f, 0xce, 0xf2, 0xf1, 0x2d, 0xd6, 0xb3, 0xa6, 0x90,
	0xbf, 0xc3, 0xfa, 0x19, 0x3c, 0xfd, 0xda, 0x07, 0xdb, 0x87, 0x8f, 0xc2, 0x07, 0x65, 0xda, 0xa0,
	0xd0, 0x54, 0xdf, 0x32, 0x58, 0x4c, 0x37, 0x13, 0x02, 0x8f, 0x6d, 0x1b, 0x6e, 0xa2, 0xd1, 0xbc,
	0x89, 0x98, 0x9c, 0xc1, 0xd2, 0x07, 0xa7, 0x8c, 0xdc, 0x76, 0xe8, 0xee, 0xda, 0x10, 0x8d, 0xe4,
	0xeb, 0x59, 0x73, 0x9c, 0xd2, 0x57, 0x31, 0x4b, 0xde, 0x43, 0x71, 0xeb, 0xd1, 0x4c, 0xa4, 0x34,
	0xe7, 0x73, 0x9a, 0x76, 0x48, 0xa7, 0x1d, 0xd2, 0x4d, 0xdc, 0xe1, 0x7a, 0xd6, 0xc0, 0xc0, 0x4e,
	0xbd, 0xf5, 0x13, 0x58, 0x62, 0x1c, 0x6c, 0xec, 0xae, 0x96, 0x50, 0xfc, 0xe1, 0xa3, 0x5a, 0xc0,
	0x3c, 0xbd, 0x6c, 0x5d, 0x7f, 0xff, 0xf1, 0x32, 0xbb, 0xfe, 0xf0, 0x7f, 0xbf, 0xd1, 0xee, 0xe5,
	0x5f, 0x7e, 0xe4, 0x6e, 0x1e, 0x87, 0x79, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xf9, 0x87,
	0xa5, 0xd4, 0x02, 0x00, 0x00,
}

func (this *AccessLoggingService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLoggingService)
	if !ok {
		that2, ok := that.(AccessLoggingService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccessLog) != len(that1.AccessLog) {
		return false
	}
	for i := range this.AccessLog {
		if !this.AccessLog[i].Equal(that1.AccessLog[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccessLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLog)
	if !ok {
		that2, ok := that.(AccessLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if that1.OutputDestination == nil {
		if this.OutputDestination != nil {
			return false
		}
	} else if this.OutputDestination == nil {
		return false
	} else if !this.OutputDestination.Equal(that1.OutputDestination) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccessLog_FileSink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLog_FileSink)
	if !ok {
		that2, ok := that.(AccessLog_FileSink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileSink.Equal(that1.FileSink) {
		return false
	}
	return true
}
func (this *AccessLog_GrpcService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLog_GrpcService)
	if !ok {
		that2, ok := that.(AccessLog_GrpcService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcService.Equal(that1.GrpcService) {
		return false
	}
	return true
}
func (this *FileSink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileSink)
	if !ok {
		that2, ok := that.(FileSink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if that1.OutputFormat == nil {
		if this.OutputFormat != nil {
			return false
		}
	} else if this.OutputFormat == nil {
		return false
	} else if !this.OutputFormat.Equal(that1.OutputFormat) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FileSink_StringFormat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileSink_StringFormat)
	if !ok {
		that2, ok := that.(FileSink_StringFormat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringFormat != that1.StringFormat {
		return false
	}
	return true
}
func (this *FileSink_JsonFormat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileSink_JsonFormat)
	if !ok {
		that2, ok := that.(FileSink_JsonFormat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsonFormat.Equal(that1.JsonFormat) {
		return false
	}
	return true
}
func (this *GrpcService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GrpcService)
	if !ok {
		that2, ok := that.(GrpcService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Filter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Filter)
	if !ok {
		that2, ok := that.(Filter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

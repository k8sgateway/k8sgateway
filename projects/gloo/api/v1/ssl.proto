syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/ref.proto";

// SslConfig contains the options necessary to configure a virtual host or listener to use TLS
message SslConfig {
    oneof ssl_secrets {
        /** SecretRef contains the secret ref to a gloo secret containing the following structure:
        {
            "tls.crt": <ca chain data...>,
            "tls.key": <private key data...>
        }
        */
        core.solo.io.ResourceRef secret_ref = 1;
        // SSLFiles reference paths to certificates which are local to the proxy
        SSLFiles ssl_files = 2;

        SDSConfig sds = 4;
    }
    // optional. the SNI domains that should be considered for TLS connections
    repeated string sni_domains = 3;
}

// SSLFiles reference paths to certificates which can be read by the proxy off of its local filesystem
message SSLFiles {
    string tls_cert = 1;
    string tls_key = 2;
    // for client cert validation. optional
    string root_ca = 3;
}

// SslConfig contains the options necessary to configure a virtual host or listener to use TLS
message UpstreamSslConfig {
    oneof ssl_secrets {
        core.solo.io.ResourceRef secret_ref = 1;
        //  SSLFiles reference paths to certificates which are local to the proxy
        SSLFiles ssl_files = 2;

        SDSConfig sds =4;
    }
    // optional. the SNI domains that should be considered for TLS connections
    string sni = 3;
}

message SDSConfig {
    string TargetUri = 1;
    CallCredentials call_credentials = 2;
    string certificates_secret_name = 3;
    string validation_context_name= 4;
    // TODO add subject alt name?
}

message CallCredentials {
    message FileCredentialSource {
        string TokenFileName = 1;
        string Header = 2;
    }
FileCredentialSource file_credential_source = 1;
}
syntax = "proto3";
package waf.options.gloo.solo.io;

import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/waf/waf.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/waf";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

message Settings {
    // Disable waf on this resource (if omitted defaults to false).
    // If a route/virtual host is configured with WAF, you must explicitly disable its WAF,
    // i.e., it will not inherit the disabled status of its parent
    bool disabled = 1;
    // Custom massage to display if an intervention occurs.
    string custom_intervention_message = 2;
    // Add OWASP core rule set
    // if nil will not be added
    CoreRuleSet core_rule_set = 3;
    // Custom rule sets rules to add - File option will not dynamically load changes.
    // If you want changes to ruleset values stores in a file to propagate to Envoy you will need to change the name of the file to indicate a change to its contents.
    // The recommendation if you want dynamically loaded rules is to use CustomConfigMapRuleSets.
    repeated envoy.config.filter.http.modsecurity.v2.RuleSet rule_sets = 4;
    // Use configMap rulesets to reference configmaps that contain rules that you want dynamically loaded.
    // The rules must be contained in the value of the key-value mappings in the ConfigMap `data` field.
    repeated RuleSetFromConfigMap config_map_rule_sets = 8;
    // Audit Log settings
    envoy.config.filter.http.modsecurity.v2.AuditLogging audit_logging = 5;
    // Only process request headers, not buffering the request body
    bool request_headers_only = 6;
    // Only process response headers, not buffering the response body
    bool response_headers_only = 7;
}

message RuleSetFromConfigMap {
    // The configmap from which the rules will be taken
    core.solo.io.ResourceRef configmap_location = 1;
    // If the configmap has multiple Key-Value pairs in the Data map (Ex: when a config map is created from multiple file sources)
    // you can use dataMapKey to select which rules and the order you want them included.
    // If included - Desired Keys and their order from the Data Map of a configmap.
    // If not included - The rules will be configured in order of sorted keys from the Data map of the configmap. This may not be the order they appear in the configmap.
    repeated string data_map_keys = 2;
}

message CoreRuleSet {
    // Optional custom settings for the OWASP core rule set.
    // For an example on the configuration options see: https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.2/dev/crs-setup.conf.example
    // The same rules apply to these options as do to the `RuleSet`s. The file option is better if possible.
    oneof CustomSettingsType {
        // String representing the core rule set custom config options
        string custom_settings_string = 2;
        // String representing a file location with core rule set custom config options
        string custom_settings_file = 3;
    }
}
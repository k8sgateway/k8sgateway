syntax = "proto3";
package ratelimit.options.gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit";

import "github.com/solo-io/solo-apis/api/rate-limiter/v1alpha1/ratelimit.proto";

import "solo-kit/api/v1/ref.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

// Basic rate-limiting API
message IngressRateLimit {
    ratelimit.solo.io.RateLimit authorized_limits = 1;
    ratelimit.solo.io.RateLimit anonymous_limits = 2;
}

message Settings {
  core.solo.io.ResourceRef ratelimit_server_ref = 1;
  google.protobuf.Duration request_timeout = 2 [(gogoproto.stdduration) = true];

  bool deny_on_fail = 3;

  // Set this is set to true if you would like to rate limit traffic before applying external auth to it.
  // *Note*: When this is true, you will lose some features like being able to rate limit a request based on its auth state
  bool rate_limit_before_auth = 9;
}

// API based on Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
// Sample configuration below
//
// descriptors:
//- key: account_id
//  descriptors:
//  - key: plan
//    value: BASIC
//    rateLimit:
//      requestsPerUnit: 1
//      unit: MINUTE
//  - key: plan
//    value: PLUS
//    rateLimit:
//      requestsPerUnit: 20
//      unit: MINUTE
message ServiceSettings {
    repeated ratelimit.solo.io.Descriptor descriptors = 1;
}

message RateLimitVhostExtension {
    // Define individual rate limits here. Each rate limit will be evaluated, if any rate limit
    // would be throttled, the entire request returns a 429 (gets throttled)
    repeated ratelimit.solo.io.RateLimitActions rate_limits = 1 ;// [(validate.rules).repeated .min_items = 1];
}

message RateLimitRouteExtension {
    // Whether or not to include rate limits as defined on the VirtualHost in addition to rate limits on the Route
    bool include_vh_rate_limits = 1;
    // Define individual rate limits here. Each rate limit will be evaluated, if any rate limit
    // would be throttled, the entire request returns a 429 (gets throttled)
    repeated ratelimit.solo.io.RateLimitActions rate_limits = 2 ;// [(validate.rules).repeated .min_items = 1];
}
syntax = "proto3";
package rbac.plugins.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/plugins/rbac";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
// TODO: should we add standard claims to the jwt principal?

// A JWT principal. To use this, JWT plugin MUST be enabled.
message JWTPrincipal {
    // Set of claims that make up this principal. Commonly, the 'iss' and 'sub' or 'email' claims are used.
    // all claims must be present on the JWT.
    map<string, string> claims = 1;
    // Verify that the JWT came from a specific provider. This usually can be left empty
    // and a provider will be chosen automatically.
    string provider = 2;
}

// An RBAC principal - the identity entity (usually a user or a service account).
message Principal {
    JWTPrincipal jwt_principal = 1;
}

// What permissions should be granted. An empty field means allow-all.
// If more than one field is added, all of them need to match.
message Permissions {
    // Paths that have this prefix will be allowed.
    string path_prefix = 1;
    // What http methods (GET, POST, ...) are allowed.
    repeated string methods = 2;
}

message Policy {
    // Principals in this policy.
    repeated Principal principals = 1;
    // Permissions granted to the principals.
    Permissions permissions = 2;
}

message Settings {
    // Require RBAC for all virtual hosts. A vhost without an RBAC policy set will fallback to a deny-all policy.
    bool require_rbac = 1;
}

// TODO(kdorosh) remove once we stop supporting opaque RBAC config
message Config {
    option deprecated = true;
    // Named policies to apply.
    map<string, Policy> policies = 1;
}

message ExtensionSettings {
    // Disable RBAC checks on this resource (default false). This is useful to allow access to static resources/login page without RBAC checks.
    // If provided on a route, all route settings override any vhost settings
    bool disable = 1;
    // Named policies to apply.
    map<string, Policy> policies = 2;
}

// TODO(kdorosh) remove once we stop supporting opaque RBAC config
message VhostExtension {
    option deprecated = true;
    Config config = 1;
}

// TODO(kdorosh) remove once we stop supporting opaque RBAC config
message RouteExtension {
    option deprecated = true;
    oneof route{
        // Disable RBAC checks on this route. This is useful to allow access to static resources/login page without RBAC checks.
        bool disable = 1;
        Config config = 2;
    }
}

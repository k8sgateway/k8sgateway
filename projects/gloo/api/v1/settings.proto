syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/plugins/ratelimit/ratelimit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/plugins/rbac/rbac.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/circuit_breaker.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// Represents global settings for all the Gloo components.
message Settings {

    option (core.solo.io.resource).short_name = "st";
    option (core.solo.io.resource).plural_name = "settings";

    // This is the namespace to which Gloo controllers will write their own resources, e.g. discovered Upstreams or default Gateways.
    // If empty, this will default to "gloo-system".
    string discovery_namespace = 1;

    // Use this setting to restrict the namespaces that Gloo controllers take into consideration when watching for resources.In a
    // usual production scenario, RBAC policies will limit the namespaces that Gloo has access to. If `watch_namespaces`
    // contains namespaces outside of this whitelist, Gloo will fail to start.
    //
    // If not set, this defaults to all available namespaces. Please note that, the `discovery_namespace` will always
    // be included in this list.
    repeated string watch_namespaces = 2;

    // This setting determines where Gloo controllers will store its resources
    oneof config_source {
        KubernetesCrds kubernetes_config_source = 4;
        Directory directory_config_source = 5;
        ConsulKv consul_kv_source = 21;
    };

    // Determines where Gloo will read/write secrets from/to.
    oneof secret_source {
        KubernetesSecrets kubernetes_secret_source = 6;
        VaultSecrets vault_secret_source = 7;
        Directory directory_secret_source = 8;
    };

    // Where to read artifacts from.
    oneof artifact_source {
        KubernetesConfigmaps kubernetes_artifact_source = 9;
        Directory directory_artifact_source = 10;
        ConsulKv consul_kv_artifact_source = 23;
    };

    // Where the Gloo xDS server should bind (should not need configuration by user)
    // Deprecated: use gloo.xdsBindAddr
    string bind_addr = 11 [deprecated=true];

    // How frequently to resync watches, etc
    google.protobuf.Duration refresh_rate = 12;

    // Enable serving debug data on port 9090
    bool dev_mode = 13;

    // Enable automatic linkerd upstream header addition for easier routing to linkerd services
    bool linkerd = 17;

    // Use Kubernetes CRDs as storage.
    message KubernetesCrds {
    }

    // Use Kubernetes as storage for secret data.
    message KubernetesSecrets {
    }

    // Use [HashiCorp Vault](https://www.vaultproject.io/) as storage for secret data.
    message VaultSecrets {
        // the Token used to authenticate to Vault
        string token = 1;

        // address is the address of the Vault server. This should be a complete
        // URL such as "http://vault.example.com".
        string address = 2;

        // caCert is the path to a PEM-encoded CA cert file to use to verify the
        // Vault server SSL certificate.
        string ca_cert = 3;

        // caPath is the path to a directory of PEM-encoded CA cert files to verify
        // the Vault server SSL certificate.
        string ca_path = 4;

        // clientCert is the path to the certificate for Vault communication
        string client_cert = 5;

        // clientKey is the path to the private key for Vault communication
        string client_key = 6;

        // tlsServerName, if set, is used to set the SNI host when connecting via
        // TLS.
        string tls_server_name = 7;

        // Insecure enables or disables SSL verification
        google.protobuf.BoolValue insecure = 8;

        // all keys stored in Vault will begin with this Vault
        // this can be used to run multiple instances of Gloo against the same Consul cluster
        // defaults to `gloo`
        string root_key = 9;
    }

    // Use [HashiCorp Consul Key-Value](https://www.consul.io/api/kv.html/) as storage for config data.
    // Configuration options for connecting to Consul can be configured in the Settings' root
    // `consul` field
    message ConsulKv {
        // all keys stored in Consul will begin with this prefix
        // this can be used to run multiple instances of Gloo against the same Consul cluster
        // defaults to `gloo`
        string root_key = 1;
    }

    // Use Kubernetes ConfigMaps as storage.
    message KubernetesConfigmaps {
    }

    // As an alternative to Kubernetes CRDs, Gloo is able to store resources in a local file system.
    // This option determines the root of the directory tree used to this end.
    message Directory {
        string directory = 1;
    } // watch a directory

    // Default circuit breakers when not set in a specific upstream.
    // Deprecated: use gloo.circuitBreakers
    CircuitBreakerConfig circuit_breakers = 3 [deprecated=true];

    message KnativeOptions {
        // Address of the clusteringress proxy.
        // If empty, it will default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local.
        // Use if running Knative Version 0.7.X or less
        string cluster_ingress_proxy_address = 1;

        // Address of the externally-facing knative proxy.
        // If empty, it will default to knative-external-proxy.$POD_NAMESPACE.svc.cluster.local.
        // Use if running Knative Version 0.8.X or higher
        string knative_external_proxy_address = 2;

        // Address of the internally-facing knative proxy.
        // If empty, it will default to knative-internal-proxy.$POD_NAMESPACE.svc.cluster.local.
        // Use if running Knative Version 0.8.X or higher
        string knative_internal_proxy_address = 3;
    }

    // Configuration options for the Clusteringress Controller (for Knative).
    KnativeOptions knative = 18;

    message DiscoveryOptions {

        // Possible modes for running the function discovery service (FDS). FDS polls services in-cluster for Swagger
        // and gRPC endpoints. This behavior can be controlled with the use of annotations.
        // FdsMode specifies what policy FDS will use when determining which services to poll.
        enum FdsMode {
            // In BLACKLIST mode (default), FDS will poll all services in cluster except those services labeled with
            // `discovery.solo.io/function_discovery=disabled`. This label can also be used on namespaces to apply to
            // all services within a namespace **which are not explicitly whitelisted**.
            // Note that `kube-system` and `kube-public` namespaces must be explicitly whitelisted even in blacklist mode.
            BLACKLIST = 0;
            // In WHITELIST mode, FDS will poll only services in cluster labeled with
            // `discovery.solo.io/function_discovery=enabled`. This label can also be used on namespaces to apply to all
            // services **which are not explicitly blacklisted** within a namespace.
            WHITELIST = 1;
            // In DISABLED mode, FDS will not run.
            DISABLED = 2;
        }

        FdsMode fds_mode = 1;
    }

    // Options for configuring Gloo's Discovery service
    DiscoveryOptions discovery = 19;

    // Options for configuring `gloo`, the core Gloo controller,
    // which serves dynamic configuration to Envoy
    GlooOptions gloo = 24;

    // Options for configuring `gateway`, the Gateway Gloo controller,
    // which enables the VirtualService/Gateway API in Gloo
    GatewayOptions gateway = 25;

    // Provides overrides for the default configuration parameters used to connect to Consul.
    //
    // Note: It is also possible to configure the Consul client Gloo uses via the environment variables
    // described [here](https://www.consul.io/docs/commands/index.html#environment-variables). These
    // need to be set on the Gloo container.
    message ConsulConfiguration {

        // The address of the Consul server.
        // Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
        string address = 1;

        // Datacenter to use. If not provided, the default agent datacenter is used.
        string datacenter = 2;

        // Username to use for HTTP Basic Authentication
        string username = 3;

        // Password to use for HTTP Basic Authentication
        string password = 4;

        // Token is used to provide a per-request ACL token
        // which overrides the agent's default token.
        string token = 5;

        // caFile is the optional path to the CA certificate used for Consul
        // communication, defaults to the system bundle if not specified.
        string ca_file = 6;

        // caPath is the optional path to a directory of CA certificates to use for
        // Consul communication, defaults to the system bundle if not specified.
        string ca_path = 7;

        // CertFile is the optional path to the certificate for Consul
        // communication. If this is set then you need to also set KeyFile.
        string cert_file = 8;

        // KeyFile is the optional path to the private key for Consul communication.
        // If this is set then you need to also set CertFile.
        string key_file = 9;

        // InsecureSkipVerify if set to true will disable TLS host verification.
        google.protobuf.BoolValue insecure_skip_verify = 10;

        // WaitTime limits how long a watches for Consul resources will block.
        // If not provided, the agent default values will be used.
        google.protobuf.Duration wait_time = 11;

        // service discovery options for Consul
        message ServiceDiscoveryOptions {
            // Use this parameter to restrict the data centers that will be considered when discovering and routing to
            // services. If not provided, Gloo will use all available data centers.
            repeated string data_centers = 1;
        }

        // Enable Service Discovery via Consul with this field
        // set to empty struct `{}` to enable with defaults
        ServiceDiscoveryOptions service_discovery = 12;


    }

    // Options to configure Gloo's integration with [HashiCorp Consul](https://www.consul.io/).
    ConsulConfiguration consul = 20;


    // Provides overrides for the default configuration parameters used to interact with Kubernetes.
    message KubernetesConfiguration {

        message RateLimits {
            // The maximum queries-per-second Gloo can make to the Kubernetes API Server.
            float QPS = 1;
            // Maximum burst for throttle. When a steady state of QPS requests per second,
            // this is an additional number of allowed, to allow for short bursts.
            uint32 burst = 2;
        }
        // Rate limits for the kuberentes clients
        RateLimits rate_limits = 1;
    }

    // Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
    KubernetesConfiguration kubernetes = 22;

    // Deprecated: Opaque settings config for Gloo extensions
    Extensions extensions = 16 [deprecated=true];

    // Enterprise-only: Partial config for GlooE's rate-limiting service, based on Envoy's rate-limit service;
    // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
    // Configure rate-limit *descriptors* here, which define the limits for requests based on their descriptors.
    // Configure rate-limit *actions*, which define how request characteristics get translated into descriptors,
    // on the VirtualHost or its routes
    ratelimit.plugins.gloo.solo.io.EnvoySettings ratelimit_descriptors = 26;

    // Enterprise-only: Settings for the rate limiting server itself
    ratelimit.plugins.gloo.solo.io.Settings ratelimit_server = 27;

    // Enterprise-only: Settings for RBAC across all Gloo resources (VirtualServices, Routes, etc.)
    rbac.plugins.gloo.solo.io.Settings rbac = 28;

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 14 [(gogoproto.nullable) = false];

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 15 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];
}

// Settings specific to the gloo (Envoy xDS server) controller
message GlooOptions {
    // Where the `gloo` xDS server should bind (should not need configuration by user). Defaults to `0.0.0.0:9977`
    string xds_bind_addr = 1;

    // Where the `gloo` validation server should bind. Defaults to `0.0.0.0:9988`
    string validation_bind_addr = 2;

    // Default circuit breaker configuration to use for upstream requests,
    // when not provided by specific upstream.
    CircuitBreakerConfig circuit_breakers = 3;

    // Timeout to get initial snapshot of resources. If not set, Gloo will not wait for initial
    // snapshot - if set and and gloo could not fetch it's initial snapshot before the timeout
    // reached, gloo will panic.
    google.protobuf.Duration endpoints_warming_timeout = 4;

    message AWSOptions {
        // Enable credential discovery via IAM; when this is set, there's no need provide a secret
        // on the upstream when running on AWS environment.
        //
        // Note: This should **ONLY** be enabled when running in an AWS environment, as the AWS
        // code blocks the envoy main thread. This should be negligible when running inside AWS.
        bool enable_credentials_discovey = 1;
    }

    AWSOptions aws_options = 5;
}

// Settings specific to the Gateway controller
message GatewayOptions {
    // Address of the `gloo` config validation server. Defaults to `gloo:9988`
    string validation_server_addr = 1;
    // Disable auto generation of default gateways from gateway pod
    bool disable_auto_gen_gateways = 2;
}

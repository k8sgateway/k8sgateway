syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/circuit_breaker.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

/*
Settings resource for Gloo
*/
message Settings {

    option (core.solo.io.resource).short_name = "st";
    option (core.solo.io.resource).plural_name = "settings";
    // namespace to write discovered data
    string discovery_namespace = 1;
    // namespaces to watch for user config as well as services
    // TODO(ilackarms): split out watch_namespaces and service_discovery_namespaces...
    repeated string watch_namespaces = 2;

    // where to read user config (upstream, proxy) from
    // if nil, use only in memory config
    oneof config_source {
        KubernetesCrds kubernetes_config_source = 4;
        Directory directory_config_source = 5;
    };

    // where to read secrets from (vault, k8s)
    oneof secret_source {
        KubernetesSecrets kubernetes_secret_source = 6;
        VaultSecrets vault_secret_source = 7;
        Directory directory_secret_source = 8;
    };

    // where to read artifacts from (configmap, file)
    oneof artifact_source {
        KubernetesConfigmaps kubernetes_artifact_source = 9;
        Directory directory_artifact_source = 10;
    };

    // where the gloo xds server should bind (should not need configuration by user)
    string bind_addr = 11;
    // how frequently to resync watches, etc
    google.protobuf.Duration refresh_rate = 12;
    // enable serving debug data on port 9090
    bool dev_mode = 13;

    // enable automatic linkerd upstream header addition for easier routing to linkerd services
    bool linkerd = 17;

    // ilackarms(todo: make sure these are configurable)
    message KubernetesCrds {
    } // watch kubernetes Crds
    message KubernetesSecrets {
    } // watch kube secrets
    message VaultSecrets {
    } // watch vault secrets
    message KubernetesConfigmaps {
    }
    message Directory {
        string directory = 1;
    } // watch a directory

    // Default circuit breakers when not set in a specific upstream.
    CircuitBreakerConfig circuit_breakers = 3;

    message KnativeOptions {
        // address of the clusteringress proxy
        // if empty, it will default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local
        string cluster_ingress_proxy_address = 1;
    }

    // configuration options for the Clusteringress Controller (for Knative)
    KnativeOptions knative = 18;

    message DiscoveryOptions {
        // possible modes for running the function discovery service (FDS)
        // FDS polls services in-cluster for Swagger and gRPC endpoints
        // this behavior can be controlled with the use of annotations
        // FdsMode specifies what policy FDS will use when
        // determining which services to poll
        enum FdsMode {
            // in BLACKLIST mode (default), FDS will poll all services in cluster
            // except those services labeled with
            // discovery.solo.io/function_discovery=disabled
            // this label can also be used on namespaces to apply to all
            // services within a namespace *(which are not explicitly whitelisted)*
            // Note that `kube-system` and `kube-public` namespaces must be explicitly whitelisted even in
            // blacklist mode.
            BLACKLIST = 0;
            // in WHITELIST mode (default), FDS will poll only services in cluster
            // labeled with discovery.solo.io/function_discovery=enabled
            // this label can also be used on namespaces to apply to all
            // services *(which are not explicitly blacklisted)* within a namespace
            WHITELIST = 1;
            // in DISABLED mode, FDS will not run
            DISABLED = 2;
        }

        FdsMode fds_mode = 1;
    }
    // options for configuring Gloo's Discovery service
    DiscoveryOptions discovery = 19;

    // Provides overrides for the default configuration parameters used to connect to Consul.
    //
    // Note: It is also possible to configure the Consul client Gloo uses via the environment variables
    // described [here](https://www.consul.io/docs/commands/index.html#environment-variables). These
    // need to be set on the Gloo container.
    message ConsulConfiguration {

        // The address of the Consul server.
        // Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
        google.protobuf.StringValue address = 1;

        // Use this parameter to restrict the data centers that will be considered when discovering and routing to
        // services. If not provided, Gloo will use all available data centers.
        repeated string data_centers = 2;

        // WaitTime limits how long a watches for Consul resources will block.
        // If not provided, the agent default values will be used.
        google.protobuf.Duration wait_time = 3;
    }

    // Options to configure Gloo's integration with [HashiCorp Consul](https://www.consul.io/).
    ConsulConfiguration consul = 20;

    // Settings for extensions
    Extensions extensions = 16;

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 14 [(gogoproto.nullable) = false];

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 15 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];
}

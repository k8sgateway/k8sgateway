syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;
import "google/protobuf/wrappers.proto";
import "gloo/projects/gloo/api/v1/ssl.proto";
import "solo-kit/api/v1/ref.proto";
import "envoy/config/core/v3/base.proto";

/*

    Failover configuration for an upstream.

    Failover allows for optional fallback endpoints in the case that the primary set of endpoints is deemed
    unhealthy. As failover requires knowledge of the health of each set of endpoints, active or passive
    health checks must be configured on an upstream using failover in order for it to work properly.

    Failover closely resembles the Envoy config which this is translated to, with one notable exception.
    The priorities are not defined on the `LocalityLbEndpoints` but rather inferred from the list of
    `PrioritizedLocality`. More information on envoy prioritization can be found
    [here](https://www.envoyproxy.io/docs/envoy/v1.14.1/intro/arch_overview/upstream/load_balancing/priority#arch-overview-load-balancing-priority-levels).
    In practice this means that the priority of a given set of `LocalityLbEndpoints` is determined by its index in
    the list, first being `0` through `n-1`.

*/
message Failover {
    // Identifies where the parent upstream hosts run.
    envoy.config.core.v3.Locality locality = 1;

    message PrioritizedLocality {

        repeated LocalityLbEndpoints locality_endpoints = 1;

        // A list of references to kubernetes services to be used as endpoints for this priority.
        // As each kubernetes service must be located in the current cluster, the locality will be
        // left empty, and all endpoints from these services will be given the same load_balancing_weight.
        repeated core.solo.io.ResourceRef kube_services = 2;
    }

    // PrioritizedLocality is an implicitly prioritized list of lists of `LocalityLbEndpoints`. The priority of each
    // list of `LocalityLbEndpoints` is determined by it's index in the list.
    repeated PrioritizedLocality prioritized_localities = 2;
}

// An Endpoint that Envoy can route traffic to.
// [#next-free-field: 6]
message LbEndpoint {

    // The optional health check configuration.
    message HealthCheckConfig {
        // Optional alternative health check port value.
        //
        // By default the health check address port of an upstream host is the same
        // as the host's serving address port. This provides an alternative health
        // check port. Setting this with a non-zero value allows an upstream host
        // to have different health check address port.
        uint32 port_value = 1;

        // By default, the host header for L7 health checks is controlled by cluster level configuration
        // (see: :ref:`host <envoy_api_field_config.core.v3.HealthCheck.HttpHealthCheck.host>` and
        // :ref:`authority <envoy_api_field_config.core.v3.HealthCheck.GrpcHealthCheck.authority>`). Setting this
        // to a non-empty value allows overriding the cluster level configuration for a specific
        // endpoint.
        string hostname = 2;
    }

    // Address (hostname or IP)
    string address = 1;
    // Port the instance is listening on
    uint32 port = 2;

    // The optional health check configuration is used as configuration for the
    // health checker to contact the health checked host.
    //
    // .. attention::
    //
    //   This takes into effect only for upstream clusters with
    //   :ref:`active health checking <arch_overview_health_checking>` enabled.
    HealthCheckConfig health_check_config = 3;

    .gloo.solo.io.UpstreamSslConfig upstream_ssl_config = 4;

    // The optional load balancing weight of the upstream host; at least 1.
    // Envoy uses the load balancing weight in some of the built in load
    // balancers. The load balancing weight for an endpoint is divided by the sum
    // of the weights of all endpoints in the endpoint's locality to produce a
    // percentage of traffic for the endpoint. This percentage is then further
    // weighted by the endpoint's locality's load balancing weight from
    // LocalityLbEndpoints. If unspecified, each host is presumed to have equal
    // weight in a locality.
    google.protobuf.UInt32Value load_balancing_weight = 5;
}

// A group of endpoints belonging to a Locality.
// One can have multiple LocalityLbEndpoints for a locality, but this is
// generally only done if the different groups need to have different load
// balancing weights or different priorities.
message LocalityLbEndpoints {
    // Identifies location of where the upstream hosts run.
    envoy.config.core.v3.Locality locality = 1;

    // The group of endpoints belonging to the locality specified.
    repeated LbEndpoint lb_endpoints = 2;

    // Optional: Per priority/region/zone/sub_zone weight; at least 1. The load
    // balancing weight for a locality is divided by the sum of the weights of all
    // localities  at the same priority level to produce the effective percentage
    // of traffic for the locality.
    //
    // Locality weights are only considered when :ref:`locality weighted load
    // balancing <arch_overview_load_balancing_locality_weighted_lb>` is
    // configured. These weights are ignored otherwise. If no weights are
    // specified when locality weighted load balancing is enabled, the locality isga
    // assigned no load.
    google.protobuf.UInt32Value load_balancing_weight = 3;
}

syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "google/protobuf/struct.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/ssl.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/circuit_breaker.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/load_balancer.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/connection.proto";

import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/aws/aws.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/aws/ec2/aws_ec2.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/cors/cors.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/rest/rest.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/grpc/grpc.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/als/als.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/grpc_web/grpc_web.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/hcm/hcm.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/lbhash/lbhash.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/shadowing/shadowing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/tcp/tcp.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/tracing/tracing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/azure/azure.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/consul/consul.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/kubernetes/kubernetes.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/retries/retries.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/static/static.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/pipe/pipe.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/stats/stats.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/transformation/prefix_rewrite.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/transformation/transformation.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/faultinjection/fault.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/headers/headers.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/plugins/hostrewrite/hostrewrite.proto";

import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/api/v2/cluster/outlier_detection.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/api/v2/core/health_check.proto";

import "google/protobuf/duration.proto";

// Plugin-specific configuration that lives on gateways
// Each ListenerPlugin object contains configuration for a specific plugin
// Note to developers: new Listener Plugins must be added to this struct
// to be usable by Gloo.
message ListenerPlugins {
    als.plugins.gloo.solo.io.AccessLoggingService access_logging_service = 1;
    Extensions extensions = 2;
}

// Plugin-specific configuration that lives on http listeners
message HttpListenerPlugins {
    grpc_web.plugins.gloo.solo.io.GrpcWeb grpc_web = 1;
    hcm.plugins.gloo.solo.io.HttpConnectionManagerSettings http_connection_manager_settings = 2;
    Extensions extensions = 3;
}

// Plugin-specific configuration that lives on tcp listeners
message TcpListenerPlugins {
    tcp.plugins.gloo.solo.io.TcpProxySettings tcp_proxy_settings = 3;
}


// Plugin-specific configuration that lives on virtual hosts
// Each VirtualHostPlugin object contains configuration for a specific plugin
// Note to developers: new Virtual Host Plugins must be added to this struct
// to be usable by Gloo.
message VirtualHostPlugins {
    Extensions extensions = 1;
    retries.plugins.gloo.solo.io.RetryPolicy retries = 5;
    stats.plugins.gloo.solo.io.Stats stats = 10;
    // Append/Remove headers on Requests or Responses on all routes contained in this Virtual Host
    headers.plugins.gloo.solo.io.HeaderManipulation header_manipulation = 2;
    // Defines a CORS policy for the virtual host
    // If a CORS policy is also defined on the route matched by the request, the policies are merged.
    cors.plugins.gloo.solo.io.CorsPolicy cors = 3;
    // Transformations to apply
    envoy.api.v2.filter.http.RouteTransformations transformations = 4;
}

// Plugin-specific configuration that lives on routes
// Each RoutePlugin object contains configuration for a specific plugin
// Note to developers: new Route Plugins must be added to this struct
// to be usable by Gloo.
message RoutePlugins {
    // Transformations to apply
    envoy.api.v2.filter.http.RouteTransformations transformations = 1;
    fault.plugins.gloo.solo.io.RouteFaults faults = 2;
    transformation.plugins.gloo.solo.io.PrefixRewrite prefix_rewrite = 3;
    google.protobuf.Duration timeout = 4 [(gogoproto.stdduration) = true];
    retries.plugins.gloo.solo.io.RetryPolicy retries = 5;
    Extensions extensions = 6;
    // Defines route-specific tracing configuration.
    // See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
    // See here for additional information about configuring tracing with Gloo: https://gloo.solo.io/user_guides/setup_options/observability/#tracing
    tracing.plugins.gloo.solo.io.RouteTracingSettings tracing = 7;
    // Specifies traffic shadowing configuration for the route.
    // See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
    shadowing.plugins.gloo.solo.io.RouteShadowing shadowing = 8;
    // Append/Remove headers on Requests or Responses on this Route
    headers.plugins.gloo.solo.io.HeaderManipulation header_manipulation = 9;
    // Rewrite the Host header for requests matched on this route
    hostrewrite.plugins.gloo.solo.io.HostRewrite host_rewrite = 10;
    // Defines a CORS policy for the route
    // If a CORS policy is also defined on the route's virtual host, the policies are merged.
    cors.plugins.gloo.solo.io.CorsPolicy cors = 11;
    // For routes served by a hashing load balancer, this defines the input to the hash key
    // Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
    // - route, upstream, virtual service
    lbhash.plugins.gloo.solo.io.RouteActionHashConfig lb_hash = 12;
}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
message DestinationSpec {
    // Note to developers: new DestinationSpecs must be added to this oneof field
    // to be usable by Gloo.
    oneof destination_type {
        aws.plugins.gloo.solo.io.DestinationSpec aws = 1;
        azure.plugins.gloo.solo.io.DestinationSpec azure = 2;
        rest.plugins.gloo.solo.io.DestinationSpec rest = 3;
        grpc.plugins.gloo.solo.io.DestinationSpec grpc = 4;
    }
}

// Plugin-specific configuration that is applied when a specific weighted destination
// is selected for routing.
message WeightedDestinationPlugins {
    // Append/Remove headers on Requests or Responses to/from this Weighted Destination
    headers.plugins.gloo.solo.io.HeaderManipulation header_manipulation = 1;
    // Transformations to apply
    envoy.api.v2.filter.http.RouteTransformations transformations = 2;
}

// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin.
message UpstreamSpec {

    UpstreamSslConfig ssl_config = 1;

    // Circuit breakers for this upstream. if not set, the defaults ones from the Gloo settings will be used.
    // if those are not set, [envoy's defaults](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster/circuit_breaker.proto#envoy-api-msg-cluster-circuitbreakers)
    // will be used.
    CircuitBreakerConfig circuit_breakers = 2;
    LoadBalancerConfig load_balancer_config = 3;
    ConnectionConfig connection_config = 4;
    repeated envoy.api.v2.core.HealthCheck health_checks = 5;
    envoy.api.v2.cluster.OutlierDetection outlier_detection = 6;

    // Use http2 when communicating with this upstream
    // this field is evaluated `true` for upstreams
    // with a grpc service spec
    bool use_http2 = 7;

    // Note to developers: new Upstream Plugins must be added to this oneof field
    // to be usable by Gloo.
    oneof upstream_type {
        kubernetes.plugins.gloo.solo.io.UpstreamSpec kube = 8;
        static.plugins.gloo.solo.io.UpstreamSpec static = 9;
        pipe.plugins.gloo.solo.io.UpstreamSpec pipe = 10;
        aws.plugins.gloo.solo.io.UpstreamSpec aws = 11;
        azure.plugins.gloo.solo.io.UpstreamSpec azure = 12;
        consul.plugins.gloo.solo.io.UpstreamSpec consul = 13;
        aws_ec2.plugins.gloo.solo.io.UpstreamSpec aws_ec2 = 14;
    }
}
syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "google/protobuf/struct.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/filters/stages.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/rest/rest.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/grpc/grpc.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/als/als.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/proxy_protocol/proxy_protocol.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/grpc_web/grpc_web.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/grpc_json/grpc_json.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/header_validation/header_validation.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/lbhash/lbhash.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/shadowing/shadowing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/tcp/tcp.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/retries/retries.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/stats/stats.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/faultinjection/fault.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/aws/aws.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/wasm/wasm.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/azure/azure.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/healthcheck/healthcheck.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol_upgrade/protocol_upgrade.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/router/router.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/connection_limit/connection_limit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/local_ratelimit/local_ratelimit.proto";

import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/proxylatency/proxylatency.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/buffer/v3/buffer.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/csrf/v3/csrf.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/filter/http/gzip/v2/gzip.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/type/matcher/v3/regex.proto";

import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extproc/extproc.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/caching/caching.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/tap/tap.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ai/ai.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/transformation.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/dynamic_forward_proxy/dynamic_forward_proxy.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/stateful_session/stateful_session.proto";

import "github.com/solo-io/solo-kit/api/external/envoy/api/v2/core/base.proto";
import "github.com/solo-io/solo-kit/api/external/envoy/api/v2/core/socket_option.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// Optional, feature-specific configuration that is applied when a specific weighted destination
// is selected for routing.
message WeightedDestinationOptions {
    // Append/Remove headers on Requests or Responses to/from this Weighted Destination
    headers.options.gloo.solo.io.HeaderManipulation header_manipulation = 1;
    // Transformations to apply. Note: this field is superseded by `staged_transformations`.
    // If `staged_transformations.regular` is set, this field will be ignored.
    transformation.options.gloo.solo.io.Transformations transformations = 2 [deprecated = true];
    // Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
    // underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
    //
    // Some sample use cases:
    // * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
    // * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
    // Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
    Extensions extensions = 3;
    // Enterprise-only: Authentication configuration
    enterprise.gloo.solo.io.ExtAuthExtension extauth = 4;
    // BufferPerRoute can be used to set the maximum request size
    // that the filter will buffer before the connection
    // manager will stop buffering and return a 413 response.
    // Note: If you have not set a global config (at the gateway level), this
    // override will not do anything by itself.
    .solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute buffer_per_route = 5;

    // Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
    // where policies will be evaluated and tracked, but not enforced and add additional source origins
    // that will be allowed in addition to the destination origin.
    // For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
    .solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy csrf = 7;

    // Early transformations stage. These transformations run before most other options are processed.
    // If the `regular` field is set in here, the `transformations` field is ignored.
    transformation.options.gloo.solo.io.TransformationStages staged_transformations = 6;
}

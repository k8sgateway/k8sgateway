// TODO: this was copied form the transformation filter.
// TODO: instead of manually copying, we want to do it via script, similar to the java-control-plane
// TODO: to solo-kit/api/envoy

syntax = "proto3";

package retries.plugins.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/plugins/retries";

import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;

// Retry Policy applied to a route
message RetryPolicy {
    // Specifies the conditions under which retry takes place. These are the same
    // conditions [documented for Envoy](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#config-http-filters-router-x-envoy-retry-on)
    string retry_on = 1;

    // Specifies the allowed number of retries. This parameter is optional and
    // defaults to 1. These are the same conditions [documented for Envoy](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#config-http-filters-router-x-envoy-retry-on)
    uint32 num_retries = 2;

    // Specifies a non-zero upstream timeout per retry attempt. This parameter is optional. The
    // same conditions documented for
    // :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms` apply.
    //
    // .. note::
    //
    //   If left unspecified, Envoy will use the global
    //   :ref:`route timeout <envoy_api_field_route.RouteAction.timeout>` for the request.
    //   Consequently, when using a :ref:`5xx <config_http_filters_router_x-envoy-retry-on>` based
    //   retry policy, a request that times out will not be retried as the total timeout budget
    //   would have been exhausted.
    google.protobuf.Duration per_try_timeout = 3 [(gogoproto.stdduration) = true];
}

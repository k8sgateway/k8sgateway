syntax = "proto3";
package extauth.plugins.gloo.solo.io;

option go_package = "github.com/solo-io/solo-projects/projects/gloo/pkg/api/v1/plugins/extauth";

import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "envoy/api/v2/discovery.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";


message Settings {
  // The upstream to ask about auth decisions
  core.solo.io.ResourceRef extauthz_server_ref = 1;
  // If this is set, communication to the upstream will be with HTTP and not GRPC.
  HttpService http_service = 2;

  // If the auth server trusted id of the user, it will be set in this header.
  // Specifically this means that this header will be sanitized form the incoming request.
  string user_id_header = 3;

  // Timeout for the ext auth service to respond. defaults to 200ms
  google.protobuf.Duration request_timeout = 4 [(gogoproto.stdduration) = true];

  // In case of a failure or timeout querying the auth server, normally a request is denied.
  // if this is set to true, the request will be allowed.
  bool failure_mode_allow = 5;

  // Set this if you also want to send the body of the request, and not just the headers.
  BufferSettings request_body = 6;
}

message HttpService {
  // Sets a prefix to the value of authorization request header *Path*.
  string path_prefix = 1;

  message Request {
  // These headers will be copied from the incoming request to the request going
  // to the auth server. Note that in addition to the user's supplied matchers:
  //
  // 1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
  //
  // 2. *Content-Length* will be set to 0 and the request to the authorization service will not have
  // a message body.
    repeated string allowed_headers = 1;

    // These headers that will be included to the request to authorization service. Note that
    // client request of the same key will be overridden.
    map<string,string> headers_to_add = 2;
  }
  Request request = 2;

  message Response {
  // When this is set, authorization response headers that have a will be added to the original client request and sent to the upstream.
  // Note that coexistent headers will be overridden.
  repeated string allowed_upstream_headers = 1;

    // When this. is set, authorization response headers that will be added to the client's response when auth request is denied.
    // Note that when this list is *not* set, all the authorization response headers, except *Authority
    // (Host)* will be in the response to the client. When a header is included in this list, *Path*,
    // *Status*, *Content-Length*, *WWW-Authenticate* and *Location* are automatically added.
    repeated string allowed_client_headers = 2;
  }
  Response response = 3;
}

// Configuration for buffering the request data.
message BufferSettings {
  // Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
  // *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
  // set in this field. Note that this setting will have precedence over failure_mode_allow.
  // Defaults to 4KB.
  uint32 max_request_bytes = 1;

  // When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
  // The authorization request will be dispatched and no 413 HTTP error will be returned by the
  // filter.
  bool allow_partial_message = 2;
}


// Gloo is not expected to configure the ext auth server in this case.
// This is used with custom auth servers.
message CustomAuth {
}

// Configures auth via dynamically loaded Go plugins.
message PluginAuth {
  // A chain of plugins which will be executed in the order they are specified. The first plugin to deny a request will
  // cause a 403 response to be returned; any subsequent plugin in the chain will not be executed.
  // The headers on the OkHttpResponse returned from a plugin in the chain will be added to the request that will be sent
  // to the next one(s) according to the rules described here:
  // https://www.envoyproxy.io/docs/envoy/latest/api-v2/service/auth/v2/external_auth.proto#service-auth-v2-okhttpresponse
  repeated AuthPlugin plugins = 1;
}

message AuthPlugin {
    // Name of the plugin
    string name = 1;
    // Name of the compiled plugin file. If not specified, GlooE will look for an ".so" file with same name as the plugin.
    string plugin_file_name = 2;
    // Name of the exported symbol that implements the plugin interface in the plugin.
    // If not specified, defaults to the name of the plugin
    string exported_symbol_name = 3;

    google.protobuf.Struct config = 4;
}

message BasicAuth {
  string realm = 1;

  message Apr {
    message SaltedHashedPassword {
      string salt = 1;
      string hashed_password = 2;
    }
    map<string, SaltedHashedPassword> users = 2;
    }
  Apr apr = 2;
}

message OAuth {
  // your client id as registered with the issuer
  string client_id = 1;

  // your client secret as registered with the issuer
  core.solo.io.ResourceRef client_secret_ref = 2;

  // The url of the issuer. We will look for OIDC information in issuerUrl+
  // ".well-known/openid-configuration"
  string issuer_url = 3;

  // we to redirect after successful auth, if we can't determine the original
  // url this should be your publicly available app url.
  string app_url = 4;

  // a callback path relative to app url that will be used for OIDC callbacks.
  // needs to not be used by the application
  string callback_path = 5;
}

message OauthSecret { string client_secret = 1; }

message ApiKeyAuth {
  // identify all valid apikey secrets using the provided label selector.
  // apikey secrets must be in gloo's watch namespaces for gloo to locate them
  map<string, string> label_selector = 1;
  // a way to reference apikey secrets individually (good for testing); prefer apikey groups via label selector
  repeated core.solo.io.ResourceRef api_key_secret_refs = 2;
}

message ApiKeySecret {
  // if true, generate an apikey
  bool generate_api_key = 1;
  // if present, use the provided apikey
  string api_key = 2;
  // a list of labels (key=value) for the apikey secret.
  // virtual services may look for these labels using a provided label selector
  repeated string labels = 3;
}

message VhostExtension {
  oneof auth_config {
    BasicAuth basic_auth = 1;
    OAuth oauth = 2;
    CustomAuth custom_auth = 3;
    ApiKeyAuth api_key_auth = 4;
    PluginAuth plugin_auth = 5;
  }
}

message RouteExtension { bool disable = 1; }


/*
@solo-kit:xds-service=ExtAuthDiscoveryService
@solo-kit:resource.no_references
 */
message ExtAuthConfig {

  // @solo-kit:resource.name
  string vhost = 1;

  message OAuthConfig {
    // your client id as registered with the issuer
    string client_id = 1;

    // your client secret as registered with the issuer
    string client_secret = 2;

    // The url of the issuer. We will look for OIDC information in issuerUrl+
    // ".well-known/openid-configuration"
    string issuer_url = 3;

    // we to redirect after successful auth, if we can't determine the original
    // url this should be your publicly available app url.
    string app_url = 4;

    // a callback path relative to app url that will be used for OIDC callbacks.
    // needs to not be used by the application
    string callback_path = 5;
  }

  message ApiKeyAuthConfig {
    // a map of valid apikeys to their associated plaintext users.
    map<string, string> valid_api_key_and_user = 1;
  }

  oneof auth_config {
    OAuthConfig oauth = 3;
    BasicAuth basic_auth = 4;
    ApiKeyAuthConfig api_key_auth = 5;
    PluginAuth plugin_auth = 6;
  }
}

/*
@solo-kit:resource.xds-enabled
*/
service ExtAuthDiscoveryService {
  rpc StreamExtAuthConfig(stream envoy.api.v2.DiscoveryRequest)
      returns (stream envoy.api.v2.DiscoveryResponse) {}

  rpc DeltaExtAuthConfig(stream envoy.api.v2.DeltaDiscoveryRequest)
      returns (stream envoy.api.v2.DeltaDiscoveryResponse) {}

  rpc FetchExtAuthConfig(envoy.api.v2.DiscoveryRequest)
      returns (envoy.api.v2.DiscoveryResponse) {
    option (google.api.http) = {
      post : "/v2/discovery:extauthconfig"
      body : "*"
    };
  }
}

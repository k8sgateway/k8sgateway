// copied from https://github.com/envoyproxy/envoy-wasm/blob/edc016b1fa5adca3ebd3d7020eaed0ad7b8814ca/api/envoy/config/core/v3/http_uri.proto

syntax = "proto3";

package envoy.config.core.v3;

import "google/protobuf/duration.proto";

import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.core.v3";
option java_outer_classname = "HttpUriProto";
option java_multiple_files = true;

// manually updated this line:
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/core/v3";

// manually added equal_all:
import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

// [#protodoc-title: HTTP Service URI ]

// Envoy external URI descriptor
message HttpUri {
  // The HTTP server URI. It should be a full FQDN with protocol, host and path.
  //
  // Example:
  //
  // .. code-block:: yaml
  //
  //    uri: https://www.googleapis.com/oauth2/v1/certs
  //
  string uri = 1 [(validate.rules).string = {min_bytes: 1}];

  // Specify how `uri` is to be fetched. Today, this requires an explicit
  // cluster, but in the future we may support dynamic cluster creation or
  // inline DNS resolution. See `issue
  // <https://github.com/envoyproxy/envoy/issues/1606>`_.
  oneof http_upstream_type {
    option (validate.required) = true;

    // A cluster is created in the Envoy "cluster_manager" config
    // section. This field specifies the cluster name.
    //
    // Example:
    //
    // .. code-block:: yaml
    //
    //    cluster: jwks_cluster
    //
    string cluster = 2 [(validate.rules).string = {min_bytes: 1}];
  }

  // Sets the maximum duration in milliseconds that a response can take to arrive upon request.
  google.protobuf.Duration timeout = 3 [(validate.rules).duration = {
    required: true
    gte {}
  }];
}

// copied from https://github.com/envoyproxy/envoy-wasm/blob/edc016b1fa5adca3ebd3d7020eaed0ad7b8814ca/api/envoy/type/v3/percent.proto

syntax = "proto3";

package envoy.type.v3;

import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.type.v3";
option java_outer_classname = "PercentProto";
option java_multiple_files = true;

// manually updated this line:
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type/v3";

// manually added equal_all:
import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

// [#protodoc-title: Percent]

// Identifies a percentage, in the range [0.0, 100.0].
message Percent {
  double value = 1 [(validate.rules).double = {lte: 100.0 gte: 0.0}];
}

// A fractional percentage is used in cases in which for performance reasons performing floating
// point to integer conversions during randomness calculations is undesirable. The message includes
// both a numerator and denominator that together determine the final fractional value.
//
// * **Example**: 1/100 = 1%.
// * **Example**: 3/10000 = 0.03%.
message FractionalPercent {
  // Fraction percentages support several fixed denominator values.
  enum DenominatorType {
    // 100.
    //
    // **Example**: 1/100 = 1%.
    HUNDRED = 0;

    // 10,000.
    //
    // **Example**: 1/10000 = 0.01%.
    TEN_THOUSAND = 1;

    // 1,000,000.
    //
    // **Example**: 1/1000000 = 0.0001%.
    MILLION = 2;
  }

  // Specifies the numerator. Defaults to 0.
  uint32 numerator = 1;

  // Specifies the denominator. If the denominator specified is less than the numerator, the final
  // fractional percentage is capped at 1 (100%).
  DenominatorType denominator = 2 [(validate.rules).enum = {defined_only: true}];
}

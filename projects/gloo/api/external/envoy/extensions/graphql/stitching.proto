syntax = "proto3";

package envoy.config.resolver.stitching.v2;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/graphql/v2";

option java_package = "io.envoyproxy.envoy.config.filter.http.graphql.v2";
option java_outer_classname = "GraphQLStitchingProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "validate/validate.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/graphql/graphql.proto";


// ------------- Graphql Tools JS Input -------------
// This is not user-facing and is only used to pass to the graphql-tools js script
// This is the message which the graphql-tools js script will consume
message GraphQLToolsStitchingInput {
  message Schema {
    message TypeMergeConfig {
      string selection_set = 1;
      string field_name = 2;
      map<string,string> args = 3;
    }
    // name of the subschema, arbitrary name but must be unique in a gateway schema.
    // generally generated from the graphql schema ref
    string name = 1;
    // GraphQL schema SDL for the subschema
    string schema = 2;
    // Type merge config that the graphql-tools stitching script
    // needs to generate stitching info for the data plane
    map<string, TypeMergeConfig> type_merge_config = 3;
  }

  repeated Schema subschemas = 1;
}

//------------- Graphql Tools JS Out ------------------
// This is not user-facing and is only used to pass data back from the graphql-tools js script
// The message that is the output of the graphql tools stitching info script
message GraphQlToolsStitchingOutput {
  map<string, FieldNodes> field_nodes_by_type = 1;
  map<string, FieldNodeMap> field_nodes_by_field = 2;
  map<string, MergedTypeConfig> merged_types = 3;
  string stitched_schema = 4;
}

// -------------- Stitching Data plane API ----------
// this is the proto that the stitching data plane will consume

message FieldNode {
  string name = 1;
}

message FieldNodeMap {
  map<string,FieldNodes> nodes = 1;
}

message FieldNodes {
  repeated FieldNode field_nodes = 1;
}

message ResolverConfig {
  string selection_set = 1;
  string field_name = 2;
}

message Schemas {
  repeated string schemas = 1;
}

message ArgPath {
  // Setter Path
  repeated string setter_path = 1;
  // Extraction path
  repeated string extraction_path = 2;
}

message ResolverInfo {
  string field_name = 1;
  repeated ArgPath args = 2;
}

message MergedTypeConfig {
  string type_name = 1;
  // map of subschema name to selection set string
  // e.g. name_subschema: '{ id }'
  map<string, string> selection_sets = 2;
  // field name -> scema name
  map<string, string> unique_fields_to_subschema_name = 3;
  map<string, Schemas> non_unique_fields_to_subschema_names = 4;
  // schema -> subschemas
  map<string, Schemas> declarative_target_subschemas = 5;
  map<string, ResolverInfo> subschema_name_to_resolver_info = 6;
}

// Data plane stitching info extension message
message StitchingInfo {
  message SubschemaConfig {
    envoy.config.filter.http.graphql.v2.ExecutableSchema executable_schema = 1;
  }

  map<string, FieldNodes> field_nodes_by_type = 1;
  map<string, FieldNodeMap> field_nodes_by_field = 2;
  map<string, MergedTypeConfig> merged_types = 3;
  map<string, SubschemaConfig> subschema_name_to_subschema_config = 4;
}

// Config for the stitching resolver
message StitchingResolver {
  // Each query field comes from a specific subschema,
  // this is the name of the subschema that the query field comes from.
  string subschema_name = 1;
}


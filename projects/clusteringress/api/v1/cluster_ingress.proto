syntax = "proto3";
package clusteringress.gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/clusteringress/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "google/protobuf/any.proto";

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
/*
A simple wrapper for a kNative ClusterIngress Object.
*/
message ClusterIngress {
    option (core.solo.io.resource).short_name = "cig";
    option (core.solo.io.resource).plural_name = "clusteringresses";
    option (core.solo.io.resource).cluster_scoped = true;

    core.solo.io.Metadata metadata = 1 [(gogoproto.nullable) = false];
    core.solo.io.Status status = 4 [(gogoproto.nullable) = false]; // status is ignored, used for generated tests

    // a raw byte representation of the cluster ingress this resource wraps
    google.protobuf.Any cluster_ingress_spec = 2;

    // a raw byte representation of the ingress status of the cluster ingress object
    google.protobuf.Any cluster_ingress_status = 3 [(core.solo.io.skip_hashing) = true];
}

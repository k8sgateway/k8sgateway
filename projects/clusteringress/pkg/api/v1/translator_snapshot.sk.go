// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	github_com_solo_io_gloo_projects_clusteringress_pkg_api_external_knative "github.com/solo-io/gloo/projects/clusteringress/pkg/api/external/knative"
	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type TranslatorSnapshot struct {
	Secrets          gloo_solo_io.SecretList
	Clusteringresses github_com_solo_io_gloo_projects_clusteringress_pkg_api_external_knative.ClusterIngressList
}

func (s TranslatorSnapshot) Clone() TranslatorSnapshot {
	return TranslatorSnapshot{
		Secrets:          s.Secrets.Clone(),
		Clusteringresses: s.Clusteringresses.Clone(),
	}
}

func (s TranslatorSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashSecrets(),
		s.hashClusteringresses(),
	)
}

func (s TranslatorSnapshot) hashSecrets() uint64 {
	return hashutils.HashAll(s.Secrets.AsInterfaces()...)
}

func (s TranslatorSnapshot) hashClusteringresses() uint64 {
	return hashutils.HashAll(s.Clusteringresses.AsInterfaces()...)
}

func (s TranslatorSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("secrets", s.hashSecrets()))
	fields = append(fields, zap.Uint64("clusteringresses", s.hashClusteringresses()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type TranslatorSnapshotStringer struct {
	Version          uint64
	Secrets          []string
	Clusteringresses []string
}

func (ss TranslatorSnapshotStringer) String() string {
	s := fmt.Sprintf("TranslatorSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Secrets %v\n", len(ss.Secrets))
	for _, name := range ss.Secrets {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Clusteringresses %v\n", len(ss.Clusteringresses))
	for _, name := range ss.Clusteringresses {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TranslatorSnapshot) Stringer() TranslatorSnapshotStringer {
	return TranslatorSnapshotStringer{
		Version:          s.Hash(),
		Secrets:          s.Secrets.NamespacesDotNames(),
		Clusteringresses: s.Clusteringresses.NamespacesDotNames(),
	}
}
